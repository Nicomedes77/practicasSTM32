
menu_lcd_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000326c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08003378  08003378  00013378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035e8  080035e8  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  080035e8  080035e8  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035e8  080035e8  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035ec  080035ec  000135ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  080035f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000e0  080036d0  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080036d0  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a195  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce0  00000000  00000000  0002a29e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002c900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e08  00000000  00000000  0002d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c189  00000000  00000000  00043fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083db4  00000000  00000000  00050169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b0  00000000  00000000  000d3f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08003360 	.word	0x08003360

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08003360 	.word	0x08003360

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f002 f8f3 	bl	8002384 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000118 	.word	0x20000118

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f002 f8c3 	bl	8002384 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000118 	.word	0x20000118

0800020c <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000210:	2032      	movs	r0, #50	; 0x32
 8000212:	f001 f855 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000216:	2030      	movs	r0, #48	; 0x30
 8000218:	f7ff ff98 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800021c:	2005      	movs	r0, #5
 800021e:	f001 f84f 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000222:	2030      	movs	r0, #48	; 0x30
 8000224:	f7ff ff92 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000228:	2001      	movs	r0, #1
 800022a:	f001 f849 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800022e:	2030      	movs	r0, #48	; 0x30
 8000230:	f7ff ff8c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000234:	200a      	movs	r0, #10
 8000236:	f001 f843 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800023a:	2020      	movs	r0, #32
 800023c:	f7ff ff86 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 8000240:	200a      	movs	r0, #10
 8000242:	f001 f83d 	bl	80012c0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000246:	2028      	movs	r0, #40	; 0x28
 8000248:	f7ff ff80 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f001 f837 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000252:	2008      	movs	r0, #8
 8000254:	f7ff ff7a 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f001 f831 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800025e:	2001      	movs	r0, #1
 8000260:	f7ff ff74 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000264:	2001      	movs	r0, #1
 8000266:	f001 f82b 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800026a:	2006      	movs	r0, #6
 800026c:	f7ff ff6e 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 8000270:	2001      	movs	r0, #1
 8000272:	f001 f825 	bl	80012c0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000276:	200c      	movs	r0, #12
 8000278:	f7ff ff68 	bl	800014c <lcd_send_cmd>
}
 800027c:	bf00      	nop
 800027e:	bd80      	pop	{r7, pc}

08000280 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000288:	e006      	b.n	8000298 <lcd_send_string+0x18>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	1c5a      	adds	r2, r3, #1
 800028e:	607a      	str	r2, [r7, #4]
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	4618      	mov	r0, r3
 8000294:	f7ff ff8a 	bl	80001ac <lcd_send_data>
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d1f4      	bne.n	800028a <lcd_send_string+0xa>
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
	...

080002ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b0:	f000 ffa4 	bl	80011fc <HAL_Init>

  /* USER CODE BEGIN Init */
	PETfilConv1.colecFil_state = false;
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <main+0x6c>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	705a      	strb	r2, [r3, #1]
	PETfilConv1.colecPET_state = false;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <main+0x6c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	701a      	strb	r2, [r3, #0]
	PETfilConv1.filDetector_state = false;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <main+0x6c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	709a      	strb	r2, [r3, #2]
	PETfilConv1.lightAlarm_state = false;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <main+0x6c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	711a      	strb	r2, [r3, #4]
	PETfilConv1.soundAlarm_state = false;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <main+0x6c>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	70da      	strb	r2, [r3, #3]
	PETfilConv1.ExtTemp = 25;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <main+0x6c>)
 80002d4:	2219      	movs	r2, #25
 80002d6:	609a      	str	r2, [r3, #8]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f822 	bl	8000320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f000 f906 	bl	80004ec <MX_GPIO_Init>
  MX_DMA_Init();
 80002e0:	f000 f8e6 	bl	80004b0 <MX_DMA_Init>
  MX_I2C1_Init();
 80002e4:	f000 f8b6 	bl	8000454 <MX_I2C1_Init>
  MX_ADC1_Init();
 80002e8:	f000 f876 	bl	80003d8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80002ec:	f7ff ff8e 	bl	800020c <lcd_init>
  HAL_Delay(100);
 80002f0:	2064      	movs	r0, #100	; 0x64
 80002f2:	f000 ffe5 	bl	80012c0 <HAL_Delay>
  printScreen(ScreenStart);
 80002f6:	4809      	ldr	r0, [pc, #36]	; (800031c <main+0x70>)
 80002f8:	f000 fddc 	bl	8000eb4 <printScreen>
  HAL_Delay(4000);
 80002fc:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000300:	f000 ffde 	bl	80012c0 <HAL_Delay>
  clearScreen();
 8000304:	f000 fdfc 	bl	8000f00 <clearScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updateDataGUI();
 8000308:	f000 f986 	bl	8000618 <updateDataGUI>
	  updateLCD();
 800030c:	f000 fc04 	bl	8000b18 <updateLCD>
	  updateCursor();
 8000310:	f000 fc9e 	bl	8000c50 <updateCursor>
  {
 8000314:	e7f8      	b.n	8000308 <main+0x5c>
 8000316:	bf00      	nop
 8000318:	2000019c 	.word	0x2000019c
 800031c:	20000018 	.word	0x20000018

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b094      	sub	sp, #80	; 0x50
 8000324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800032a:	2228      	movs	r2, #40	; 0x28
 800032c:	2100      	movs	r1, #0
 800032e:	4618      	mov	r0, r3
 8000330:	f003 f80e 	bl	8003350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
 800033e:	609a      	str	r2, [r3, #8]
 8000340:	60da      	str	r2, [r3, #12]
 8000342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000350:	2301      	movs	r3, #1
 8000352:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000354:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000358:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000366:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000370:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000376:	4618      	mov	r0, r3
 8000378:	f002 fb0a 	bl	8002990 <HAL_RCC_OscConfig>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000382:	f000 fdc7 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000386:	230f      	movs	r3, #15
 8000388:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000396:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	2102      	movs	r1, #2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f002 fd74 	bl	8002e90 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80003ae:	f000 fdb1 	bl	8000f14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80003b2:	2302      	movs	r3, #2
 80003b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80003b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80003ba:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 feec 	bl	800319c <HAL_RCCEx_PeriphCLKConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0xae>
  {
    Error_Handler();
 80003ca:	f000 fda3 	bl	8000f14 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3750      	adds	r7, #80	; 0x50
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003de:	1d3b      	adds	r3, r7, #4
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003e8:	4b18      	ldr	r3, [pc, #96]	; (800044c <MX_ADC1_Init+0x74>)
 80003ea:	4a19      	ldr	r2, [pc, #100]	; (8000450 <MX_ADC1_Init+0x78>)
 80003ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <MX_ADC1_Init+0x74>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f4:	4b15      	ldr	r3, [pc, #84]	; (800044c <MX_ADC1_Init+0x74>)
 80003f6:	2201      	movs	r2, #1
 80003f8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fa:	4b14      	ldr	r3, [pc, #80]	; (800044c <MX_ADC1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000400:	4b12      	ldr	r3, [pc, #72]	; (800044c <MX_ADC1_Init+0x74>)
 8000402:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000406:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000408:	4b10      	ldr	r3, [pc, #64]	; (800044c <MX_ADC1_Init+0x74>)
 800040a:	2200      	movs	r2, #0
 800040c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <MX_ADC1_Init+0x74>)
 8000410:	2201      	movs	r2, #1
 8000412:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000414:	480d      	ldr	r0, [pc, #52]	; (800044c <MX_ADC1_Init+0x74>)
 8000416:	f000 ff77 	bl	8001308 <HAL_ADC_Init>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000420:	f000 fd78 	bl	8000f14 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000424:	2300      	movs	r3, #0
 8000426:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000428:	2301      	movs	r3, #1
 800042a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000430:	1d3b      	adds	r3, r7, #4
 8000432:	4619      	mov	r1, r3
 8000434:	4805      	ldr	r0, [pc, #20]	; (800044c <MX_ADC1_Init+0x74>)
 8000436:	f001 f915 	bl	8001664 <HAL_ADC_ConfigChannel>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000440:	f000 fd68 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000444:	bf00      	nop
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000016c 	.word	0x2000016c
 8000450:	40012400 	.word	0x40012400

08000454 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000458:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <MX_I2C1_Init+0x50>)
 800045a:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <MX_I2C1_Init+0x54>)
 800045c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800045e:	4b11      	ldr	r3, [pc, #68]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000460:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MX_I2C1_Init+0x58>)
 8000462:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000464:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000466:	2200      	movs	r2, #0
 8000468:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <MX_I2C1_Init+0x50>)
 800046c:	2200      	movs	r2, #0
 800046e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000476:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000478:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <MX_I2C1_Init+0x50>)
 800047a:	2200      	movs	r2, #0
 800047c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000484:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800048a:	4b06      	ldr	r3, [pc, #24]	; (80004a4 <MX_I2C1_Init+0x50>)
 800048c:	2200      	movs	r2, #0
 800048e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000490:	4804      	ldr	r0, [pc, #16]	; (80004a4 <MX_I2C1_Init+0x50>)
 8000492:	f001 fe33 	bl	80020fc <HAL_I2C_Init>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800049c:	f000 fd3a 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004a0:	bf00      	nop
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000118 	.word	0x20000118
 80004a8:	40005400 	.word	0x40005400
 80004ac:	000186a0 	.word	0x000186a0

080004b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_DMA_Init+0x38>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <MX_DMA_Init+0x38>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6153      	str	r3, [r2, #20]
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_DMA_Init+0x38>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2100      	movs	r1, #0
 80004d2:	200b      	movs	r0, #11
 80004d4:	f001 fadf 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80004d8:	200b      	movs	r0, #11
 80004da:	f001 faf8 	bl	8001ace <HAL_NVIC_EnableIRQ>

}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 0310 	add.w	r3, r7, #16
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000500:	4b22      	ldr	r3, [pc, #136]	; (800058c <MX_GPIO_Init+0xa0>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a21      	ldr	r2, [pc, #132]	; (800058c <MX_GPIO_Init+0xa0>)
 8000506:	f043 0320 	orr.w	r3, r3, #32
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b1f      	ldr	r3, [pc, #124]	; (800058c <MX_GPIO_Init+0xa0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0320 	and.w	r3, r3, #32
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000518:	4b1c      	ldr	r3, [pc, #112]	; (800058c <MX_GPIO_Init+0xa0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <MX_GPIO_Init+0xa0>)
 800051e:	f043 0304 	orr.w	r3, r3, #4
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <MX_GPIO_Init+0xa0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0304 	and.w	r3, r3, #4
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <MX_GPIO_Init+0xa0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a15      	ldr	r2, [pc, #84]	; (800058c <MX_GPIO_Init+0xa0>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b13      	ldr	r3, [pc, #76]	; (800058c <MX_GPIO_Init+0xa0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0308 	and.w	r3, r3, #8
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : RotaryDT_Pin RotaryCLK_Pin Button_Pin */
  GPIO_InitStruct.Pin = RotaryDT_Pin|RotaryCLK_Pin|Button_Pin;
 8000548:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800054c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_GPIO_Init+0xa4>)
 8000550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	480d      	ldr	r0, [pc, #52]	; (8000594 <MX_GPIO_Init+0xa8>)
 800055e:	f001 fc31 	bl	8001dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000562:	2200      	movs	r2, #0
 8000564:	2100      	movs	r1, #0
 8000566:	2017      	movs	r0, #23
 8000568:	f001 fa95 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800056c:	2017      	movs	r0, #23
 800056e:	f001 faae 	bl	8001ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	2028      	movs	r0, #40	; 0x28
 8000578:	f001 fa8d 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800057c:	2028      	movs	r0, #40	; 0x28
 800057e:	f001 faa6 	bl	8001ace <HAL_NVIC_EnableIRQ>

}
 8000582:	bf00      	nop
 8000584:	3720      	adds	r7, #32
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	10110000 	.word	0x10110000
 8000594:	40010800 	.word	0x40010800

08000598 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	80fb      	strh	r3, [r7, #6]
	currentTick = HAL_GetTick();
 80005a2:	f000 fe83 	bl	80012ac <HAL_GetTick>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a18      	ldr	r2, [pc, #96]	; (800060c <HAL_GPIO_EXTI_Callback+0x74>)
 80005aa:	6013      	str	r3, [r2, #0]
	//Rotate encoder CCKW or CKW
	if(currentTick - previousTick > 300)
 80005ac:	4b17      	ldr	r3, [pc, #92]	; (800060c <HAL_GPIO_EXTI_Callback+0x74>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <HAL_GPIO_EXTI_Callback+0x78>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005ba:	d922      	bls.n	8000602 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		if(GPIO_Pin == RotaryDT_Pin)
 80005bc:	88fb      	ldrh	r3, [r7, #6]
 80005be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c2:	d107      	bne.n	80005d4 <HAL_GPIO_EXTI_Callback+0x3c>
		{
	    	//HAL_GPIO_TogglePin(GPIOB, LED_ROJO_Pin);
//	    	if(PrinMenuIndex == 1)PrinMenuIndex = 1;
//	    	else PrinMenuIndex--;
	    	btnPressed = Left;
 80005c4:	4b13      	ldr	r3, [pc, #76]	; (8000614 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	701a      	strb	r2, [r3, #0]
	    	previousTick = currentTick;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <HAL_GPIO_EXTI_Callback+0x74>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <HAL_GPIO_EXTI_Callback+0x78>)
 80005d0:	6013      	str	r3, [r2, #0]
//	    	else PrinMenuIndex++;
	    	btnPressed = Ok;
	    	previousTick = currentTick;
		}
	}
}
 80005d2:	e016      	b.n	8000602 <HAL_GPIO_EXTI_Callback+0x6a>
		else if(GPIO_Pin == RotaryCLK_Pin)
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005da:	d107      	bne.n	80005ec <HAL_GPIO_EXTI_Callback+0x54>
	    	btnPressed = Right;
 80005dc:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005de:	2202      	movs	r2, #2
 80005e0:	701a      	strb	r2, [r3, #0]
	    	previousTick = currentTick;
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <HAL_GPIO_EXTI_Callback+0x74>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <HAL_GPIO_EXTI_Callback+0x78>)
 80005e8:	6013      	str	r3, [r2, #0]
}
 80005ea:	e00a      	b.n	8000602 <HAL_GPIO_EXTI_Callback+0x6a>
		else if(GPIO_Pin == Button_Pin)
 80005ec:	88fb      	ldrh	r3, [r7, #6]
 80005ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005f2:	d106      	bne.n	8000602 <HAL_GPIO_EXTI_Callback+0x6a>
	    	btnPressed = Ok;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <HAL_GPIO_EXTI_Callback+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	    	previousTick = currentTick;
 80005fa:	4b04      	ldr	r3, [pc, #16]	; (800060c <HAL_GPIO_EXTI_Callback+0x74>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_GPIO_EXTI_Callback+0x78>)
 8000600:	6013      	str	r3, [r2, #0]
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000104 	.word	0x20000104
 8000610:	20000100 	.word	0x20000100
 8000614:	20000108 	.word	0x20000108

08000618 <updateDataGUI>:

void updateDataGUI(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	if(btnPressed != NoPressed)
 800061c:	4baa      	ldr	r3, [pc, #680]	; (80008c8 <updateDataGUI+0x2b0>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b03      	cmp	r3, #3
 8000622:	f000 826c 	beq.w	8000afe <updateDataGUI+0x4e6>
	{
		switch(btnPressed)
 8000626:	4ba8      	ldr	r3, [pc, #672]	; (80008c8 <updateDataGUI+0x2b0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b02      	cmp	r3, #2
 800062c:	f000 8182 	beq.w	8000934 <updateDataGUI+0x31c>
 8000630:	2b02      	cmp	r3, #2
 8000632:	f300 8261 	bgt.w	8000af8 <updateDataGUI+0x4e0>
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <updateDataGUI+0x2a>
 800063a:	2b01      	cmp	r3, #1
 800063c:	f000 8105 	beq.w	800084a <updateDataGUI+0x232>
 8000640:	e25a      	b.n	8000af8 <updateDataGUI+0x4e0>
		{
			case Ok:
				switch(currentScreen)
 8000642:	4ba2      	ldr	r3, [pc, #648]	; (80008cc <updateDataGUI+0x2b4>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b0c      	cmp	r3, #12
 8000648:	f200 8253 	bhi.w	8000af2 <updateDataGUI+0x4da>
 800064c:	a201      	add	r2, pc, #4	; (adr r2, 8000654 <updateDataGUI+0x3c>)
 800064e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000652:	bf00      	nop
 8000654:	08000689 	.word	0x08000689
 8000658:	08000af3 	.word	0x08000af3
 800065c:	0800070b 	.word	0x0800070b
 8000660:	0800072d 	.word	0x0800072d
 8000664:	08000763 	.word	0x08000763
 8000668:	08000799 	.word	0x08000799
 800066c:	08000813 	.word	0x08000813
 8000670:	08000823 	.word	0x08000823
 8000674:	0800082b 	.word	0x0800082b
 8000678:	08000af3 	.word	0x08000af3
 800067c:	08000af3 	.word	0x08000af3
 8000680:	08000697 	.word	0x08000697
 8000684:	080006d9 	.word	0x080006d9
				{
					case workingScreen:	//pantalla de trabajo
						currentScreen = mainMenu_part1;
 8000688:	4b90      	ldr	r3, [pc, #576]	; (80008cc <updateDataGUI+0x2b4>)
 800068a:	220b      	movs	r2, #11
 800068c:	701a      	strb	r2, [r3, #0]
						indexes[1] = 0;
 800068e:	4b90      	ldr	r3, [pc, #576]	; (80008d0 <updateDataGUI+0x2b8>)
 8000690:	2200      	movs	r2, #0
 8000692:	705a      	strb	r2, [r3, #1]
					break;
 8000694:	e0d8      	b.n	8000848 <updateDataGUI+0x230>

					case mainMenu_part1: //menu principal (parte 1)
						if(indexes[1] == 0) currentScreen = workingScreen;
 8000696:	4b8e      	ldr	r3, [pc, #568]	; (80008d0 <updateDataGUI+0x2b8>)
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <updateDataGUI+0x8e>
 800069e:	4b8b      	ldr	r3, [pc, #556]	; (80008cc <updateDataGUI+0x2b4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
						else if(indexes[1] == 1) currentScreen = subMenuExtrusores;
						else if(indexes[1] == 2) currentScreen = subMenuColectoresPET;
						else if(indexes[1] == 3) currentScreen = subMenuColectoresFil;
					break;
 80006a4:	e0c5      	b.n	8000832 <updateDataGUI+0x21a>
						else if(indexes[1] == 1) currentScreen = subMenuExtrusores;
 80006a6:	4b8a      	ldr	r3, [pc, #552]	; (80008d0 <updateDataGUI+0x2b8>)
 80006a8:	785b      	ldrb	r3, [r3, #1]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d103      	bne.n	80006b6 <updateDataGUI+0x9e>
 80006ae:	4b87      	ldr	r3, [pc, #540]	; (80008cc <updateDataGUI+0x2b4>)
 80006b0:	2202      	movs	r2, #2
 80006b2:	701a      	strb	r2, [r3, #0]
					break;
 80006b4:	e0bd      	b.n	8000832 <updateDataGUI+0x21a>
						else if(indexes[1] == 2) currentScreen = subMenuColectoresPET;
 80006b6:	4b86      	ldr	r3, [pc, #536]	; (80008d0 <updateDataGUI+0x2b8>)
 80006b8:	785b      	ldrb	r3, [r3, #1]
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d103      	bne.n	80006c6 <updateDataGUI+0xae>
 80006be:	4b83      	ldr	r3, [pc, #524]	; (80008cc <updateDataGUI+0x2b4>)
 80006c0:	2203      	movs	r2, #3
 80006c2:	701a      	strb	r2, [r3, #0]
					break;
 80006c4:	e0b5      	b.n	8000832 <updateDataGUI+0x21a>
						else if(indexes[1] == 3) currentScreen = subMenuColectoresFil;
 80006c6:	4b82      	ldr	r3, [pc, #520]	; (80008d0 <updateDataGUI+0x2b8>)
 80006c8:	785b      	ldrb	r3, [r3, #1]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	f040 80b1 	bne.w	8000832 <updateDataGUI+0x21a>
 80006d0:	4b7e      	ldr	r3, [pc, #504]	; (80008cc <updateDataGUI+0x2b4>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	701a      	strb	r2, [r3, #0]
					break;
 80006d6:	e0ac      	b.n	8000832 <updateDataGUI+0x21a>

					case mainMenu_part2: //menu principal (parte 2)
						if(indexes[1] == 4) currentScreen = subMenuAlarmas;
 80006d8:	4b7d      	ldr	r3, [pc, #500]	; (80008d0 <updateDataGUI+0x2b8>)
 80006da:	785b      	ldrb	r3, [r3, #1]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d103      	bne.n	80006e8 <updateDataGUI+0xd0>
 80006e0:	4b7a      	ldr	r3, [pc, #488]	; (80008cc <updateDataGUI+0x2b4>)
 80006e2:	2205      	movs	r2, #5
 80006e4:	701a      	strb	r2, [r3, #0]
						else if(indexes[1] == 5) currentScreen = subMenuHistorial;
						else if(indexes[1] == 6) currentScreen = subMenuAcercaDe_part1;
					break;
 80006e6:	e0a6      	b.n	8000836 <updateDataGUI+0x21e>
						else if(indexes[1] == 5) currentScreen = subMenuHistorial;
 80006e8:	4b79      	ldr	r3, [pc, #484]	; (80008d0 <updateDataGUI+0x2b8>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	d103      	bne.n	80006f8 <updateDataGUI+0xe0>
 80006f0:	4b76      	ldr	r3, [pc, #472]	; (80008cc <updateDataGUI+0x2b4>)
 80006f2:	2206      	movs	r2, #6
 80006f4:	701a      	strb	r2, [r3, #0]
					break;
 80006f6:	e09e      	b.n	8000836 <updateDataGUI+0x21e>
						else if(indexes[1] == 6) currentScreen = subMenuAcercaDe_part1;
 80006f8:	4b75      	ldr	r3, [pc, #468]	; (80008d0 <updateDataGUI+0x2b8>)
 80006fa:	785b      	ldrb	r3, [r3, #1]
 80006fc:	2b06      	cmp	r3, #6
 80006fe:	f040 809a 	bne.w	8000836 <updateDataGUI+0x21e>
 8000702:	4b72      	ldr	r3, [pc, #456]	; (80008cc <updateDataGUI+0x2b4>)
 8000704:	2207      	movs	r2, #7
 8000706:	701a      	strb	r2, [r3, #0]
					break;
 8000708:	e095      	b.n	8000836 <updateDataGUI+0x21e>

					case subMenuExtrusores: //sub menu 1 (EXTRUSORES)
						if(indexes[2] == 0) currentScreen = mainMenu_part1;
 800070a:	4b71      	ldr	r3, [pc, #452]	; (80008d0 <updateDataGUI+0x2b8>)
 800070c:	789b      	ldrb	r3, [r3, #2]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d103      	bne.n	800071a <updateDataGUI+0x102>
 8000712:	4b6e      	ldr	r3, [pc, #440]	; (80008cc <updateDataGUI+0x2b4>)
 8000714:	220b      	movs	r2, #11
 8000716:	701a      	strb	r2, [r3, #0]
						else if (indexes[2] == 1) currentScreen = menuSetTempExt;
					break;
 8000718:	e08f      	b.n	800083a <updateDataGUI+0x222>
						else if (indexes[2] == 1) currentScreen = menuSetTempExt;
 800071a:	4b6d      	ldr	r3, [pc, #436]	; (80008d0 <updateDataGUI+0x2b8>)
 800071c:	789b      	ldrb	r3, [r3, #2]
 800071e:	2b01      	cmp	r3, #1
 8000720:	f040 808b 	bne.w	800083a <updateDataGUI+0x222>
 8000724:	4b69      	ldr	r3, [pc, #420]	; (80008cc <updateDataGUI+0x2b4>)
 8000726:	2208      	movs	r2, #8
 8000728:	701a      	strb	r2, [r3, #0]
					break;
 800072a:	e086      	b.n	800083a <updateDataGUI+0x222>

					case subMenuColectoresPET:	//sub menu 2 (COLECTORES PET)
						if(indexes[3] == 0) currentScreen = mainMenu_part1;
 800072c:	4b68      	ldr	r3, [pc, #416]	; (80008d0 <updateDataGUI+0x2b8>)
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <updateDataGUI+0x124>
 8000734:	4b65      	ldr	r3, [pc, #404]	; (80008cc <updateDataGUI+0x2b4>)
 8000736:	220b      	movs	r2, #11
 8000738:	701a      	strb	r2, [r3, #0]
							{
								PETfilConv1.colecPET_state = false;
								//borra OK en esa linea
							}
						}
					break;
 800073a:	e080      	b.n	800083e <updateDataGUI+0x226>
						else if(indexes[3] == 1)
 800073c:	4b64      	ldr	r3, [pc, #400]	; (80008d0 <updateDataGUI+0x2b8>)
 800073e:	78db      	ldrb	r3, [r3, #3]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d17c      	bne.n	800083e <updateDataGUI+0x226>
							if(PETfilConv1.colecPET_state == false)
 8000744:	4b63      	ldr	r3, [pc, #396]	; (80008d4 <updateDataGUI+0x2bc>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	f083 0301 	eor.w	r3, r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <updateDataGUI+0x142>
								PETfilConv1.colecPET_state = true;
 8000752:	4b60      	ldr	r3, [pc, #384]	; (80008d4 <updateDataGUI+0x2bc>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
					break;
 8000758:	e071      	b.n	800083e <updateDataGUI+0x226>
								PETfilConv1.colecPET_state = false;
 800075a:	4b5e      	ldr	r3, [pc, #376]	; (80008d4 <updateDataGUI+0x2bc>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
					break;
 8000760:	e06d      	b.n	800083e <updateDataGUI+0x226>

					case subMenuColectoresFil:	//sub menu 3 (COLECTORES fil.)
						if(indexes[4] == 0) currentScreen = mainMenu_part1;
 8000762:	4b5b      	ldr	r3, [pc, #364]	; (80008d0 <updateDataGUI+0x2b8>)
 8000764:	791b      	ldrb	r3, [r3, #4]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d103      	bne.n	8000772 <updateDataGUI+0x15a>
 800076a:	4b58      	ldr	r3, [pc, #352]	; (80008cc <updateDataGUI+0x2b4>)
 800076c:	220b      	movs	r2, #11
 800076e:	701a      	strb	r2, [r3, #0]
								PETfilConv1.colecFil_state = false;
								//borra OK en esa linea
							}
						}

					break;
 8000770:	e067      	b.n	8000842 <updateDataGUI+0x22a>
						else if(indexes[4] == 1)
 8000772:	4b57      	ldr	r3, [pc, #348]	; (80008d0 <updateDataGUI+0x2b8>)
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d163      	bne.n	8000842 <updateDataGUI+0x22a>
							if(PETfilConv1.colecFil_state == false)
 800077a:	4b56      	ldr	r3, [pc, #344]	; (80008d4 <updateDataGUI+0x2bc>)
 800077c:	785b      	ldrb	r3, [r3, #1]
 800077e:	f083 0301 	eor.w	r3, r3, #1
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d003      	beq.n	8000790 <updateDataGUI+0x178>
								PETfilConv1.colecFil_state = true;
 8000788:	4b52      	ldr	r3, [pc, #328]	; (80008d4 <updateDataGUI+0x2bc>)
 800078a:	2201      	movs	r2, #1
 800078c:	705a      	strb	r2, [r3, #1]
					break;
 800078e:	e058      	b.n	8000842 <updateDataGUI+0x22a>
								PETfilConv1.colecFil_state = false;
 8000790:	4b50      	ldr	r3, [pc, #320]	; (80008d4 <updateDataGUI+0x2bc>)
 8000792:	2200      	movs	r2, #0
 8000794:	705a      	strb	r2, [r3, #1]
					break;
 8000796:	e054      	b.n	8000842 <updateDataGUI+0x22a>

					case subMenuAlarmas:	//sub menu 4 (ALARMAS)
						if(indexes[5] == 0) currentScreen = mainMenu_part2;
 8000798:	4b4d      	ldr	r3, [pc, #308]	; (80008d0 <updateDataGUI+0x2b8>)
 800079a:	795b      	ldrb	r3, [r3, #5]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d103      	bne.n	80007a8 <updateDataGUI+0x190>
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <updateDataGUI+0x2b4>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e024      	b.n	80007f2 <updateDataGUI+0x1da>
						else if(indexes[5] == 1)
 80007a8:	4b49      	ldr	r3, [pc, #292]	; (80008d0 <updateDataGUI+0x2b8>)
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d10e      	bne.n	80007ce <updateDataGUI+0x1b6>
						{
							if(PETfilConv1.lightAlarm_state == false)
 80007b0:	4b48      	ldr	r3, [pc, #288]	; (80008d4 <updateDataGUI+0x2bc>)
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	f083 0301 	eor.w	r3, r3, #1
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d003      	beq.n	80007c6 <updateDataGUI+0x1ae>
							{
								PETfilConv1.lightAlarm_state = true;
 80007be:	4b45      	ldr	r3, [pc, #276]	; (80008d4 <updateDataGUI+0x2bc>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	711a      	strb	r2, [r3, #4]
 80007c4:	e015      	b.n	80007f2 <updateDataGUI+0x1da>
								//imprime un OK en esa linea
							}
							else
							{
								PETfilConv1.lightAlarm_state = false;
 80007c6:	4b43      	ldr	r3, [pc, #268]	; (80008d4 <updateDataGUI+0x2bc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	711a      	strb	r2, [r3, #4]
 80007cc:	e011      	b.n	80007f2 <updateDataGUI+0x1da>
								//borra OK en esa linea
							}
						}
						else if(indexes[5] == 2)
 80007ce:	4b40      	ldr	r3, [pc, #256]	; (80008d0 <updateDataGUI+0x2b8>)
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d10d      	bne.n	80007f2 <updateDataGUI+0x1da>
						{
							if(PETfilConv1.soundAlarm_state == false)
 80007d6:	4b3f      	ldr	r3, [pc, #252]	; (80008d4 <updateDataGUI+0x2bc>)
 80007d8:	78db      	ldrb	r3, [r3, #3]
 80007da:	f083 0301 	eor.w	r3, r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d003      	beq.n	80007ec <updateDataGUI+0x1d4>
							{
								PETfilConv1.soundAlarm_state = true;
 80007e4:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <updateDataGUI+0x2bc>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	70da      	strb	r2, [r3, #3]
 80007ea:	e002      	b.n	80007f2 <updateDataGUI+0x1da>
								//imprime un OK en esa linea
							}
							else
							{
								PETfilConv1.soundAlarm_state = false;
 80007ec:	4b39      	ldr	r3, [pc, #228]	; (80008d4 <updateDataGUI+0x2bc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	70da      	strb	r2, [r3, #3]
								//borra OK en esa linea
							}
						}

						if((PETfilConv1.soundAlarm_state == true)||(PETfilConv1.lightAlarm_state == true))	PETfilConv1.filDetector_state = true;
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <updateDataGUI+0x2bc>)
 80007f4:	78db      	ldrb	r3, [r3, #3]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d103      	bne.n	8000802 <updateDataGUI+0x1ea>
 80007fa:	4b36      	ldr	r3, [pc, #216]	; (80008d4 <updateDataGUI+0x2bc>)
 80007fc:	791b      	ldrb	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <updateDataGUI+0x1f2>
 8000802:	4b34      	ldr	r3, [pc, #208]	; (80008d4 <updateDataGUI+0x2bc>)
 8000804:	2201      	movs	r2, #1
 8000806:	709a      	strb	r2, [r3, #2]
						else PETfilConv1.filDetector_state = false;
					break;
 8000808:	e01e      	b.n	8000848 <updateDataGUI+0x230>
						else PETfilConv1.filDetector_state = false;
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <updateDataGUI+0x2bc>)
 800080c:	2200      	movs	r2, #0
 800080e:	709a      	strb	r2, [r3, #2]
					break;
 8000810:	e01a      	b.n	8000848 <updateDataGUI+0x230>

					case subMenuHistorial:	//sub menu 5 (HISTORIAL)
						if(indexes[6] == 0) currentScreen = mainMenu_part2;
 8000812:	4b2f      	ldr	r3, [pc, #188]	; (80008d0 <updateDataGUI+0x2b8>)
 8000814:	799b      	ldrb	r3, [r3, #6]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d115      	bne.n	8000846 <updateDataGUI+0x22e>
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <updateDataGUI+0x2b4>)
 800081c:	220c      	movs	r2, #12
 800081e:	701a      	strb	r2, [r3, #0]
						else{} //borra el valor acumulador del extrusor
					break;
 8000820:	e011      	b.n	8000846 <updateDataGUI+0x22e>

					case subMenuAcercaDe_part1:	//sub menu 6 (ACERCA DE...)
						currentScreen = mainMenu_part2;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <updateDataGUI+0x2b4>)
 8000824:	220c      	movs	r2, #12
 8000826:	701a      	strb	r2, [r3, #0]
					break;
 8000828:	e00e      	b.n	8000848 <updateDataGUI+0x230>

					case menuSetTempExt:	//menu seteo de temperatura COLECTORES
						currentScreen = subMenuColectoresPET;
 800082a:	4b28      	ldr	r3, [pc, #160]	; (80008cc <updateDataGUI+0x2b4>)
 800082c:	2203      	movs	r2, #3
 800082e:	701a      	strb	r2, [r3, #0]
					break;
 8000830:	e00a      	b.n	8000848 <updateDataGUI+0x230>
					break;
 8000832:	bf00      	nop
 8000834:	e15d      	b.n	8000af2 <updateDataGUI+0x4da>
					break;
 8000836:	bf00      	nop
 8000838:	e15b      	b.n	8000af2 <updateDataGUI+0x4da>
					break;
 800083a:	bf00      	nop
 800083c:	e159      	b.n	8000af2 <updateDataGUI+0x4da>
					break;
 800083e:	bf00      	nop
 8000840:	e157      	b.n	8000af2 <updateDataGUI+0x4da>
					break;
 8000842:	bf00      	nop
 8000844:	e155      	b.n	8000af2 <updateDataGUI+0x4da>
					break;
 8000846:	bf00      	nop
				}
				break;
 8000848:	e153      	b.n	8000af2 <updateDataGUI+0x4da>

				case Left:
					switch(currentScreen)
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <updateDataGUI+0x2b4>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b0c      	cmp	r3, #12
 8000850:	d857      	bhi.n	8000902 <updateDataGUI+0x2ea>
 8000852:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <updateDataGUI+0x240>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	08000931 	.word	0x08000931
 800085c:	08000903 	.word	0x08000903
 8000860:	08000903 	.word	0x08000903
 8000864:	08000903 	.word	0x08000903
 8000868:	08000903 	.word	0x08000903
 800086c:	08000903 	.word	0x08000903
 8000870:	08000903 	.word	0x08000903
 8000874:	08000903 	.word	0x08000903
 8000878:	080008e7 	.word	0x080008e7
 800087c:	08000903 	.word	0x08000903
 8000880:	08000903 	.word	0x08000903
 8000884:	0800088d 	.word	0x0800088d
 8000888:	080008ab 	.word	0x080008ab
						case workingScreen:	//pantalla de trabajo
							//NADA
						break;

						case mainMenu_part1:
							if(indexes[1] == 0) indexes[1] = 0;
 800088c:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <updateDataGUI+0x2b8>)
 800088e:	785b      	ldrb	r3, [r3, #1]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d103      	bne.n	800089c <updateDataGUI+0x284>
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <updateDataGUI+0x2b8>)
 8000896:	2200      	movs	r2, #0
 8000898:	705a      	strb	r2, [r3, #1]
							else	indexes[1]--;
						break;
 800089a:	e04a      	b.n	8000932 <updateDataGUI+0x31a>
							else	indexes[1]--;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <updateDataGUI+0x2b8>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	3b01      	subs	r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <updateDataGUI+0x2b8>)
 80008a6:	705a      	strb	r2, [r3, #1]
						break;
 80008a8:	e043      	b.n	8000932 <updateDataGUI+0x31a>

						case mainMenu_part2:
							if(indexes[1] <= 4)
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <updateDataGUI+0x2b8>)
 80008ac:	785b      	ldrb	r3, [r3, #1]
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d812      	bhi.n	80008d8 <updateDataGUI+0x2c0>
							{
								currentScreen = mainMenu_part1;
 80008b2:	4b06      	ldr	r3, [pc, #24]	; (80008cc <updateDataGUI+0x2b4>)
 80008b4:	220b      	movs	r2, #11
 80008b6:	701a      	strb	r2, [r3, #0]
								indexes[1]--;
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <updateDataGUI+0x2b8>)
 80008ba:	785b      	ldrb	r3, [r3, #1]
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <updateDataGUI+0x2b8>)
 80008c2:	705a      	strb	r2, [r3, #1]
							}
							else	indexes[1]--;
						break;
 80008c4:	e035      	b.n	8000932 <updateDataGUI+0x31a>
 80008c6:	bf00      	nop
 80008c8:	20000108 	.word	0x20000108
 80008cc:	200000fc 	.word	0x200000fc
 80008d0:	2000010c 	.word	0x2000010c
 80008d4:	2000019c 	.word	0x2000019c
							else	indexes[1]--;
 80008d8:	4b8b      	ldr	r3, [pc, #556]	; (8000b08 <updateDataGUI+0x4f0>)
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b89      	ldr	r3, [pc, #548]	; (8000b08 <updateDataGUI+0x4f0>)
 80008e2:	705a      	strb	r2, [r3, #1]
						break;
 80008e4:	e025      	b.n	8000932 <updateDataGUI+0x31a>

						case menuSetTempExt:	//menu seteo de temperatura COLECTORES
							if(PETfilConv1.ExtTemp == 0) PETfilConv1.ExtTemp = 0;
 80008e6:	4b89      	ldr	r3, [pc, #548]	; (8000b0c <updateDataGUI+0x4f4>)
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d103      	bne.n	80008f6 <updateDataGUI+0x2de>
 80008ee:	4b87      	ldr	r3, [pc, #540]	; (8000b0c <updateDataGUI+0x4f4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
							else PETfilConv1.ExtTemp--;
						break;
 80008f4:	e01d      	b.n	8000932 <updateDataGUI+0x31a>
							else PETfilConv1.ExtTemp--;
 80008f6:	4b85      	ldr	r3, [pc, #532]	; (8000b0c <updateDataGUI+0x4f4>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	4a83      	ldr	r2, [pc, #524]	; (8000b0c <updateDataGUI+0x4f4>)
 80008fe:	6093      	str	r3, [r2, #8]
						break;
 8000900:	e017      	b.n	8000932 <updateDataGUI+0x31a>

						default:
							if(indexes[currentScreen] == 0) indexes[currentScreen] = 0;
 8000902:	4b83      	ldr	r3, [pc, #524]	; (8000b10 <updateDataGUI+0x4f8>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	461a      	mov	r2, r3
 8000908:	4b7f      	ldr	r3, [pc, #508]	; (8000b08 <updateDataGUI+0x4f0>)
 800090a:	5c9b      	ldrb	r3, [r3, r2]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d106      	bne.n	800091e <updateDataGUI+0x306>
 8000910:	4b7f      	ldr	r3, [pc, #508]	; (8000b10 <updateDataGUI+0x4f8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b7c      	ldr	r3, [pc, #496]	; (8000b08 <updateDataGUI+0x4f0>)
 8000918:	2100      	movs	r1, #0
 800091a:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]--;
					}
				break;
 800091c:	e0ec      	b.n	8000af8 <updateDataGUI+0x4e0>
							else indexes[currentScreen]--;
 800091e:	4b7c      	ldr	r3, [pc, #496]	; (8000b10 <updateDataGUI+0x4f8>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4a79      	ldr	r2, [pc, #484]	; (8000b08 <updateDataGUI+0x4f0>)
 8000924:	5cd2      	ldrb	r2, [r2, r3]
 8000926:	3a01      	subs	r2, #1
 8000928:	b2d1      	uxtb	r1, r2
 800092a:	4a77      	ldr	r2, [pc, #476]	; (8000b08 <updateDataGUI+0x4f0>)
 800092c:	54d1      	strb	r1, [r2, r3]
				break;
 800092e:	e0e3      	b.n	8000af8 <updateDataGUI+0x4e0>
						break;
 8000930:	bf00      	nop
				break;
 8000932:	e0e1      	b.n	8000af8 <updateDataGUI+0x4e0>

				case Right:
					switch(currentScreen)
 8000934:	4b76      	ldr	r3, [pc, #472]	; (8000b10 <updateDataGUI+0x4f8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0c      	cmp	r3, #12
 800093a:	f200 80dc 	bhi.w	8000af6 <updateDataGUI+0x4de>
 800093e:	a201      	add	r2, pc, #4	; (adr r2, 8000944 <updateDataGUI+0x32c>)
 8000940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000944:	08000aeb 	.word	0x08000aeb
 8000948:	08000af7 	.word	0x08000af7
 800094c:	080009bb 	.word	0x080009bb
 8000950:	080009e9 	.word	0x080009e9
 8000954:	08000a17 	.word	0x08000a17
 8000958:	08000a45 	.word	0x08000a45
 800095c:	08000a73 	.word	0x08000a73
 8000960:	08000aa1 	.word	0x08000aa1
 8000964:	08000acf 	.word	0x08000acf
 8000968:	08000af7 	.word	0x08000af7
 800096c:	08000af7 	.word	0x08000af7
 8000970:	08000979 	.word	0x08000979
 8000974:	080009a3 	.word	0x080009a3
						case workingScreen:	//pantalla de trabajo
							//NADA
						break;

						case mainMenu_part1:
							if(indexes[1] >= 3)
 8000978:	4b63      	ldr	r3, [pc, #396]	; (8000b08 <updateDataGUI+0x4f0>)
 800097a:	785b      	ldrb	r3, [r3, #1]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d909      	bls.n	8000994 <updateDataGUI+0x37c>
							{
								currentScreen = mainMenu_part2;
 8000980:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <updateDataGUI+0x4f8>)
 8000982:	220c      	movs	r2, #12
 8000984:	701a      	strb	r2, [r3, #0]
								indexes[1]++;
 8000986:	4b60      	ldr	r3, [pc, #384]	; (8000b08 <updateDataGUI+0x4f0>)
 8000988:	785b      	ldrb	r3, [r3, #1]
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b5e      	ldr	r3, [pc, #376]	; (8000b08 <updateDataGUI+0x4f0>)
 8000990:	705a      	strb	r2, [r3, #1]
							}
							else	indexes[1]++;
						break;
 8000992:	e0ad      	b.n	8000af0 <updateDataGUI+0x4d8>
							else	indexes[1]++;
 8000994:	4b5c      	ldr	r3, [pc, #368]	; (8000b08 <updateDataGUI+0x4f0>)
 8000996:	785b      	ldrb	r3, [r3, #1]
 8000998:	3301      	adds	r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	4b5a      	ldr	r3, [pc, #360]	; (8000b08 <updateDataGUI+0x4f0>)
 800099e:	705a      	strb	r2, [r3, #1]
						break;
 80009a0:	e0a6      	b.n	8000af0 <updateDataGUI+0x4d8>

						case mainMenu_part2:
							if(indexes[1] >= 6) indexes[1] == 6;
 80009a2:	4b59      	ldr	r3, [pc, #356]	; (8000b08 <updateDataGUI+0x4f0>)
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	2b05      	cmp	r3, #5
 80009a8:	f200 80a1 	bhi.w	8000aee <updateDataGUI+0x4d6>
							else	indexes[1]++;
 80009ac:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <updateDataGUI+0x4f0>)
 80009ae:	785b      	ldrb	r3, [r3, #1]
 80009b0:	3301      	adds	r3, #1
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b54      	ldr	r3, [pc, #336]	; (8000b08 <updateDataGUI+0x4f0>)
 80009b6:	705a      	strb	r2, [r3, #1]
						break;
 80009b8:	e099      	b.n	8000aee <updateDataGUI+0x4d6>

						case subMenuExtrusores:
							if(indexes[currentScreen] == (cantItemsSubMenu1-1)) indexes[currentScreen] = cantItemsSubMenu1-1;
 80009ba:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <updateDataGUI+0x4f8>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	4b51      	ldr	r3, [pc, #324]	; (8000b08 <updateDataGUI+0x4f0>)
 80009c2:	5c9b      	ldrb	r3, [r3, r2]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d106      	bne.n	80009d6 <updateDataGUI+0x3be>
 80009c8:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <updateDataGUI+0x4f8>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b4e      	ldr	r3, [pc, #312]	; (8000b08 <updateDataGUI+0x4f0>)
 80009d0:	2101      	movs	r1, #1
 80009d2:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]++;
						break;
 80009d4:	e08c      	b.n	8000af0 <updateDataGUI+0x4d8>
							else indexes[currentScreen]++;
 80009d6:	4b4e      	ldr	r3, [pc, #312]	; (8000b10 <updateDataGUI+0x4f8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <updateDataGUI+0x4f0>)
 80009dc:	5cd2      	ldrb	r2, [r2, r3]
 80009de:	3201      	adds	r2, #1
 80009e0:	b2d1      	uxtb	r1, r2
 80009e2:	4a49      	ldr	r2, [pc, #292]	; (8000b08 <updateDataGUI+0x4f0>)
 80009e4:	54d1      	strb	r1, [r2, r3]
						break;
 80009e6:	e083      	b.n	8000af0 <updateDataGUI+0x4d8>

						case subMenuColectoresPET:
							if(indexes[currentScreen] == (cantItemsSubMenu2-1)) indexes[currentScreen] = cantItemsSubMenu2-1;
 80009e8:	4b49      	ldr	r3, [pc, #292]	; (8000b10 <updateDataGUI+0x4f8>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4b46      	ldr	r3, [pc, #280]	; (8000b08 <updateDataGUI+0x4f0>)
 80009f0:	5c9b      	ldrb	r3, [r3, r2]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d106      	bne.n	8000a04 <updateDataGUI+0x3ec>
 80009f6:	4b46      	ldr	r3, [pc, #280]	; (8000b10 <updateDataGUI+0x4f8>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <updateDataGUI+0x4f0>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]++;
						break;
 8000a02:	e075      	b.n	8000af0 <updateDataGUI+0x4d8>
							else indexes[currentScreen]++;
 8000a04:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4a3f      	ldr	r2, [pc, #252]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a0a:	5cd2      	ldrb	r2, [r2, r3]
 8000a0c:	3201      	adds	r2, #1
 8000a0e:	b2d1      	uxtb	r1, r2
 8000a10:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a12:	54d1      	strb	r1, [r2, r3]
						break;
 8000a14:	e06c      	b.n	8000af0 <updateDataGUI+0x4d8>

						case subMenuColectoresFil:
							if(indexes[currentScreen] == (cantItemsSubMenu3-1)) indexes[currentScreen] = cantItemsSubMenu3-1;
 8000a16:	4b3e      	ldr	r3, [pc, #248]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b3a      	ldr	r3, [pc, #232]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a1e:	5c9b      	ldrb	r3, [r3, r2]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d106      	bne.n	8000a32 <updateDataGUI+0x41a>
 8000a24:	4b3a      	ldr	r3, [pc, #232]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]++;
						break;
 8000a30:	e05e      	b.n	8000af0 <updateDataGUI+0x4d8>
							else indexes[currentScreen]++;
 8000a32:	4b37      	ldr	r3, [pc, #220]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4a34      	ldr	r2, [pc, #208]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a38:	5cd2      	ldrb	r2, [r2, r3]
 8000a3a:	3201      	adds	r2, #1
 8000a3c:	b2d1      	uxtb	r1, r2
 8000a3e:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a40:	54d1      	strb	r1, [r2, r3]
						break;
 8000a42:	e055      	b.n	8000af0 <updateDataGUI+0x4d8>

						case subMenuAlarmas:
							if(indexes[currentScreen] == (cantItemsSubMenu4-1)) indexes[currentScreen] = cantItemsSubMenu4-1;
 8000a44:	4b32      	ldr	r3, [pc, #200]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a4c:	5c9b      	ldrb	r3, [r3, r2]
 8000a4e:	2b02      	cmp	r3, #2
 8000a50:	d106      	bne.n	8000a60 <updateDataGUI+0x448>
 8000a52:	4b2f      	ldr	r3, [pc, #188]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]++;
						break;
 8000a5e:	e047      	b.n	8000af0 <updateDataGUI+0x4d8>
							else indexes[currentScreen]++;
 8000a60:	4b2b      	ldr	r3, [pc, #172]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a66:	5cd2      	ldrb	r2, [r2, r3]
 8000a68:	3201      	adds	r2, #1
 8000a6a:	b2d1      	uxtb	r1, r2
 8000a6c:	4a26      	ldr	r2, [pc, #152]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a6e:	54d1      	strb	r1, [r2, r3]
						break;
 8000a70:	e03e      	b.n	8000af0 <updateDataGUI+0x4d8>

						case subMenuHistorial:
							if(indexes[currentScreen] == (cantItemsSubMenu5-1)) indexes[currentScreen] = cantItemsSubMenu5-1;
 8000a72:	4b27      	ldr	r3, [pc, #156]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a7a:	5c9b      	ldrb	r3, [r3, r2]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d106      	bne.n	8000a8e <updateDataGUI+0x476>
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	461a      	mov	r2, r3
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a88:	2102      	movs	r1, #2
 8000a8a:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]++;
						break;
 8000a8c:	e030      	b.n	8000af0 <updateDataGUI+0x4d8>
							else indexes[currentScreen]++;
 8000a8e:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <updateDataGUI+0x4f8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a94:	5cd2      	ldrb	r2, [r2, r3]
 8000a96:	3201      	adds	r2, #1
 8000a98:	b2d1      	uxtb	r1, r2
 8000a9a:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <updateDataGUI+0x4f0>)
 8000a9c:	54d1      	strb	r1, [r2, r3]
						break;
 8000a9e:	e027      	b.n	8000af0 <updateDataGUI+0x4d8>

						case subMenuAcercaDe_part1:
							if(indexes[currentScreen] == (cantItemsSubMenu6-1)) indexes[currentScreen] = cantItemsSubMenu6-1;
 8000aa0:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <updateDataGUI+0x4f8>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <updateDataGUI+0x4f0>)
 8000aa8:	5c9b      	ldrb	r3, [r3, r2]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d106      	bne.n	8000abc <updateDataGUI+0x4a4>
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <updateDataGUI+0x4f8>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <updateDataGUI+0x4f0>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	5499      	strb	r1, [r3, r2]
							else indexes[currentScreen]++;
						break;
 8000aba:	e019      	b.n	8000af0 <updateDataGUI+0x4d8>
							else indexes[currentScreen]++;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <updateDataGUI+0x4f8>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <updateDataGUI+0x4f0>)
 8000ac2:	5cd2      	ldrb	r2, [r2, r3]
 8000ac4:	3201      	adds	r2, #1
 8000ac6:	b2d1      	uxtb	r1, r2
 8000ac8:	4a0f      	ldr	r2, [pc, #60]	; (8000b08 <updateDataGUI+0x4f0>)
 8000aca:	54d1      	strb	r1, [r2, r3]
						break;
 8000acc:	e010      	b.n	8000af0 <updateDataGUI+0x4d8>

						case menuSetTempExt:	//menu seteo de temperatura COLECTORES
							if(PETfilConv1.ExtTemp == 250) PETfilConv1.ExtTemp = 250;
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <updateDataGUI+0x4f4>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	2bfa      	cmp	r3, #250	; 0xfa
 8000ad4:	d103      	bne.n	8000ade <updateDataGUI+0x4c6>
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <updateDataGUI+0x4f4>)
 8000ad8:	22fa      	movs	r2, #250	; 0xfa
 8000ada:	609a      	str	r2, [r3, #8]
							else PETfilConv1.ExtTemp++;	//Temp++
						break;
 8000adc:	e008      	b.n	8000af0 <updateDataGUI+0x4d8>
							else PETfilConv1.ExtTemp++;	//Temp++
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <updateDataGUI+0x4f4>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <updateDataGUI+0x4f4>)
 8000ae6:	6093      	str	r3, [r2, #8]
						break;
 8000ae8:	e002      	b.n	8000af0 <updateDataGUI+0x4d8>
						break;
 8000aea:	bf00      	nop
 8000aec:	e003      	b.n	8000af6 <updateDataGUI+0x4de>
						break;
 8000aee:	bf00      	nop
					}
				break;
 8000af0:	e001      	b.n	8000af6 <updateDataGUI+0x4de>
				break;
 8000af2:	bf00      	nop
 8000af4:	e000      	b.n	8000af8 <updateDataGUI+0x4e0>
				break;
 8000af6:	bf00      	nop
		}

//		updateLCD();
		btnPressed = NoPressed;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <updateDataGUI+0x4fc>)
 8000afa:	2203      	movs	r2, #3
 8000afc:	701a      	strb	r2, [r3, #0]
	}
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000010c 	.word	0x2000010c
 8000b0c:	2000019c 	.word	0x2000019c
 8000b10:	200000fc 	.word	0x200000fc
 8000b14:	20000108 	.word	0x20000108

08000b18 <updateLCD>:

void updateLCD(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	if(currentScreen != previousScreen)
 8000b1c:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <updateLCD+0xb0>)
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <updateLCD+0xb4>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d04b      	beq.n	8000bc0 <updateLCD+0xa8>
	{
//		previousScreen = currentScreen;

		switch(currentScreen)
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <updateLCD+0xb0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b0c      	cmp	r3, #12
 8000b2e:	d848      	bhi.n	8000bc2 <updateLCD+0xaa>
 8000b30:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <updateLCD+0x20>)
 8000b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b36:	bf00      	nop
 8000b38:	08000b6d 	.word	0x08000b6d
 8000b3c:	08000bc3 	.word	0x08000bc3
 8000b40:	08000b85 	.word	0x08000b85
 8000b44:	08000b8d 	.word	0x08000b8d
 8000b48:	08000b95 	.word	0x08000b95
 8000b4c:	08000b9d 	.word	0x08000b9d
 8000b50:	08000ba5 	.word	0x08000ba5
 8000b54:	08000bad 	.word	0x08000bad
 8000b58:	08000bb5 	.word	0x08000bb5
 8000b5c:	08000bc3 	.word	0x08000bc3
 8000b60:	08000bc3 	.word	0x08000bc3
 8000b64:	08000b75 	.word	0x08000b75
 8000b68:	08000b7d 	.word	0x08000b7d
		{
			case workingScreen: printScreen(ScreenWorking);
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <updateLCD+0xb8>)
 8000b6e:	f000 f9a1 	bl	8000eb4 <printScreen>
			break;
 8000b72:	e026      	b.n	8000bc2 <updateLCD+0xaa>

			case mainMenu_part1: printScreen(PrinMenu1);
 8000b74:	4817      	ldr	r0, [pc, #92]	; (8000bd4 <updateLCD+0xbc>)
 8000b76:	f000 f99d 	bl	8000eb4 <printScreen>
			break;
 8000b7a:	e022      	b.n	8000bc2 <updateLCD+0xaa>

			case mainMenu_part2: printScreen(PrinMenu2);
 8000b7c:	4816      	ldr	r0, [pc, #88]	; (8000bd8 <updateLCD+0xc0>)
 8000b7e:	f000 f999 	bl	8000eb4 <printScreen>
			break;
 8000b82:	e01e      	b.n	8000bc2 <updateLCD+0xaa>

			case subMenuExtrusores: printScreen(SubMenu1);
 8000b84:	4815      	ldr	r0, [pc, #84]	; (8000bdc <updateLCD+0xc4>)
 8000b86:	f000 f995 	bl	8000eb4 <printScreen>
			break;
 8000b8a:	e01a      	b.n	8000bc2 <updateLCD+0xaa>

			case subMenuColectoresPET: printScreen(SubMenu2);
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <updateLCD+0xc8>)
 8000b8e:	f000 f991 	bl	8000eb4 <printScreen>
			break;
 8000b92:	e016      	b.n	8000bc2 <updateLCD+0xaa>

			case subMenuColectoresFil: printScreen(SubMenu3);
 8000b94:	4813      	ldr	r0, [pc, #76]	; (8000be4 <updateLCD+0xcc>)
 8000b96:	f000 f98d 	bl	8000eb4 <printScreen>
			break;
 8000b9a:	e012      	b.n	8000bc2 <updateLCD+0xaa>

			case subMenuAlarmas: printScreen(SubMenu4);
 8000b9c:	4812      	ldr	r0, [pc, #72]	; (8000be8 <updateLCD+0xd0>)
 8000b9e:	f000 f989 	bl	8000eb4 <printScreen>
			break;
 8000ba2:	e00e      	b.n	8000bc2 <updateLCD+0xaa>

			case subMenuHistorial: printScreen(SubMenu5);
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <updateLCD+0xd4>)
 8000ba6:	f000 f985 	bl	8000eb4 <printScreen>
			break;
 8000baa:	e00a      	b.n	8000bc2 <updateLCD+0xaa>

			case subMenuAcercaDe_part1: printScreen(SubMenu6);
 8000bac:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <updateLCD+0xd8>)
 8000bae:	f000 f981 	bl	8000eb4 <printScreen>
			break;
 8000bb2:	e006      	b.n	8000bc2 <updateLCD+0xaa>

			case menuSetTempExt: printScreenSettingTemp(PETfilConv1);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <updateLCD+0xdc>)
 8000bb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000bba:	f000 f81d 	bl	8000bf8 <printScreenSettingTemp>
			break;
 8000bbe:	e000      	b.n	8000bc2 <updateLCD+0xaa>
		}
	}
 8000bc0:	bf00      	nop
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000fc 	.word	0x200000fc
 8000bcc:	200000fd 	.word	0x200000fd
 8000bd0:	20000028 	.word	0x20000028
 8000bd4:	20000038 	.word	0x20000038
 8000bd8:	20000048 	.word	0x20000048
 8000bdc:	20000058 	.word	0x20000058
 8000be0:	20000078 	.word	0x20000078
 8000be4:	20000088 	.word	0x20000088
 8000be8:	20000098 	.word	0x20000098
 8000bec:	200000a8 	.word	0x200000a8
 8000bf0:	200000b8 	.word	0x200000b8
 8000bf4:	2000019c 	.word	0x2000019c

08000bf8 <printScreenSettingTemp>:

void printScreenSettingTemp(PETfilConv conversorPETfil)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char aux = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	75fb      	strb	r3, [r7, #23]
	  //lcd_send_cmd (CLEAR_LCD);  // clear display
	  //HAL_Delay(1);
	clearScreen();
 8000c08:	f000 f97a 	bl	8000f00 <clearScreen>
	lcd_send_cmd(reg_lines[0]);
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <printScreenSettingTemp+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fa9a 	bl	800014c <lcd_send_cmd>
	lcd_send_string(SubMenu1_2[0]);
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <printScreenSettingTemp+0x54>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fb2f 	bl	8000280 <lcd_send_string>
	lcd_send_cmd(reg_lines[2]);
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <printScreenSettingTemp+0x50>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fa8f 	bl	800014c <lcd_send_cmd>
	aux = '0'+ conversorPETfil.ExtTemp;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	3330      	adds	r3, #48	; 0x30
 8000c34:	75fb      	strb	r3, [r7, #23]
	lcd_send_string(aux);
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fb21 	bl	8000280 <lcd_send_string>
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000068 	.word	0x20000068

08000c50 <updateCursor>:

void updateCursor(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  if(
		(previousIndexes[1] != indexes[1])||	//cambio indice en menu principal?
 8000c56:	4b50      	ldr	r3, [pc, #320]	; (8000d98 <updateCursor+0x148>)
 8000c58:	785a      	ldrb	r2, [r3, #1]
 8000c5a:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <updateCursor+0x14c>)
 8000c5c:	785b      	ldrb	r3, [r3, #1]
  if(
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d12f      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[2] != indexes[2])||	//cambio indice en sub menu 1?
 8000c62:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <updateCursor+0x148>)
 8000c64:	789a      	ldrb	r2, [r3, #2]
 8000c66:	4b4d      	ldr	r3, [pc, #308]	; (8000d9c <updateCursor+0x14c>)
 8000c68:	789b      	ldrb	r3, [r3, #2]
		(previousIndexes[1] != indexes[1])||	//cambio indice en menu principal?
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d129      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[3] != indexes[3])||	//cambio indice en sub menu 2?
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <updateCursor+0x148>)
 8000c70:	78da      	ldrb	r2, [r3, #3]
 8000c72:	4b4a      	ldr	r3, [pc, #296]	; (8000d9c <updateCursor+0x14c>)
 8000c74:	78db      	ldrb	r3, [r3, #3]
		(previousIndexes[2] != indexes[2])||	//cambio indice en sub menu 1?
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d123      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[4] != indexes[4])||	//cambio indice en sub menu 3?
 8000c7a:	4b47      	ldr	r3, [pc, #284]	; (8000d98 <updateCursor+0x148>)
 8000c7c:	791a      	ldrb	r2, [r3, #4]
 8000c7e:	4b47      	ldr	r3, [pc, #284]	; (8000d9c <updateCursor+0x14c>)
 8000c80:	791b      	ldrb	r3, [r3, #4]
		(previousIndexes[3] != indexes[3])||	//cambio indice en sub menu 2?
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d11d      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[5] != indexes[5])||	//cambio indice en sub menu 4?
 8000c86:	4b44      	ldr	r3, [pc, #272]	; (8000d98 <updateCursor+0x148>)
 8000c88:	795a      	ldrb	r2, [r3, #5]
 8000c8a:	4b44      	ldr	r3, [pc, #272]	; (8000d9c <updateCursor+0x14c>)
 8000c8c:	795b      	ldrb	r3, [r3, #5]
		(previousIndexes[4] != indexes[4])||	//cambio indice en sub menu 3?
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d117      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[6] != indexes[6])||	//cambio indice en sub menu 5?
 8000c92:	4b41      	ldr	r3, [pc, #260]	; (8000d98 <updateCursor+0x148>)
 8000c94:	799a      	ldrb	r2, [r3, #6]
 8000c96:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <updateCursor+0x14c>)
 8000c98:	799b      	ldrb	r3, [r3, #6]
		(previousIndexes[5] != indexes[5])||	//cambio indice en sub menu 4?
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d111      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[7] != indexes[7])||	//cambio indice en sub menu 6?
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <updateCursor+0x148>)
 8000ca0:	79da      	ldrb	r2, [r3, #7]
 8000ca2:	4b3e      	ldr	r3, [pc, #248]	; (8000d9c <updateCursor+0x14c>)
 8000ca4:	79db      	ldrb	r3, [r3, #7]
		(previousIndexes[6] != indexes[6])||	//cambio indice en sub menu 5?
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d10b      	bne.n	8000cc2 <updateCursor+0x72>
		(previousIndexes[8] != indexes[8] ||
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <updateCursor+0x148>)
 8000cac:	7a1a      	ldrb	r2, [r3, #8]
 8000cae:	4b3b      	ldr	r3, [pc, #236]	; (8000d9c <updateCursor+0x14c>)
 8000cb0:	7a1b      	ldrb	r3, [r3, #8]
		(previousIndexes[7] != indexes[7])||	//cambio indice en sub menu 6?
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d105      	bne.n	8000cc2 <updateCursor+0x72>
		     previousScreen != currentScreen)		//cambio indice en sub sub menu 1?
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	; (8000da0 <updateCursor+0x150>)
 8000cb8:	781a      	ldrb	r2, [r3, #0]
 8000cba:	4b3a      	ldr	r3, [pc, #232]	; (8000da4 <updateCursor+0x154>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
		(previousIndexes[8] != indexes[8] ||
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	d062      	beq.n	8000d88 <updateCursor+0x138>
	)
  {
	  previousScreen = currentScreen;
 8000cc2:	4b38      	ldr	r3, [pc, #224]	; (8000da4 <updateCursor+0x154>)
 8000cc4:	781a      	ldrb	r2, [r3, #0]
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <updateCursor+0x150>)
 8000cc8:	701a      	strb	r2, [r3, #0]
	  for(int i = 1 ; i < 9; i++) previousIndexes[i] = indexes[i];
 8000cca:	2301      	movs	r3, #1
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	e00b      	b.n	8000ce8 <updateCursor+0x98>
 8000cd0:	4a32      	ldr	r2, [pc, #200]	; (8000d9c <updateCursor+0x14c>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	7819      	ldrb	r1, [r3, #0]
 8000cd8:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <updateCursor+0x148>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b08      	cmp	r3, #8
 8000cec:	ddf0      	ble.n	8000cd0 <updateCursor+0x80>

	  clearAllCursor();
 8000cee:	f000 f8bb 	bl	8000e68 <clearAllCursor>

	switch(currentScreen)
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <updateCursor+0x154>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b0c      	cmp	r3, #12
 8000cf8:	d849      	bhi.n	8000d8e <updateCursor+0x13e>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <updateCursor+0xb0>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d8d 	.word	0x08000d8d
 8000d04:	08000d8f 	.word	0x08000d8f
 8000d08:	08000d4d 	.word	0x08000d4d
 8000d0c:	08000d59 	.word	0x08000d59
 8000d10:	08000d65 	.word	0x08000d65
 8000d14:	08000d71 	.word	0x08000d71
 8000d18:	08000d7d 	.word	0x08000d7d
 8000d1c:	08000d8d 	.word	0x08000d8d
 8000d20:	08000d8d 	.word	0x08000d8d
 8000d24:	08000d8f 	.word	0x08000d8f
 8000d28:	08000d8f 	.word	0x08000d8f
 8000d2c:	08000d35 	.word	0x08000d35
 8000d30:	08000d41 	.word	0x08000d41
	{
		case workingScreen:	//NO MUESTRA CURSOR
		break;

		case mainMenu_part1: printCursor(indexes[1]);
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <updateCursor+0x14c>)
 8000d36:	785b      	ldrb	r3, [r3, #1]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 f835 	bl	8000da8 <printCursor>
		break;
 8000d3e:	e026      	b.n	8000d8e <updateCursor+0x13e>

		case mainMenu_part2: printCursor(indexes[1]);
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <updateCursor+0x14c>)
 8000d42:	785b      	ldrb	r3, [r3, #1]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 f82f 	bl	8000da8 <printCursor>
		break;
 8000d4a:	e020      	b.n	8000d8e <updateCursor+0x13e>

		case subMenuExtrusores: printCursor(indexes[2]);
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <updateCursor+0x14c>)
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f829 	bl	8000da8 <printCursor>
		break;
 8000d56:	e01a      	b.n	8000d8e <updateCursor+0x13e>

		case subMenuColectoresPET: printCursor(indexes[3]);
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <updateCursor+0x14c>)
 8000d5a:	78db      	ldrb	r3, [r3, #3]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 f823 	bl	8000da8 <printCursor>
		break;
 8000d62:	e014      	b.n	8000d8e <updateCursor+0x13e>

		case subMenuColectoresFil: printCursor(indexes[4]);
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <updateCursor+0x14c>)
 8000d66:	791b      	ldrb	r3, [r3, #4]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f81d 	bl	8000da8 <printCursor>
		break;
 8000d6e:	e00e      	b.n	8000d8e <updateCursor+0x13e>

		case subMenuAlarmas: printCursor(indexes[5]);
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <updateCursor+0x14c>)
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f000 f817 	bl	8000da8 <printCursor>
		break;
 8000d7a:	e008      	b.n	8000d8e <updateCursor+0x13e>

		case subMenuHistorial: printCursor(indexes[6]);
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <updateCursor+0x14c>)
 8000d7e:	799b      	ldrb	r3, [r3, #6]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f811 	bl	8000da8 <printCursor>
		break;
 8000d86:	e002      	b.n	8000d8e <updateCursor+0x13e>
		break;

		case menuSetTempExt:
		break;
	}
  }
 8000d88:	bf00      	nop
 8000d8a:	e000      	b.n	8000d8e <updateCursor+0x13e>
		break;
 8000d8c:	bf00      	nop
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	200000c8 	.word	0x200000c8
 8000d9c:	2000010c 	.word	0x2000010c
 8000da0:	200000fd 	.word	0x200000fd
 8000da4:	200000fc 	.word	0x200000fc

08000da8 <printCursor>:

void printCursor(uint8_t index)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	switch(index)
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	2b06      	cmp	r3, #6
 8000db6:	d850      	bhi.n	8000e5a <printCursor+0xb2>
 8000db8:	a201      	add	r2, pc, #4	; (adr r2, 8000dc0 <printCursor+0x18>)
 8000dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbe:	bf00      	nop
 8000dc0:	08000ddd 	.word	0x08000ddd
 8000dc4:	08000def 	.word	0x08000def
 8000dc8:	08000e01 	.word	0x08000e01
 8000dcc:	08000e13 	.word	0x08000e13
 8000dd0:	08000e25 	.word	0x08000e25
 8000dd4:	08000e37 	.word	0x08000e37
 8000dd8:	08000e49 	.word	0x08000e49
	{
		case 0:
			lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8000ddc:	2093      	movs	r0, #147	; 0x93
 8000dde:	f7ff f9b5 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <printCursor+0xbc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fa4a 	bl	8000280 <lcd_send_string>
		break;
 8000dec:	e035      	b.n	8000e5a <printCursor+0xb2>

		case 1:
			lcd_send_cmd(C_LINE2_LCD);	//primer linea
 8000dee:	20d3      	movs	r0, #211	; 0xd3
 8000df0:	f7ff f9ac 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <printCursor+0xbc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff fa41 	bl	8000280 <lcd_send_string>
		break;
 8000dfe:	e02c      	b.n	8000e5a <printCursor+0xb2>

		case 2:
			lcd_send_cmd(C_LINE3_LCD);	//primer linea
 8000e00:	20a7      	movs	r0, #167	; 0xa7
 8000e02:	f7ff f9a3 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <printCursor+0xbc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fa38 	bl	8000280 <lcd_send_string>
		break;
 8000e10:	e023      	b.n	8000e5a <printCursor+0xb2>

		case 3:
			lcd_send_cmd(C_LINE4_LCD);	//primer linea
 8000e12:	20e7      	movs	r0, #231	; 0xe7
 8000e14:	f7ff f99a 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000e18:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <printCursor+0xbc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fa2f 	bl	8000280 <lcd_send_string>
		break;
 8000e22:	e01a      	b.n	8000e5a <printCursor+0xb2>

		case 4:
			lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8000e24:	2093      	movs	r0, #147	; 0x93
 8000e26:	f7ff f991 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <printCursor+0xbc>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fa26 	bl	8000280 <lcd_send_string>
			break;
 8000e34:	e011      	b.n	8000e5a <printCursor+0xb2>

		case 5:
			lcd_send_cmd(C_LINE2_LCD);	//primer linea
 8000e36:	20d3      	movs	r0, #211	; 0xd3
 8000e38:	f7ff f988 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <printCursor+0xbc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fa1d 	bl	8000280 <lcd_send_string>
			break;
 8000e46:	e008      	b.n	8000e5a <printCursor+0xb2>

		case 6:
			lcd_send_cmd(C_LINE3_LCD);	//primer linea
 8000e48:	20a7      	movs	r0, #167	; 0xa7
 8000e4a:	f7ff f97f 	bl	800014c <lcd_send_cmd>
			lcd_send_string(CURSOR[0]);
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <printCursor+0xbc>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fa14 	bl	8000280 <lcd_send_string>
			break;
 8000e58:	bf00      	nop
	}
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000010 	.word	0x20000010

08000e68 <clearAllCursor>:

void clearAllCursor(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	lcd_send_cmd(C_LINE1_LCD);	//primer linea
 8000e6c:	2093      	movs	r0, #147	; 0x93
 8000e6e:	f7ff f96d 	bl	800014c <lcd_send_cmd>
	lcd_send_string(CHAR_VACIO[0]);
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <clearAllCursor+0x48>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fa02 	bl	8000280 <lcd_send_string>
	lcd_send_cmd(C_LINE2_LCD);	//primer linea
 8000e7c:	20d3      	movs	r0, #211	; 0xd3
 8000e7e:	f7ff f965 	bl	800014c <lcd_send_cmd>
	lcd_send_string(CHAR_VACIO[0]);
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <clearAllCursor+0x48>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f9fa 	bl	8000280 <lcd_send_string>
	lcd_send_cmd(C_LINE3_LCD);	//primer linea
 8000e8c:	20a7      	movs	r0, #167	; 0xa7
 8000e8e:	f7ff f95d 	bl	800014c <lcd_send_cmd>
	lcd_send_string(CHAR_VACIO[0]);
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <clearAllCursor+0x48>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff f9f2 	bl	8000280 <lcd_send_string>
	lcd_send_cmd(C_LINE4_LCD);	//primer linea
 8000e9c:	20e7      	movs	r0, #231	; 0xe7
 8000e9e:	f7ff f955 	bl	800014c <lcd_send_cmd>
	lcd_send_string(CHAR_VACIO[0]);
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <clearAllCursor+0x48>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff f9ea 	bl	8000280 <lcd_send_string>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000014 	.word	0x20000014

08000eb4 <printScreen>:

void printScreen(const char *screen[])
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	  //lcd_send_cmd (CLEAR_LCD);  // clear display
	  //HAL_Delay(1);
	clearScreen();
 8000ebc:	f000 f820 	bl	8000f00 <clearScreen>
	  for(int i = 0 ; i < LINES ; i++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	e012      	b.n	8000eec <printScreen+0x38>
	  {
		  lcd_send_cmd(reg_lines[i]);
 8000ec6:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <printScreen+0x48>)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f93b 	bl	800014c <lcd_send_cmd>
		  lcd_send_string(screen[i]);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff f9cd 	bl	8000280 <lcd_send_string>
	  for(int i = 0 ; i < LINES ; i++)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	dde9      	ble.n	8000ec6 <printScreen+0x12>
	  }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000000 	.word	0x20000000

08000f00 <clearScreen>:

void clearScreen(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	  lcd_send_cmd (CLEAR_LCD);  // clear display
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff f921 	bl	800014c <lcd_send_cmd>
	  HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	; 0x64
 8000f0c:	f000 f9d8 	bl	80012c0 <HAL_Delay>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_MspInit+0x60>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_MspInit+0x60>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000

08000f84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <HAL_ADC_MspInit+0xcc>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d151      	bne.n	8001048 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_ADC_MspInit+0xd0>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_ADC_MspInit+0xd0>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b28      	ldr	r3, [pc, #160]	; (8001054 <HAL_ADC_MspInit+0xd0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_ADC_MspInit+0xd0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_ADC_MspInit+0xd0>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_ADC_MspInit+0xd0>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Thermistor_Pin;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Thermistor_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481d      	ldr	r0, [pc, #116]	; (8001058 <HAL_ADC_MspInit+0xd4>)
 8000fe4:	f000 feee 	bl	8001dc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xdc>)
 8000fec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff4:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8001002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001006:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_ADC_MspInit+0xd8>)
 800100a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8001012:	2220      	movs	r2, #32
 8001014:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800101c:	480f      	ldr	r0, [pc, #60]	; (800105c <HAL_ADC_MspInit+0xd8>)
 800101e:	f000 fd71 	bl	8001b04 <HAL_DMA_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001028:	f7ff ff74 	bl	8000f14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8001030:	621a      	str	r2, [r3, #32]
 8001032:	4a0a      	ldr	r2, [pc, #40]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2012      	movs	r0, #18
 800103e:	f000 fd2a 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001042:	2012      	movs	r0, #18
 8001044:	f000 fd43 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001048:	bf00      	nop
 800104a:	3720      	adds	r7, #32
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40012400 	.word	0x40012400
 8001054:	40021000 	.word	0x40021000
 8001058:	40010800 	.word	0x40010800
 800105c:	200001a8 	.word	0x200001a8
 8001060:	40020008 	.word	0x40020008

08001064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1d      	ldr	r2, [pc, #116]	; (80010f4 <HAL_I2C_MspInit+0x90>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d132      	bne.n	80010ea <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001084:	4b1c      	ldr	r3, [pc, #112]	; (80010f8 <HAL_I2C_MspInit+0x94>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <HAL_I2C_MspInit+0x94>)
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_I2C_MspInit+0x94>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800109c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a2:	2312      	movs	r3, #18
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	4619      	mov	r1, r3
 80010b0:	4812      	ldr	r0, [pc, #72]	; (80010fc <HAL_I2C_MspInit+0x98>)
 80010b2:	f000 fe87 	bl	8001dc4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_I2C_MspInit+0x9c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
 80010cc:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <HAL_I2C_MspInit+0x9c>)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_I2C_MspInit+0x94>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0x94>)
 80010d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_I2C_MspInit+0x94>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010c00 	.word	0x40010c00
 8001100:	40010000 	.word	0x40010000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	bc80      	pop	{r7}
 800112c:	4770      	bx	lr

0800112e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114a:	f000 f89d 	bl	8001288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Channel1_IRQHandler+0x10>)
 800115a:	f000 fd2d 	bl	8001bb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200001a8 	.word	0x200001a8

08001168 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <ADC1_2_IRQHandler+0x10>)
 800116e:	f000 f9a3 	bl	80014b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000016c 	.word	0x2000016c

0800117c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001180:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001184:	f000 ffa2 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}

0800118c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001190:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001194:	f000 ff9a 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001198:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800119c:	f000 ff96 	bl	80020cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b2:	490d      	ldr	r1, [pc, #52]	; (80011e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b4:	4a0d      	ldr	r2, [pc, #52]	; (80011ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011c8:	4c0a      	ldr	r4, [pc, #40]	; (80011f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011d6:	f7ff ffe5 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f002 f895 	bl	8003308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011de:	f7ff f865 	bl	80002ac <main>
  bx lr
 80011e2:	4770      	bx	lr
  ldr r0, =_sdata
 80011e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e8:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80011ec:	080035f0 	.word	0x080035f0
  ldr r2, =_sbss
 80011f0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80011f4:	200001f0 	.word	0x200001f0

080011f8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f8:	e7fe      	b.n	80011f8 <CAN1_RX1_IRQHandler>
	...

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_Init+0x28>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_Init+0x28>)
 8001206:	f043 0310 	orr.w	r3, r3, #16
 800120a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800120c:	2003      	movs	r0, #3
 800120e:	f000 fc37 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001212:	2000      	movs	r0, #0
 8001214:	f000 f808 	bl	8001228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001218:	f7ff fe82 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001230:	4b12      	ldr	r3, [pc, #72]	; (800127c <HAL_InitTick+0x54>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x58>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001242:	fbb2 f3f3 	udiv	r3, r2, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f000 fc4f 	bl	8001aea <HAL_SYSTICK_Config>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e00e      	b.n	8001274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b0f      	cmp	r3, #15
 800125a:	d80a      	bhi.n	8001272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800125c:	2200      	movs	r2, #0
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001264:	f000 fc17 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001268:	4a06      	ldr	r2, [pc, #24]	; (8001284 <HAL_InitTick+0x5c>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e000      	b.n	8001274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000d4 	.word	0x200000d4
 8001280:	200000dc 	.word	0x200000dc
 8001284:	200000d8 	.word	0x200000d8

08001288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <HAL_IncTick+0x1c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x20>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4413      	add	r3, r2
 8001298:	4a03      	ldr	r2, [pc, #12]	; (80012a8 <HAL_IncTick+0x20>)
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	200000dc 	.word	0x200000dc
 80012a8:	200001ec 	.word	0x200001ec

080012ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return uwTick;
 80012b0:	4b02      	ldr	r3, [pc, #8]	; (80012bc <HAL_GetTick+0x10>)
 80012b2:	681b      	ldr	r3, [r3, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	200001ec 	.word	0x200001ec

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff fff0 	bl	80012ac <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffe0 	bl	80012ac <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000dc 	.word	0x200000dc

08001308 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0be      	b.n	80014a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fe1c 	bl	8000f84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fa81 	bl	8001854 <ADC_ConversionStop_Disable>
 8001352:	4603      	mov	r3, r0
 8001354:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135a:	f003 0310 	and.w	r3, r3, #16
 800135e:	2b00      	cmp	r3, #0
 8001360:	f040 8099 	bne.w	8001496 <HAL_ADC_Init+0x18e>
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f040 8095 	bne.w	8001496 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001374:	f023 0302 	bic.w	r3, r3, #2
 8001378:	f043 0202 	orr.w	r2, r3, #2
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001388:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7b1b      	ldrb	r3, [r3, #12]
 800138e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001390:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4313      	orrs	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_Init+0xa2>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <HAL_ADC_Init+0xa8>
 80013aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ae:	e000      	b.n	80013b2 <HAL_ADC_Init+0xaa>
 80013b0:	2300      	movs	r3, #0
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7d1b      	ldrb	r3, [r3, #20]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d119      	bne.n	80013f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7b1b      	ldrb	r3, [r3, #12]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	035a      	lsls	r2, r3, #13
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e00b      	b.n	80013f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e0:	f043 0220 	orr.w	r2, r3, #32
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f043 0201 	orr.w	r2, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	430a      	orrs	r2, r1
 8001406:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_ADC_Init+0x1a8>)
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6812      	ldr	r2, [r2, #0]
 8001416:	68b9      	ldr	r1, [r7, #8]
 8001418:	430b      	orrs	r3, r1
 800141a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001424:	d003      	beq.n	800142e <HAL_ADC_Init+0x126>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d104      	bne.n	8001438 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	3b01      	subs	r3, #1
 8001434:	051b      	lsls	r3, r3, #20
 8001436:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	430a      	orrs	r2, r1
 800144a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <HAL_ADC_Init+0x1ac>)
 8001454:	4013      	ands	r3, r2
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	429a      	cmp	r2, r3
 800145a:	d10b      	bne.n	8001474 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f023 0303 	bic.w	r3, r3, #3
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001472:	e018      	b.n	80014a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f023 0312 	bic.w	r3, r3, #18
 800147c:	f043 0210 	orr.w	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001494:	e007      	b.n	80014a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	f043 0210 	orr.w	r2, r3, #16
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	ffe1f7fd 	.word	0xffe1f7fd
 80014b4:	ff1f0efe 	.word	0xff1f0efe

080014b8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0320 	and.w	r3, r3, #32
 80014ca:	2b20      	cmp	r3, #32
 80014cc:	d140      	bne.n	8001550 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d139      	bne.n	8001550 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80014fe:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001502:	d11d      	bne.n	8001540 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001508:	2b00      	cmp	r3, #0
 800150a:	d119      	bne.n	8001540 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 0220 	bic.w	r2, r2, #32
 800151a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d105      	bne.n	8001540 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f043 0201 	orr.w	r2, r3, #1
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f87c 	bl	800163e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f06f 0212 	mvn.w	r2, #18
 800154e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800155a:	2b80      	cmp	r3, #128	; 0x80
 800155c:	d14f      	bne.n	80015fe <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b04      	cmp	r3, #4
 800156a:	d148      	bne.n	80015fe <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d105      	bne.n	8001584 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800158e:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8001592:	d012      	beq.n	80015ba <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d125      	bne.n	80015ee <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015b0:	d11d      	bne.n	80015ee <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d119      	bne.n	80015ee <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015c8:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d105      	bne.n	80015ee <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f971 	bl	80018d6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 020c 	mvn.w	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d114      	bne.n	8001636 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10d      	bne.n	8001636 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f812 	bl	8001650 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0201 	mvn.w	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800167c:	2b01      	cmp	r3, #1
 800167e:	d101      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x20>
 8001680:	2302      	movs	r3, #2
 8001682:	e0dc      	b.n	800183e <HAL_ADC_ConfigChannel+0x1da>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b06      	cmp	r3, #6
 8001692:	d81c      	bhi.n	80016ce <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	3b05      	subs	r3, #5
 80016a6:	221f      	movs	r2, #31
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	4019      	ands	r1, r3
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	6818      	ldr	r0, [r3, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	3b05      	subs	r3, #5
 80016c0:	fa00 f203 	lsl.w	r2, r0, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	635a      	str	r2, [r3, #52]	; 0x34
 80016cc:	e03c      	b.n	8001748 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b0c      	cmp	r3, #12
 80016d4:	d81c      	bhi.n	8001710 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685a      	ldr	r2, [r3, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	3b23      	subs	r3, #35	; 0x23
 80016e8:	221f      	movs	r2, #31
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4019      	ands	r1, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	3b23      	subs	r3, #35	; 0x23
 8001702:	fa00 f203 	lsl.w	r2, r0, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	430a      	orrs	r2, r1
 800170c:	631a      	str	r2, [r3, #48]	; 0x30
 800170e:	e01b      	b.n	8001748 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b41      	subs	r3, #65	; 0x41
 8001722:	221f      	movs	r2, #31
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	4019      	ands	r1, r3
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	6818      	ldr	r0, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	3b41      	subs	r3, #65	; 0x41
 800173c:	fa00 f203 	lsl.w	r2, r0, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b09      	cmp	r3, #9
 800174e:	d91c      	bls.n	800178a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68d9      	ldr	r1, [r3, #12]
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	3b1e      	subs	r3, #30
 8001762:	2207      	movs	r2, #7
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	4019      	ands	r1, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	6898      	ldr	r0, [r3, #8]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4613      	mov	r3, r2
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4413      	add	r3, r2
 800177a:	3b1e      	subs	r3, #30
 800177c:	fa00 f203 	lsl.w	r2, r0, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	430a      	orrs	r2, r1
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	e019      	b.n	80017be <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	6919      	ldr	r1, [r3, #16]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	2207      	movs	r2, #7
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	4019      	ands	r1, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	6898      	ldr	r0, [r3, #8]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80017ca:	2b11      	cmp	r3, #17
 80017cc:	d132      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_ADC_ConfigChannel+0x1e4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d125      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d126      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017f4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d11a      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_ADC_ConfigChannel+0x1e8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <HAL_ADC_ConfigChannel+0x1ec>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9a      	lsrs	r2, r3, #18
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001814:	e002      	b.n	800181c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	3b01      	subs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f9      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x1b2>
 8001822:	e007      	b.n	8001834 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	f043 0220 	orr.w	r2, r3, #32
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800183c:	7bfb      	ldrb	r3, [r7, #15]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40012400 	.word	0x40012400
 800184c:	200000d4 	.word	0x200000d4
 8001850:	431bde83 	.word	0x431bde83

08001854 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d12e      	bne.n	80018cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f022 0201 	bic.w	r2, r2, #1
 800187c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800187e:	f7ff fd15 	bl	80012ac <HAL_GetTick>
 8001882:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001884:	e01b      	b.n	80018be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001886:	f7ff fd11 	bl	80012ac <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d914      	bls.n	80018be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10d      	bne.n	80018be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	f043 0210 	orr.w	r2, r3, #16
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e007      	b.n	80018ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d0dc      	beq.n	8001886 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001904:	4013      	ands	r3, r2
 8001906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001910:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800191a:	4a04      	ldr	r2, [pc, #16]	; (800192c <__NVIC_SetPriorityGrouping+0x44>)
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	60d3      	str	r3, [r2, #12]
}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <__NVIC_GetPriorityGrouping+0x18>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	0a1b      	lsrs	r3, r3, #8
 800193a:	f003 0307 	and.w	r3, r3, #7
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	2b00      	cmp	r3, #0
 800195c:	db0b      	blt.n	8001976 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	f003 021f 	and.w	r2, r3, #31
 8001964:	4906      	ldr	r1, [pc, #24]	; (8001980 <__NVIC_EnableIRQ+0x34>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	2001      	movs	r0, #1
 800196e:	fa00 f202 	lsl.w	r2, r0, r2
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	e000e100 	.word	0xe000e100

08001984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	6039      	str	r1, [r7, #0]
 800198e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	db0a      	blt.n	80019ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	490c      	ldr	r1, [pc, #48]	; (80019d0 <__NVIC_SetPriority+0x4c>)
 800199e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	440b      	add	r3, r1
 80019a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019ac:	e00a      	b.n	80019c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4908      	ldr	r1, [pc, #32]	; (80019d4 <__NVIC_SetPriority+0x50>)
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	3b04      	subs	r3, #4
 80019bc:	0112      	lsls	r2, r2, #4
 80019be:	b2d2      	uxtb	r2, r2
 80019c0:	440b      	add	r3, r1
 80019c2:	761a      	strb	r2, [r3, #24]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	e000e100 	.word	0xe000e100
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	; 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	f1c3 0307 	rsb	r3, r3, #7
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	bf28      	it	cs
 80019f6:	2304      	movcs	r3, #4
 80019f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	3304      	adds	r3, #4
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d902      	bls.n	8001a08 <NVIC_EncodePriority+0x30>
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3b03      	subs	r3, #3
 8001a06:	e000      	b.n	8001a0a <NVIC_EncodePriority+0x32>
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43da      	mvns	r2, r3
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2a:	43d9      	mvns	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	4313      	orrs	r3, r2
         );
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3724      	adds	r7, #36	; 0x24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a60:	f7ff ff90 	bl	8001984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff2d 	bl	80018e8 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff42 	bl	8001930 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff90 	bl	80019d8 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5f 	bl	8001984 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff35 	bl	800194c <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e043      	b.n	8001ba2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_DMA_Init+0xa8>)
 8001b22:	4413      	add	r3, r2
 8001b24:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_DMA_Init+0xac>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	009a      	lsls	r2, r3, #2
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_DMA_Init+0xb0>)
 8001b36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001b52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	bffdfff8 	.word	0xbffdfff8
 8001bb0:	cccccccd 	.word	0xcccccccd
 8001bb4:	40020000 	.word	0x40020000

08001bb8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d04f      	beq.n	8001c80 <HAL_DMA_IRQHandler+0xc8>
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d04a      	beq.n	8001c80 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0204 	bic.w	r2, r2, #4
 8001c06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a66      	ldr	r2, [pc, #408]	; (8001da8 <HAL_DMA_IRQHandler+0x1f0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d029      	beq.n	8001c66 <HAL_DMA_IRQHandler+0xae>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a65      	ldr	r2, [pc, #404]	; (8001dac <HAL_DMA_IRQHandler+0x1f4>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d022      	beq.n	8001c62 <HAL_DMA_IRQHandler+0xaa>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a63      	ldr	r2, [pc, #396]	; (8001db0 <HAL_DMA_IRQHandler+0x1f8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d01a      	beq.n	8001c5c <HAL_DMA_IRQHandler+0xa4>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a62      	ldr	r2, [pc, #392]	; (8001db4 <HAL_DMA_IRQHandler+0x1fc>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d012      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x9e>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a60      	ldr	r2, [pc, #384]	; (8001db8 <HAL_DMA_IRQHandler+0x200>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00a      	beq.n	8001c50 <HAL_DMA_IRQHandler+0x98>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5f      	ldr	r2, [pc, #380]	; (8001dbc <HAL_DMA_IRQHandler+0x204>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d102      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x92>
 8001c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c48:	e00e      	b.n	8001c68 <HAL_DMA_IRQHandler+0xb0>
 8001c4a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c4e:	e00b      	b.n	8001c68 <HAL_DMA_IRQHandler+0xb0>
 8001c50:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c54:	e008      	b.n	8001c68 <HAL_DMA_IRQHandler+0xb0>
 8001c56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c5a:	e005      	b.n	8001c68 <HAL_DMA_IRQHandler+0xb0>
 8001c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c60:	e002      	b.n	8001c68 <HAL_DMA_IRQHandler+0xb0>
 8001c62:	2340      	movs	r3, #64	; 0x40
 8001c64:	e000      	b.n	8001c68 <HAL_DMA_IRQHandler+0xb0>
 8001c66:	2304      	movs	r3, #4
 8001c68:	4a55      	ldr	r2, [pc, #340]	; (8001dc0 <HAL_DMA_IRQHandler+0x208>)
 8001c6a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 8094 	beq.w	8001d9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c7e:	e08e      	b.n	8001d9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2202      	movs	r2, #2
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d056      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x186>
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d051      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 020a 	bic.w	r2, r2, #10
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a38      	ldr	r2, [pc, #224]	; (8001da8 <HAL_DMA_IRQHandler+0x1f0>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d029      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x166>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a37      	ldr	r2, [pc, #220]	; (8001dac <HAL_DMA_IRQHandler+0x1f4>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d022      	beq.n	8001d1a <HAL_DMA_IRQHandler+0x162>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a35      	ldr	r2, [pc, #212]	; (8001db0 <HAL_DMA_IRQHandler+0x1f8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01a      	beq.n	8001d14 <HAL_DMA_IRQHandler+0x15c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a34      	ldr	r2, [pc, #208]	; (8001db4 <HAL_DMA_IRQHandler+0x1fc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d012      	beq.n	8001d0e <HAL_DMA_IRQHandler+0x156>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <HAL_DMA_IRQHandler+0x200>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00a      	beq.n	8001d08 <HAL_DMA_IRQHandler+0x150>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a31      	ldr	r2, [pc, #196]	; (8001dbc <HAL_DMA_IRQHandler+0x204>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d102      	bne.n	8001d02 <HAL_DMA_IRQHandler+0x14a>
 8001cfc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d00:	e00e      	b.n	8001d20 <HAL_DMA_IRQHandler+0x168>
 8001d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d06:	e00b      	b.n	8001d20 <HAL_DMA_IRQHandler+0x168>
 8001d08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d0c:	e008      	b.n	8001d20 <HAL_DMA_IRQHandler+0x168>
 8001d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d12:	e005      	b.n	8001d20 <HAL_DMA_IRQHandler+0x168>
 8001d14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d18:	e002      	b.n	8001d20 <HAL_DMA_IRQHandler+0x168>
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e000      	b.n	8001d20 <HAL_DMA_IRQHandler+0x168>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_DMA_IRQHandler+0x208>)
 8001d22:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d034      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d3c:	e02f      	b.n	8001d9e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2208      	movs	r2, #8
 8001d44:	409a      	lsls	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d028      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x1e8>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d023      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020e 	bic.w	r2, r2, #14
 8001d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d004      	beq.n	8001da0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
    }
  }
  return;
 8001d9e:	bf00      	nop
 8001da0:	bf00      	nop
}
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40020008 	.word	0x40020008
 8001dac:	4002001c 	.word	0x4002001c
 8001db0:	40020030 	.word	0x40020030
 8001db4:	40020044 	.word	0x40020044
 8001db8:	40020058 	.word	0x40020058
 8001dbc:	4002006c 	.word	0x4002006c
 8001dc0:	40020000 	.word	0x40020000

08001dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b08b      	sub	sp, #44	; 0x2c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd6:	e169      	b.n	80020ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dd8:	2201      	movs	r2, #1
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 8158 	bne.w	80020a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	4a9a      	ldr	r2, [pc, #616]	; (8002064 <HAL_GPIO_Init+0x2a0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d05e      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e00:	4a98      	ldr	r2, [pc, #608]	; (8002064 <HAL_GPIO_Init+0x2a0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d875      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e06:	4a98      	ldr	r2, [pc, #608]	; (8002068 <HAL_GPIO_Init+0x2a4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d058      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e0c:	4a96      	ldr	r2, [pc, #600]	; (8002068 <HAL_GPIO_Init+0x2a4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d86f      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e12:	4a96      	ldr	r2, [pc, #600]	; (800206c <HAL_GPIO_Init+0x2a8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d052      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e18:	4a94      	ldr	r2, [pc, #592]	; (800206c <HAL_GPIO_Init+0x2a8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d869      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e1e:	4a94      	ldr	r2, [pc, #592]	; (8002070 <HAL_GPIO_Init+0x2ac>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d04c      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e24:	4a92      	ldr	r2, [pc, #584]	; (8002070 <HAL_GPIO_Init+0x2ac>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d863      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a92      	ldr	r2, [pc, #584]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d046      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
 8001e30:	4a90      	ldr	r2, [pc, #576]	; (8002074 <HAL_GPIO_Init+0x2b0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d85d      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e36:	2b12      	cmp	r3, #18
 8001e38:	d82a      	bhi.n	8001e90 <HAL_GPIO_Init+0xcc>
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d859      	bhi.n	8001ef2 <HAL_GPIO_Init+0x12e>
 8001e3e:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <HAL_GPIO_Init+0x80>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001ebf 	.word	0x08001ebf
 8001e48:	08001e99 	.word	0x08001e99
 8001e4c:	08001eab 	.word	0x08001eab
 8001e50:	08001eed 	.word	0x08001eed
 8001e54:	08001ef3 	.word	0x08001ef3
 8001e58:	08001ef3 	.word	0x08001ef3
 8001e5c:	08001ef3 	.word	0x08001ef3
 8001e60:	08001ef3 	.word	0x08001ef3
 8001e64:	08001ef3 	.word	0x08001ef3
 8001e68:	08001ef3 	.word	0x08001ef3
 8001e6c:	08001ef3 	.word	0x08001ef3
 8001e70:	08001ef3 	.word	0x08001ef3
 8001e74:	08001ef3 	.word	0x08001ef3
 8001e78:	08001ef3 	.word	0x08001ef3
 8001e7c:	08001ef3 	.word	0x08001ef3
 8001e80:	08001ef3 	.word	0x08001ef3
 8001e84:	08001ef3 	.word	0x08001ef3
 8001e88:	08001ea1 	.word	0x08001ea1
 8001e8c:	08001eb5 	.word	0x08001eb5
 8001e90:	4a79      	ldr	r2, [pc, #484]	; (8002078 <HAL_GPIO_Init+0x2b4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e96:	e02c      	b.n	8001ef2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	623b      	str	r3, [r7, #32]
          break;
 8001e9e:	e029      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	623b      	str	r3, [r7, #32]
          break;
 8001ea8:	e024      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	623b      	str	r3, [r7, #32]
          break;
 8001eb2:	e01f      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	623b      	str	r3, [r7, #32]
          break;
 8001ebc:	e01a      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	623b      	str	r3, [r7, #32]
          break;
 8001eca:	e013      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d105      	bne.n	8001ee0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed4:	2308      	movs	r3, #8
 8001ed6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	611a      	str	r2, [r3, #16]
          break;
 8001ede:	e009      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	615a      	str	r2, [r3, #20]
          break;
 8001eea:	e003      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
          break;
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x130>
          break;
 8001ef2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	2bff      	cmp	r3, #255	; 0xff
 8001ef8:	d801      	bhi.n	8001efe <HAL_GPIO_Init+0x13a>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	e001      	b.n	8001f02 <HAL_GPIO_Init+0x13e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3304      	adds	r3, #4
 8001f02:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2bff      	cmp	r3, #255	; 0xff
 8001f08:	d802      	bhi.n	8001f10 <HAL_GPIO_Init+0x14c>
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_GPIO_Init+0x152>
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3b08      	subs	r3, #8
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	401a      	ands	r2, r3
 8001f28:	6a39      	ldr	r1, [r7, #32]
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80b1 	beq.w	80020a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f44:	4b4d      	ldr	r3, [pc, #308]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a4c      	ldr	r2, [pc, #304]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b4a      	ldr	r3, [pc, #296]	; (800207c <HAL_GPIO_Init+0x2b8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f5c:	4a48      	ldr	r2, [pc, #288]	; (8002080 <HAL_GPIO_Init+0x2bc>)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f68:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a40      	ldr	r2, [pc, #256]	; (8002084 <HAL_GPIO_Init+0x2c0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_GPIO_Init+0x1ec>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a3f      	ldr	r2, [pc, #252]	; (8002088 <HAL_GPIO_Init+0x2c4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_Init+0x1e8>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a3e      	ldr	r2, [pc, #248]	; (800208c <HAL_GPIO_Init+0x2c8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e4>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a3d      	ldr	r2, [pc, #244]	; (8002090 <HAL_GPIO_Init+0x2cc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_Init+0x1e0>
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e006      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	e004      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e002      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_GPIO_Init+0x1ee>
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb4:	f002 0203 	and.w	r2, r2, #3
 8001fb8:	0092      	lsls	r2, r2, #2
 8001fba:	4093      	lsls	r3, r2
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc2:	492f      	ldr	r1, [pc, #188]	; (8002080 <HAL_GPIO_Init+0x2bc>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fdc:	4b2d      	ldr	r3, [pc, #180]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	492c      	ldr	r1, [pc, #176]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	600b      	str	r3, [r1, #0]
 8001fe8:	e006      	b.n	8001ff8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	4928      	ldr	r1, [pc, #160]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d006      	beq.n	8002012 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	4922      	ldr	r1, [pc, #136]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e006      	b.n	8002020 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	43db      	mvns	r3, r3
 800201a:	491e      	ldr	r1, [pc, #120]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 800201c:	4013      	ands	r3, r2
 800201e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	4918      	ldr	r1, [pc, #96]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	4313      	orrs	r3, r2
 8002036:	608b      	str	r3, [r1, #8]
 8002038:	e006      	b.n	8002048 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	43db      	mvns	r3, r3
 8002042:	4914      	ldr	r1, [pc, #80]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8002044:	4013      	ands	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d021      	beq.n	8002098 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	490e      	ldr	r1, [pc, #56]	; (8002094 <HAL_GPIO_Init+0x2d0>)
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	60cb      	str	r3, [r1, #12]
 8002060:	e021      	b.n	80020a6 <HAL_GPIO_Init+0x2e2>
 8002062:	bf00      	nop
 8002064:	10320000 	.word	0x10320000
 8002068:	10310000 	.word	0x10310000
 800206c:	10220000 	.word	0x10220000
 8002070:	10210000 	.word	0x10210000
 8002074:	10120000 	.word	0x10120000
 8002078:	10110000 	.word	0x10110000
 800207c:	40021000 	.word	0x40021000
 8002080:	40010000 	.word	0x40010000
 8002084:	40010800 	.word	0x40010800
 8002088:	40010c00 	.word	0x40010c00
 800208c:	40011000 	.word	0x40011000
 8002090:	40011400 	.word	0x40011400
 8002094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_GPIO_Init+0x304>)
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	43db      	mvns	r3, r3
 80020a0:	4909      	ldr	r1, [pc, #36]	; (80020c8 <HAL_GPIO_Init+0x304>)
 80020a2:	4013      	ands	r3, r2
 80020a4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	3301      	adds	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f47f ae8e 	bne.w	8001dd8 <HAL_GPIO_Init+0x14>
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	372c      	adds	r7, #44	; 0x2c
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr
 80020c8:	40010400 	.word	0x40010400

080020cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4013      	ands	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020e4:	88fb      	ldrh	r3, [r7, #6]
 80020e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e8:	88fb      	ldrh	r3, [r7, #6]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe fa54 	bl	8000598 <HAL_GPIO_EXTI_Callback>
  }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e12b      	b.n	8002366 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe ff9e 	bl	8001064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0201 	bic.w	r2, r2, #1
 800213e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800214e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002160:	f000 ffea 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8002164:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	4a81      	ldr	r2, [pc, #516]	; (8002370 <HAL_I2C_Init+0x274>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d807      	bhi.n	8002180 <HAL_I2C_Init+0x84>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4a80      	ldr	r2, [pc, #512]	; (8002374 <HAL_I2C_Init+0x278>)
 8002174:	4293      	cmp	r3, r2
 8002176:	bf94      	ite	ls
 8002178:	2301      	movls	r3, #1
 800217a:	2300      	movhi	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	e006      	b.n	800218e <HAL_I2C_Init+0x92>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a7d      	ldr	r2, [pc, #500]	; (8002378 <HAL_I2C_Init+0x27c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	2301      	movls	r3, #1
 800218a:	2300      	movhi	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e0e7      	b.n	8002366 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4a78      	ldr	r2, [pc, #480]	; (800237c <HAL_I2C_Init+0x280>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_I2C_Init+0x274>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d802      	bhi.n	80021d0 <HAL_I2C_Init+0xd4>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	3301      	adds	r3, #1
 80021ce:	e009      	b.n	80021e4 <HAL_I2C_Init+0xe8>
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a69      	ldr	r2, [pc, #420]	; (8002380 <HAL_I2C_Init+0x284>)
 80021dc:	fba2 2303 	umull	r2, r3, r2, r3
 80021e0:	099b      	lsrs	r3, r3, #6
 80021e2:	3301      	adds	r3, #1
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	430b      	orrs	r3, r1
 80021ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	495c      	ldr	r1, [pc, #368]	; (8002370 <HAL_I2C_Init+0x274>)
 8002200:	428b      	cmp	r3, r1
 8002202:	d819      	bhi.n	8002238 <HAL_I2C_Init+0x13c>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1e59      	subs	r1, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002218:	400b      	ands	r3, r1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_I2C_Init+0x138>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1e59      	subs	r1, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	fbb1 f3f3 	udiv	r3, r1, r3
 800222c:	3301      	adds	r3, #1
 800222e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002232:	e051      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 8002234:	2304      	movs	r3, #4
 8002236:	e04f      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d111      	bne.n	8002264 <HAL_I2C_Init+0x168>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	440b      	add	r3, r1
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	3301      	adds	r3, #1
 8002254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002258:	2b00      	cmp	r3, #0
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e012      	b.n	800228a <HAL_I2C_Init+0x18e>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	0099      	lsls	r1, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	fbb0 f3f3 	udiv	r3, r0, r3
 800227a:	3301      	adds	r3, #1
 800227c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002280:	2b00      	cmp	r3, #0
 8002282:	bf0c      	ite	eq
 8002284:	2301      	moveq	r3, #1
 8002286:	2300      	movne	r3, #0
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_I2C_Init+0x196>
 800228e:	2301      	movs	r3, #1
 8002290:	e022      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10e      	bne.n	80022b8 <HAL_I2C_Init+0x1bc>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1e58      	subs	r0, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6859      	ldr	r1, [r3, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	440b      	add	r3, r1
 80022a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ac:	3301      	adds	r3, #1
 80022ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022b6:	e00f      	b.n	80022d8 <HAL_I2C_Init+0x1dc>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1e58      	subs	r0, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	460b      	mov	r3, r1
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	0099      	lsls	r1, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ce:	3301      	adds	r3, #1
 80022d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022d8:	6879      	ldr	r1, [r7, #4]
 80022da:	6809      	ldr	r1, [r1, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002306:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6911      	ldr	r1, [r2, #16]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	430b      	orrs	r3, r1
 800231a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2220      	movs	r2, #32
 8002352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	000186a0 	.word	0x000186a0
 8002374:	001e847f 	.word	0x001e847f
 8002378:	003d08ff 	.word	0x003d08ff
 800237c:	431bde83 	.word	0x431bde83
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af02      	add	r7, sp, #8
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	461a      	mov	r2, r3
 8002390:	460b      	mov	r3, r1
 8002392:	817b      	strh	r3, [r7, #10]
 8002394:	4613      	mov	r3, r2
 8002396:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7fe ff88 	bl	80012ac <HAL_GetTick>
 800239c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b20      	cmp	r3, #32
 80023a8:	f040 80e0 	bne.w	800256c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2319      	movs	r3, #25
 80023b2:	2201      	movs	r2, #1
 80023b4:	4970      	ldr	r1, [pc, #448]	; (8002578 <HAL_I2C_Master_Transmit+0x1f4>)
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f964 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0d3      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_I2C_Master_Transmit+0x50>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e0cc      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d007      	beq.n	80023fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f042 0201 	orr.w	r2, r2, #1
 80023f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002408:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2210      	movs	r2, #16
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	893a      	ldrh	r2, [r7, #8]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a50      	ldr	r2, [pc, #320]	; (800257c <HAL_I2C_Master_Transmit+0x1f8>)
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	6a3a      	ldr	r2, [r7, #32]
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f89c 	bl	8002580 <I2C_MasterRequestWrite>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e08d      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	613b      	str	r3, [r7, #16]
 8002466:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002468:	e066      	b.n	8002538 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 f9de 	bl	8002830 <I2C_WaitOnTXEFlagUntilTimeout>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b04      	cmp	r3, #4
 8002480:	d107      	bne.n	8002492 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e06b      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	781a      	ldrb	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	d11b      	bne.n	800250c <HAL_I2C_Master_Transmit+0x188>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	781a      	ldrb	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	6a39      	ldr	r1, [r7, #32]
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 f9ce 	bl	80028b2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00d      	beq.n	8002538 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	2b04      	cmp	r3, #4
 8002522:	d107      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002532:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e01a      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	2b00      	cmp	r3, #0
 800253e:	d194      	bne.n	800246a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800254e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002568:	2300      	movs	r3, #0
 800256a:	e000      	b.n	800256e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800256c:	2302      	movs	r3, #2
  }
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	00100002 	.word	0x00100002
 800257c:	ffff0000 	.word	0xffff0000

08002580 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	607a      	str	r2, [r7, #4]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	460b      	mov	r3, r1
 800258e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b08      	cmp	r3, #8
 800259a:	d006      	beq.n	80025aa <I2C_MasterRequestWrite+0x2a>
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d003      	beq.n	80025aa <I2C_MasterRequestWrite+0x2a>
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025a8:	d108      	bne.n	80025bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e00b      	b.n	80025d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	2b12      	cmp	r3, #18
 80025c2:	d107      	bne.n	80025d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f84f 	bl	8002684 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00d      	beq.n	8002608 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fa:	d103      	bne.n	8002604 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e035      	b.n	8002674 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002610:	d108      	bne.n	8002624 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002620:	611a      	str	r2, [r3, #16]
 8002622:	e01b      	b.n	800265c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002624:	897b      	ldrh	r3, [r7, #10]
 8002626:	11db      	asrs	r3, r3, #7
 8002628:	b2db      	uxtb	r3, r3
 800262a:	f003 0306 	and.w	r3, r3, #6
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f063 030f 	orn	r3, r3, #15
 8002634:	b2da      	uxtb	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	490e      	ldr	r1, [pc, #56]	; (800267c <I2C_MasterRequestWrite+0xfc>)
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f875 	bl	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e010      	b.n	8002674 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002652:	897b      	ldrh	r3, [r7, #10]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <I2C_MasterRequestWrite+0x100>)
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f865 	bl	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	00010008 	.word	0x00010008
 8002680:	00010002 	.word	0x00010002

08002684 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002694:	e025      	b.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800269c:	d021      	beq.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269e:	f7fe fe05 	bl	80012ac <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d302      	bcc.n	80026b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d116      	bne.n	80026e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e023      	b.n	800272a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0c1b      	lsrs	r3, r3, #16
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d10d      	bne.n	8002708 <I2C_WaitOnFlagUntilTimeout+0x84>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	e00c      	b.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	43da      	mvns	r2, r3
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	4013      	ands	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	461a      	mov	r2, r3
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	429a      	cmp	r2, r3
 8002726:	d0b6      	beq.n	8002696 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002728:	2300      	movs	r3, #0
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002740:	e051      	b.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d123      	bne.n	800279a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002760:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800276a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f043 0204 	orr.w	r2, r3, #4
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e046      	b.n	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027a0:	d021      	beq.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fd83 	bl	80012ac <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d116      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e020      	b.n	8002828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d10c      	bne.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	43da      	mvns	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4013      	ands	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bf14      	ite	ne
 8002802:	2301      	movne	r3, #1
 8002804:	2300      	moveq	r3, #0
 8002806:	b2db      	uxtb	r3, r3
 8002808:	e00b      	b.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d18d      	bne.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283c:	e02d      	b.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f878 	bl	8002934 <I2C_IsAcknowledgeFailed>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e02d      	b.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002854:	d021      	beq.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fd29 	bl	80012ac <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e007      	b.n	80028aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a4:	2b80      	cmp	r3, #128	; 0x80
 80028a6:	d1ca      	bne.n	800283e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028be:	e02d      	b.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f837 	bl	8002934 <I2C_IsAcknowledgeFailed>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e02d      	b.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d6:	d021      	beq.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d8:	f7fe fce8 	bl	80012ac <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	68ba      	ldr	r2, [r7, #8]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d302      	bcc.n	80028ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e007      	b.n	800292c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	2b04      	cmp	r3, #4
 8002928:	d1ca      	bne.n	80028c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294a:	d11b      	bne.n	8002984 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002954:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	f043 0204 	orr.w	r2, r3, #4
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e26c      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8087 	beq.w	8002abe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b0:	4b92      	ldr	r3, [pc, #584]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 030c 	and.w	r3, r3, #12
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d00c      	beq.n	80029d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029bc:	4b8f      	ldr	r3, [pc, #572]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d112      	bne.n	80029ee <HAL_RCC_OscConfig+0x5e>
 80029c8:	4b8c      	ldr	r3, [pc, #560]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d10b      	bne.n	80029ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d6:	4b89      	ldr	r3, [pc, #548]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d06c      	beq.n	8002abc <HAL_RCC_OscConfig+0x12c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d168      	bne.n	8002abc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e246      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f6:	d106      	bne.n	8002a06 <HAL_RCC_OscConfig+0x76>
 80029f8:	4b80      	ldr	r3, [pc, #512]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a7f      	ldr	r2, [pc, #508]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 80029fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	e02e      	b.n	8002a64 <HAL_RCC_OscConfig+0xd4>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCC_OscConfig+0x98>
 8002a0e:	4b7b      	ldr	r3, [pc, #492]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7a      	ldr	r2, [pc, #488]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	4b78      	ldr	r3, [pc, #480]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a77      	ldr	r2, [pc, #476]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0xd4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0xbc>
 8002a32:	4b72      	ldr	r3, [pc, #456]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a71      	ldr	r2, [pc, #452]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6e      	ldr	r2, [pc, #440]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0xd4>
 8002a4c:	4b6b      	ldr	r3, [pc, #428]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6a      	ldr	r2, [pc, #424]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a67      	ldr	r2, [pc, #412]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fc1e 	bl	80012ac <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fc1a 	bl	80012ac <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	; 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e1fa      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b5d      	ldr	r3, [pc, #372]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0xe4>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a94:	f7fe fc0a 	bl	80012ac <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7fe fc06 	bl	80012ac <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	; 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1e6      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x10c>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d063      	beq.n	8002b92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aca:	4b4c      	ldr	r3, [pc, #304]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ad6:	4b49      	ldr	r3, [pc, #292]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 030c 	and.w	r3, r3, #12
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d11c      	bne.n	8002b1c <HAL_RCC_OscConfig+0x18c>
 8002ae2:	4b46      	ldr	r3, [pc, #280]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aee:	4b43      	ldr	r3, [pc, #268]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d005      	beq.n	8002b06 <HAL_RCC_OscConfig+0x176>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d001      	beq.n	8002b06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e1ba      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b06:	4b3d      	ldr	r3, [pc, #244]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4939      	ldr	r1, [pc, #228]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1a:	e03a      	b.n	8002b92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d020      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <HAL_RCC_OscConfig+0x270>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2a:	f7fe fbbf 	bl	80012ac <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7fe fbbb 	bl	80012ac <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e19b      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b2a      	ldr	r3, [pc, #168]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	4927      	ldr	r1, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]
 8002b64:	e015      	b.n	8002b92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <HAL_RCC_OscConfig+0x270>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fb9e 	bl	80012ac <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b74:	f7fe fb9a 	bl	80012ac <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e17a      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	4b1d      	ldr	r3, [pc, #116]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f0      	bne.n	8002b74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d03a      	beq.n	8002c14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d019      	beq.n	8002bda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bac:	f7fe fb7e 	bl	80012ac <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bb4:	f7fe fb7a 	bl	80012ac <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e15a      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0f0      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f000 fac4 	bl	8003160 <RCC_Delay>
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002be0:	f7fe fb64 	bl	80012ac <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be8:	f7fe fb60 	bl	80012ac <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d908      	bls.n	8002c08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e140      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	42420000 	.word	0x42420000
 8002c04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b9e      	ldr	r3, [pc, #632]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e9      	bne.n	8002be8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a6 	beq.w	8002d6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b97      	ldr	r3, [pc, #604]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10d      	bne.n	8002c4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	4b94      	ldr	r3, [pc, #592]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4a93      	ldr	r2, [pc, #588]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3c:	61d3      	str	r3, [r2, #28]
 8002c3e:	4b91      	ldr	r3, [pc, #580]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c4e:	4b8e      	ldr	r3, [pc, #568]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d118      	bne.n	8002c8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5a:	4b8b      	ldr	r3, [pc, #556]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a8a      	ldr	r2, [pc, #552]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c66:	f7fe fb21 	bl	80012ac <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c6e:	f7fe fb1d 	bl	80012ac <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b64      	cmp	r3, #100	; 0x64
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e0fd      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <HAL_RCC_OscConfig+0x4f8>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d0f0      	beq.n	8002c6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x312>
 8002c94:	4b7b      	ldr	r3, [pc, #492]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6213      	str	r3, [r2, #32]
 8002ca0:	e02d      	b.n	8002cfe <HAL_RCC_OscConfig+0x36e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x334>
 8002caa:	4b76      	ldr	r3, [pc, #472]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	4a75      	ldr	r2, [pc, #468]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cb0:	f023 0301 	bic.w	r3, r3, #1
 8002cb4:	6213      	str	r3, [r2, #32]
 8002cb6:	4b73      	ldr	r3, [pc, #460]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	4a72      	ldr	r2, [pc, #456]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cbc:	f023 0304 	bic.w	r3, r3, #4
 8002cc0:	6213      	str	r3, [r2, #32]
 8002cc2:	e01c      	b.n	8002cfe <HAL_RCC_OscConfig+0x36e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	2b05      	cmp	r3, #5
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x356>
 8002ccc:	4b6d      	ldr	r3, [pc, #436]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	4a6c      	ldr	r2, [pc, #432]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cd2:	f043 0304 	orr.w	r3, r3, #4
 8002cd6:	6213      	str	r3, [r2, #32]
 8002cd8:	4b6a      	ldr	r3, [pc, #424]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a69      	ldr	r2, [pc, #420]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCC_OscConfig+0x36e>
 8002ce6:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a66      	ldr	r2, [pc, #408]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	4b64      	ldr	r3, [pc, #400]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a63      	ldr	r2, [pc, #396]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	f023 0304 	bic.w	r3, r3, #4
 8002cfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d015      	beq.n	8002d32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d06:	f7fe fad1 	bl	80012ac <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe facd 	bl	80012ac <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0ab      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ee      	beq.n	8002d0e <HAL_RCC_OscConfig+0x37e>
 8002d30:	e014      	b.n	8002d5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fabb 	bl	80012ac <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d38:	e00a      	b.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3a:	f7fe fab7 	bl	80012ac <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e095      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d50:	4b4c      	ldr	r3, [pc, #304]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1ee      	bne.n	8002d3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b48      	ldr	r3, [pc, #288]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	4a47      	ldr	r2, [pc, #284]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8081 	beq.w	8002e7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d78:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 030c 	and.w	r3, r3, #12
 8002d80:	2b08      	cmp	r3, #8
 8002d82:	d061      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d146      	bne.n	8002e1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8c:	4b3f      	ldr	r3, [pc, #252]	; (8002e8c <HAL_RCC_OscConfig+0x4fc>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d92:	f7fe fa8b 	bl	80012ac <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fa87 	bl	80012ac <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e067      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d108      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002dc2:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	492d      	ldr	r1, [pc, #180]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dd4:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a19      	ldr	r1, [r3, #32]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	430b      	orrs	r3, r1
 8002de6:	4927      	ldr	r1, [pc, #156]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dec:	4b27      	ldr	r3, [pc, #156]	; (8002e8c <HAL_RCC_OscConfig+0x4fc>)
 8002dee:	2201      	movs	r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fa5b 	bl	80012ac <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fa57 	bl	80012ac <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e037      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0c:	4b1d      	ldr	r3, [pc, #116]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x46a>
 8002e18:	e02f      	b.n	8002e7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	4b1c      	ldr	r3, [pc, #112]	; (8002e8c <HAL_RCC_OscConfig+0x4fc>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fa44 	bl	80012ac <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e28:	f7fe fa40 	bl	80012ac <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e020      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x498>
 8002e46:	e018      	b.n	8002e7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e013      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_OscConfig+0x4f4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42420060 	.word	0x42420060

08002e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0d0      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b67      	ldr	r3, [pc, #412]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4965      	ldr	r1, [pc, #404]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0b8      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a58      	ldr	r2, [pc, #352]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f04:	4b53      	ldr	r3, [pc, #332]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	494d      	ldr	r1, [pc, #308]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d040      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d107      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d115      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e07f      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d107      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e073      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f5e:	4b3d      	ldr	r3, [pc, #244]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e06b      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f6e:	4b39      	ldr	r3, [pc, #228]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f023 0203 	bic.w	r2, r3, #3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	4936      	ldr	r1, [pc, #216]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f80:	f7fe f994 	bl	80012ac <HAL_GetTick>
 8002f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f86:	e00a      	b.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f88:	f7fe f990 	bl	80012ac <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e053      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f003 020c 	and.w	r2, r3, #12
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d1eb      	bne.n	8002f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d210      	bcs.n	8002fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fbe:	4b24      	ldr	r3, [pc, #144]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 0207 	bic.w	r2, r3, #7
 8002fc6:	4922      	ldr	r1, [pc, #136]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d001      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e032      	b.n	8003046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d008      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d009      	beq.n	800301e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800300a:	4b12      	ldr	r3, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	490e      	ldr	r1, [pc, #56]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800301e:	f000 f821 	bl	8003064 <HAL_RCC_GetSysClockFreq>
 8003022:	4602      	mov	r2, r0
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	091b      	lsrs	r3, r3, #4
 800302a:	f003 030f 	and.w	r3, r3, #15
 800302e:	490a      	ldr	r1, [pc, #40]	; (8003058 <HAL_RCC_ClockConfig+0x1c8>)
 8003030:	5ccb      	ldrb	r3, [r1, r3]
 8003032:	fa22 f303 	lsr.w	r3, r2, r3
 8003036:	4a09      	ldr	r2, [pc, #36]	; (800305c <HAL_RCC_ClockConfig+0x1cc>)
 8003038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <HAL_RCC_ClockConfig+0x1d0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe f8f2 	bl	8001228 <HAL_InitTick>

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	40022000 	.word	0x40022000
 8003054:	40021000 	.word	0x40021000
 8003058:	080035d0 	.word	0x080035d0
 800305c:	200000d4 	.word	0x200000d4
 8003060:	200000d8 	.word	0x200000d8

08003064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003064:	b490      	push	{r4, r7}
 8003066:	b08a      	sub	sp, #40	; 0x28
 8003068:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_GetSysClockFreq+0xb0>)
 800306c:	1d3c      	adds	r4, r7, #4
 800306e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003070:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003074:	f240 2301 	movw	r3, #513	; 0x201
 8003078:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
 8003082:	2300      	movs	r3, #0
 8003084:	627b      	str	r3, [r7, #36]	; 0x24
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800308e:	4b22      	ldr	r3, [pc, #136]	; (8003118 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f003 030c 	and.w	r3, r3, #12
 800309a:	2b04      	cmp	r3, #4
 800309c:	d002      	beq.n	80030a4 <HAL_RCC_GetSysClockFreq+0x40>
 800309e:	2b08      	cmp	r3, #8
 80030a0:	d003      	beq.n	80030aa <HAL_RCC_GetSysClockFreq+0x46>
 80030a2:	e02d      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030a4:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030a6:	623b      	str	r3, [r7, #32]
      break;
 80030a8:	e02d      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	0c9b      	lsrs	r3, r3, #18
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030b6:	4413      	add	r3, r2
 80030b8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030bc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d013      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030c8:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	0c5b      	lsrs	r3, r3, #17
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030d6:	4413      	add	r3, r2
 80030d8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80030dc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4a0e      	ldr	r2, [pc, #56]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030e2:	fb02 f203 	mul.w	r2, r2, r3
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	e004      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030f4:	fb02 f303 	mul.w	r3, r2, r3
 80030f8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	623b      	str	r3, [r7, #32]
      break;
 80030fe:	e002      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003102:	623b      	str	r3, [r7, #32]
      break;
 8003104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003106:	6a3b      	ldr	r3, [r7, #32]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc90      	pop	{r4, r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	080035c0 	.word	0x080035c0
 8003118:	40021000 	.word	0x40021000
 800311c:	007a1200 	.word	0x007a1200
 8003120:	003d0900 	.word	0x003d0900

08003124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003128:	4b02      	ldr	r3, [pc, #8]	; (8003134 <HAL_RCC_GetHCLKFreq+0x10>)
 800312a:	681b      	ldr	r3, [r3, #0]
}
 800312c:	4618      	mov	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	bc80      	pop	{r7}
 8003132:	4770      	bx	lr
 8003134:	200000d4 	.word	0x200000d4

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff2 	bl	8003124 <HAL_RCC_GetHCLKFreq>
 8003140:	4602      	mov	r2, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4903      	ldr	r1, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5ccb      	ldrb	r3, [r1, r3]
 8003150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40021000 	.word	0x40021000
 800315c:	080035e0 	.word	0x080035e0

08003160 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <RCC_Delay+0x34>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a0a      	ldr	r2, [pc, #40]	; (8003198 <RCC_Delay+0x38>)
 800316e:	fba2 2303 	umull	r2, r3, r2, r3
 8003172:	0a5b      	lsrs	r3, r3, #9
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	fb02 f303 	mul.w	r3, r2, r3
 800317a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800317c:	bf00      	nop
  }
  while (Delay --);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	60fa      	str	r2, [r7, #12]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f9      	bne.n	800317c <RCC_Delay+0x1c>
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	200000d4 	.word	0x200000d4
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	2300      	movs	r3, #0
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d07d      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ca:	69db      	ldr	r3, [r3, #28]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d2:	61d3      	str	r3, [r2, #28]
 80031d4:	4b49      	ldr	r3, [pc, #292]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e4:	4b46      	ldr	r3, [pc, #280]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d118      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f0:	4b43      	ldr	r3, [pc, #268]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a42      	ldr	r2, [pc, #264]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fc:	f7fe f856 	bl	80012ac <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	e008      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003204:	f7fe f852 	bl	80012ac <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	; 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e06d      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b3a      	ldr	r3, [pc, #232]	; (8003300 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003222:	4b36      	ldr	r3, [pc, #216]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d02e      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d027      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003248:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003250:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003256:	4a29      	ldr	r2, [pc, #164]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d014      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003266:	f7fe f821 	bl	80012ac <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800326c:	e00a      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326e:	f7fe f81d 	bl	80012ac <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	f241 3288 	movw	r2, #5000	; 0x1388
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e036      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ee      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4917      	ldr	r1, [pc, #92]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b14      	ldr	r3, [pc, #80]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	4a13      	ldr	r2, [pc, #76]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d008      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032c0:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	490b      	ldr	r1, [pc, #44]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d008      	beq.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4904      	ldr	r1, [pc, #16]	; (80032fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
 8003304:	42420440 	.word	0x42420440

08003308 <__libc_init_array>:
 8003308:	b570      	push	{r4, r5, r6, lr}
 800330a:	2600      	movs	r6, #0
 800330c:	4d0c      	ldr	r5, [pc, #48]	; (8003340 <__libc_init_array+0x38>)
 800330e:	4c0d      	ldr	r4, [pc, #52]	; (8003344 <__libc_init_array+0x3c>)
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	42a6      	cmp	r6, r4
 8003316:	d109      	bne.n	800332c <__libc_init_array+0x24>
 8003318:	f000 f822 	bl	8003360 <_init>
 800331c:	2600      	movs	r6, #0
 800331e:	4d0a      	ldr	r5, [pc, #40]	; (8003348 <__libc_init_array+0x40>)
 8003320:	4c0a      	ldr	r4, [pc, #40]	; (800334c <__libc_init_array+0x44>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	42a6      	cmp	r6, r4
 8003328:	d105      	bne.n	8003336 <__libc_init_array+0x2e>
 800332a:	bd70      	pop	{r4, r5, r6, pc}
 800332c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003330:	4798      	blx	r3
 8003332:	3601      	adds	r6, #1
 8003334:	e7ee      	b.n	8003314 <__libc_init_array+0xc>
 8003336:	f855 3b04 	ldr.w	r3, [r5], #4
 800333a:	4798      	blx	r3
 800333c:	3601      	adds	r6, #1
 800333e:	e7f2      	b.n	8003326 <__libc_init_array+0x1e>
 8003340:	080035e8 	.word	0x080035e8
 8003344:	080035e8 	.word	0x080035e8
 8003348:	080035e8 	.word	0x080035e8
 800334c:	080035ec 	.word	0x080035ec

08003350 <memset>:
 8003350:	4603      	mov	r3, r0
 8003352:	4402      	add	r2, r0
 8003354:	4293      	cmp	r3, r2
 8003356:	d100      	bne.n	800335a <memset+0xa>
 8003358:	4770      	bx	lr
 800335a:	f803 1b01 	strb.w	r1, [r3], #1
 800335e:	e7f9      	b.n	8003354 <memset+0x4>

08003360 <_init>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr

0800336c <_fini>:
 800336c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336e:	bf00      	nop
 8003370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003372:	bc08      	pop	{r3}
 8003374:	469e      	mov	lr, r3
 8003376:	4770      	bx	lr
