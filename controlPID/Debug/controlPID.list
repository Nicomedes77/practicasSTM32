
controlPID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005200  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800545c  0800545c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800545c  0800545c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800545c  0800545c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800545c  0800545c  0001545c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005460  08005460  00015460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000078  080054dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  080054dc  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec45  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002273  00000000  00000000  0002ece6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00030f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d40  00000000  00000000  00031d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189c1  00000000  00000000  00032ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ff  00000000  00000000  0004b481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906ee  00000000  00000000  0005b980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ec06e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041ac  00000000  00000000  000ec0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080052f8 	.word	0x080052f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080052f8 	.word	0x080052f8

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	; 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2f>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000724:	bf24      	itt	cs
 8000726:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800072a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800072e:	d90d      	bls.n	800074c <__aeabi_d2f+0x30>
 8000730:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000734:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000738:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800073c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000740:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000744:	bf08      	it	eq
 8000746:	f020 0001 	biceq.w	r0, r0, #1
 800074a:	4770      	bx	lr
 800074c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000750:	d121      	bne.n	8000796 <__aeabi_d2f+0x7a>
 8000752:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000756:	bfbc      	itt	lt
 8000758:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800075c:	4770      	bxlt	lr
 800075e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000762:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000766:	f1c2 0218 	rsb	r2, r2, #24
 800076a:	f1c2 0c20 	rsb	ip, r2, #32
 800076e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000772:	fa20 f002 	lsr.w	r0, r0, r2
 8000776:	bf18      	it	ne
 8000778:	f040 0001 	orrne.w	r0, r0, #1
 800077c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000780:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000784:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000788:	ea40 000c 	orr.w	r0, r0, ip
 800078c:	fa23 f302 	lsr.w	r3, r3, r2
 8000790:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000794:	e7cc      	b.n	8000730 <__aeabi_d2f+0x14>
 8000796:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800079a:	d107      	bne.n	80007ac <__aeabi_d2f+0x90>
 800079c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007a0:	bf1e      	ittt	ne
 80007a2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007a6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007aa:	4770      	bxne	lr
 80007ac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80007b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop

080007bc <__aeabi_frsub>:
 80007bc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80007c0:	e002      	b.n	80007c8 <__addsf3>
 80007c2:	bf00      	nop

080007c4 <__aeabi_fsub>:
 80007c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080007c8 <__addsf3>:
 80007c8:	0042      	lsls	r2, r0, #1
 80007ca:	bf1f      	itttt	ne
 80007cc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007d0:	ea92 0f03 	teqne	r2, r3
 80007d4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007dc:	d06a      	beq.n	80008b4 <__addsf3+0xec>
 80007de:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007e2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e6:	bfc1      	itttt	gt
 80007e8:	18d2      	addgt	r2, r2, r3
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	4048      	eorgt	r0, r1
 80007ee:	4041      	eorgt	r1, r0
 80007f0:	bfb8      	it	lt
 80007f2:	425b      	neglt	r3, r3
 80007f4:	2b19      	cmp	r3, #25
 80007f6:	bf88      	it	hi
 80007f8:	4770      	bxhi	lr
 80007fa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007fe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000802:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000806:	bf18      	it	ne
 8000808:	4240      	negne	r0, r0
 800080a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800080e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000812:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000816:	bf18      	it	ne
 8000818:	4249      	negne	r1, r1
 800081a:	ea92 0f03 	teq	r2, r3
 800081e:	d03f      	beq.n	80008a0 <__addsf3+0xd8>
 8000820:	f1a2 0201 	sub.w	r2, r2, #1
 8000824:	fa41 fc03 	asr.w	ip, r1, r3
 8000828:	eb10 000c 	adds.w	r0, r0, ip
 800082c:	f1c3 0320 	rsb	r3, r3, #32
 8000830:	fa01 f103 	lsl.w	r1, r1, r3
 8000834:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000838:	d502      	bpl.n	8000840 <__addsf3+0x78>
 800083a:	4249      	negs	r1, r1
 800083c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000840:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000844:	d313      	bcc.n	800086e <__addsf3+0xa6>
 8000846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084a:	d306      	bcc.n	800085a <__addsf3+0x92>
 800084c:	0840      	lsrs	r0, r0, #1
 800084e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000852:	f102 0201 	add.w	r2, r2, #1
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	d251      	bcs.n	80008fe <__addsf3+0x136>
 800085a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800085e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000862:	bf08      	it	eq
 8000864:	f020 0001 	biceq.w	r0, r0, #1
 8000868:	ea40 0003 	orr.w	r0, r0, r3
 800086c:	4770      	bx	lr
 800086e:	0049      	lsls	r1, r1, #1
 8000870:	eb40 0000 	adc.w	r0, r0, r0
 8000874:	3a01      	subs	r2, #1
 8000876:	bf28      	it	cs
 8000878:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800087c:	d2ed      	bcs.n	800085a <__addsf3+0x92>
 800087e:	fab0 fc80 	clz	ip, r0
 8000882:	f1ac 0c08 	sub.w	ip, ip, #8
 8000886:	ebb2 020c 	subs.w	r2, r2, ip
 800088a:	fa00 f00c 	lsl.w	r0, r0, ip
 800088e:	bfaa      	itet	ge
 8000890:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000894:	4252      	neglt	r2, r2
 8000896:	4318      	orrge	r0, r3
 8000898:	bfbc      	itt	lt
 800089a:	40d0      	lsrlt	r0, r2
 800089c:	4318      	orrlt	r0, r3
 800089e:	4770      	bx	lr
 80008a0:	f092 0f00 	teq	r2, #0
 80008a4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80008a8:	bf06      	itte	eq
 80008aa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80008ae:	3201      	addeq	r2, #1
 80008b0:	3b01      	subne	r3, #1
 80008b2:	e7b5      	b.n	8000820 <__addsf3+0x58>
 80008b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008bc:	bf18      	it	ne
 80008be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c2:	d021      	beq.n	8000908 <__addsf3+0x140>
 80008c4:	ea92 0f03 	teq	r2, r3
 80008c8:	d004      	beq.n	80008d4 <__addsf3+0x10c>
 80008ca:	f092 0f00 	teq	r2, #0
 80008ce:	bf08      	it	eq
 80008d0:	4608      	moveq	r0, r1
 80008d2:	4770      	bx	lr
 80008d4:	ea90 0f01 	teq	r0, r1
 80008d8:	bf1c      	itt	ne
 80008da:	2000      	movne	r0, #0
 80008dc:	4770      	bxne	lr
 80008de:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008e2:	d104      	bne.n	80008ee <__addsf3+0x126>
 80008e4:	0040      	lsls	r0, r0, #1
 80008e6:	bf28      	it	cs
 80008e8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ec:	4770      	bx	lr
 80008ee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008f2:	bf3c      	itt	cc
 80008f4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bxcc	lr
 80008fa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008fe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000906:	4770      	bx	lr
 8000908:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800090c:	bf16      	itet	ne
 800090e:	4608      	movne	r0, r1
 8000910:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000914:	4601      	movne	r1, r0
 8000916:	0242      	lsls	r2, r0, #9
 8000918:	bf06      	itte	eq
 800091a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091e:	ea90 0f01 	teqeq	r0, r1
 8000922:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000926:	4770      	bx	lr

08000928 <__aeabi_ui2f>:
 8000928:	f04f 0300 	mov.w	r3, #0
 800092c:	e004      	b.n	8000938 <__aeabi_i2f+0x8>
 800092e:	bf00      	nop

08000930 <__aeabi_i2f>:
 8000930:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000934:	bf48      	it	mi
 8000936:	4240      	negmi	r0, r0
 8000938:	ea5f 0c00 	movs.w	ip, r0
 800093c:	bf08      	it	eq
 800093e:	4770      	bxeq	lr
 8000940:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000944:	4601      	mov	r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	e01c      	b.n	8000986 <__aeabi_l2f+0x2a>

0800094c <__aeabi_ul2f>:
 800094c:	ea50 0201 	orrs.w	r2, r0, r1
 8000950:	bf08      	it	eq
 8000952:	4770      	bxeq	lr
 8000954:	f04f 0300 	mov.w	r3, #0
 8000958:	e00a      	b.n	8000970 <__aeabi_l2f+0x14>
 800095a:	bf00      	nop

0800095c <__aeabi_l2f>:
 800095c:	ea50 0201 	orrs.w	r2, r0, r1
 8000960:	bf08      	it	eq
 8000962:	4770      	bxeq	lr
 8000964:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000968:	d502      	bpl.n	8000970 <__aeabi_l2f+0x14>
 800096a:	4240      	negs	r0, r0
 800096c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000970:	ea5f 0c01 	movs.w	ip, r1
 8000974:	bf02      	ittt	eq
 8000976:	4684      	moveq	ip, r0
 8000978:	4601      	moveq	r1, r0
 800097a:	2000      	moveq	r0, #0
 800097c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000980:	bf08      	it	eq
 8000982:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000986:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800098a:	fabc f28c 	clz	r2, ip
 800098e:	3a08      	subs	r2, #8
 8000990:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000994:	db10      	blt.n	80009b8 <__aeabi_l2f+0x5c>
 8000996:	fa01 fc02 	lsl.w	ip, r1, r2
 800099a:	4463      	add	r3, ip
 800099c:	fa00 fc02 	lsl.w	ip, r0, r2
 80009a0:	f1c2 0220 	rsb	r2, r2, #32
 80009a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80009a8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ac:	eb43 0002 	adc.w	r0, r3, r2
 80009b0:	bf08      	it	eq
 80009b2:	f020 0001 	biceq.w	r0, r0, #1
 80009b6:	4770      	bx	lr
 80009b8:	f102 0220 	add.w	r2, r2, #32
 80009bc:	fa01 fc02 	lsl.w	ip, r1, r2
 80009c0:	f1c2 0220 	rsb	r2, r2, #32
 80009c4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c8:	fa21 f202 	lsr.w	r2, r1, r2
 80009cc:	eb43 0002 	adc.w	r0, r3, r2
 80009d0:	bf08      	it	eq
 80009d2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d6:	4770      	bx	lr

080009d8 <__aeabi_fmul>:
 80009d8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009dc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009e0:	bf1e      	ittt	ne
 80009e2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e6:	ea92 0f0c 	teqne	r2, ip
 80009ea:	ea93 0f0c 	teqne	r3, ip
 80009ee:	d06f      	beq.n	8000ad0 <__aeabi_fmul+0xf8>
 80009f0:	441a      	add	r2, r3
 80009f2:	ea80 0c01 	eor.w	ip, r0, r1
 80009f6:	0240      	lsls	r0, r0, #9
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fe:	d01e      	beq.n	8000a3e <__aeabi_fmul+0x66>
 8000a00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000a04:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a08:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a0c:	fba0 3101 	umull	r3, r1, r0, r1
 8000a10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a14:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000a18:	bf3e      	ittt	cc
 8000a1a:	0049      	lslcc	r1, r1, #1
 8000a1c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	ea40 0001 	orr.w	r0, r0, r1
 8000a26:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000a2a:	2afd      	cmp	r2, #253	; 0xfd
 8000a2c:	d81d      	bhi.n	8000a6a <__aeabi_fmul+0x92>
 8000a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a36:	bf08      	it	eq
 8000a38:	f020 0001 	biceq.w	r0, r0, #1
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a46:	bf08      	it	eq
 8000a48:	0249      	lsleq	r1, r1, #9
 8000a4a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a52:	3a7f      	subs	r2, #127	; 0x7f
 8000a54:	bfc2      	ittt	gt
 8000a56:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a5a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5e:	4770      	bxgt	lr
 8000a60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a64:	f04f 0300 	mov.w	r3, #0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	dc5d      	bgt.n	8000b28 <__aeabi_fmul+0x150>
 8000a6c:	f112 0f19 	cmn.w	r2, #25
 8000a70:	bfdc      	itt	le
 8000a72:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a76:	4770      	bxle	lr
 8000a78:	f1c2 0200 	rsb	r2, r2, #0
 8000a7c:	0041      	lsls	r1, r0, #1
 8000a7e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a82:	f1c2 0220 	rsb	r2, r2, #32
 8000a86:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a8a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8e:	f140 0000 	adc.w	r0, r0, #0
 8000a92:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a96:	bf08      	it	eq
 8000a98:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a9c:	4770      	bx	lr
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fmul+0xce>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fmul+0xe6>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e78f      	b.n	80009f0 <__aeabi_fmul+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	bf18      	it	ne
 8000ada:	ea93 0f0c 	teqne	r3, ip
 8000ade:	d00a      	beq.n	8000af6 <__aeabi_fmul+0x11e>
 8000ae0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ae4:	bf18      	it	ne
 8000ae6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aea:	d1d8      	bne.n	8000a9e <__aeabi_fmul+0xc6>
 8000aec:	ea80 0001 	eor.w	r0, r0, r1
 8000af0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000af4:	4770      	bx	lr
 8000af6:	f090 0f00 	teq	r0, #0
 8000afa:	bf17      	itett	ne
 8000afc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000b00:	4608      	moveq	r0, r1
 8000b02:	f091 0f00 	teqne	r1, #0
 8000b06:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000b0a:	d014      	beq.n	8000b36 <__aeabi_fmul+0x15e>
 8000b0c:	ea92 0f0c 	teq	r2, ip
 8000b10:	d101      	bne.n	8000b16 <__aeabi_fmul+0x13e>
 8000b12:	0242      	lsls	r2, r0, #9
 8000b14:	d10f      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b16:	ea93 0f0c 	teq	r3, ip
 8000b1a:	d103      	bne.n	8000b24 <__aeabi_fmul+0x14c>
 8000b1c:	024b      	lsls	r3, r1, #9
 8000b1e:	bf18      	it	ne
 8000b20:	4608      	movne	r0, r1
 8000b22:	d108      	bne.n	8000b36 <__aeabi_fmul+0x15e>
 8000b24:	ea80 0001 	eor.w	r0, r0, r1
 8000b28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b34:	4770      	bx	lr
 8000b36:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_fdiv>:
 8000b40:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b48:	bf1e      	ittt	ne
 8000b4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4e:	ea92 0f0c 	teqne	r2, ip
 8000b52:	ea93 0f0c 	teqne	r3, ip
 8000b56:	d069      	beq.n	8000c2c <__aeabi_fdiv+0xec>
 8000b58:	eba2 0203 	sub.w	r2, r2, r3
 8000b5c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b66:	d037      	beq.n	8000bd8 <__aeabi_fdiv+0x98>
 8000b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b70:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b78:	428b      	cmp	r3, r1
 8000b7a:	bf38      	it	cc
 8000b7c:	005b      	lslcc	r3, r3, #1
 8000b7e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b82:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b86:	428b      	cmp	r3, r1
 8000b88:	bf24      	itt	cs
 8000b8a:	1a5b      	subcs	r3, r3, r1
 8000b8c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b90:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b94:	bf24      	itt	cs
 8000b96:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b9a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ba2:	bf24      	itt	cs
 8000ba4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000bac:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bb0:	bf24      	itt	cs
 8000bb2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bba:	011b      	lsls	r3, r3, #4
 8000bbc:	bf18      	it	ne
 8000bbe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bc2:	d1e0      	bne.n	8000b86 <__aeabi_fdiv+0x46>
 8000bc4:	2afd      	cmp	r2, #253	; 0xfd
 8000bc6:	f63f af50 	bhi.w	8000a6a <__aeabi_fmul+0x92>
 8000bca:	428b      	cmp	r3, r1
 8000bcc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bdc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000be0:	327f      	adds	r2, #127	; 0x7f
 8000be2:	bfc2      	ittt	gt
 8000be4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000be8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bec:	4770      	bxgt	lr
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf2:	f04f 0300 	mov.w	r3, #0
 8000bf6:	3a01      	subs	r2, #1
 8000bf8:	e737      	b.n	8000a6a <__aeabi_fmul+0x92>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c02:	bf02      	ittt	eq
 8000c04:	0040      	lsleq	r0, r0, #1
 8000c06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c0a:	3a01      	subeq	r2, #1
 8000c0c:	d0f9      	beq.n	8000c02 <__aeabi_fdiv+0xc2>
 8000c0e:	ea40 000c 	orr.w	r0, r0, ip
 8000c12:	f093 0f00 	teq	r3, #0
 8000c16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c1a:	bf02      	ittt	eq
 8000c1c:	0049      	lsleq	r1, r1, #1
 8000c1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c22:	3b01      	subeq	r3, #1
 8000c24:	d0f9      	beq.n	8000c1a <__aeabi_fdiv+0xda>
 8000c26:	ea41 010c 	orr.w	r1, r1, ip
 8000c2a:	e795      	b.n	8000b58 <__aeabi_fdiv+0x18>
 8000c2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c30:	ea92 0f0c 	teq	r2, ip
 8000c34:	d108      	bne.n	8000c48 <__aeabi_fdiv+0x108>
 8000c36:	0242      	lsls	r2, r0, #9
 8000c38:	f47f af7d 	bne.w	8000b36 <__aeabi_fmul+0x15e>
 8000c3c:	ea93 0f0c 	teq	r3, ip
 8000c40:	f47f af70 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c44:	4608      	mov	r0, r1
 8000c46:	e776      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c48:	ea93 0f0c 	teq	r3, ip
 8000c4c:	d104      	bne.n	8000c58 <__aeabi_fdiv+0x118>
 8000c4e:	024b      	lsls	r3, r1, #9
 8000c50:	f43f af4c 	beq.w	8000aec <__aeabi_fmul+0x114>
 8000c54:	4608      	mov	r0, r1
 8000c56:	e76e      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c58:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c5c:	bf18      	it	ne
 8000c5e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c62:	d1ca      	bne.n	8000bfa <__aeabi_fdiv+0xba>
 8000c64:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c68:	f47f af5c 	bne.w	8000b24 <__aeabi_fmul+0x14c>
 8000c6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c70:	f47f af3c 	bne.w	8000aec <__aeabi_fmul+0x114>
 8000c74:	e75f      	b.n	8000b36 <__aeabi_fmul+0x15e>
 8000c76:	bf00      	nop

08000c78 <__gesf2>:
 8000c78:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000c7c:	e006      	b.n	8000c8c <__cmpsf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__lesf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	e002      	b.n	8000c8c <__cmpsf2+0x4>
 8000c86:	bf00      	nop

08000c88 <__cmpsf2>:
 8000c88:	f04f 0c01 	mov.w	ip, #1
 8000c8c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c90:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c9c:	bf18      	it	ne
 8000c9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca2:	d011      	beq.n	8000cc8 <__cmpsf2+0x40>
 8000ca4:	b001      	add	sp, #4
 8000ca6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000caa:	bf18      	it	ne
 8000cac:	ea90 0f01 	teqne	r0, r1
 8000cb0:	bf58      	it	pl
 8000cb2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb6:	bf88      	it	hi
 8000cb8:	17c8      	asrhi	r0, r1, #31
 8000cba:	bf38      	it	cc
 8000cbc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cc0:	bf18      	it	ne
 8000cc2:	f040 0001 	orrne.w	r0, r0, #1
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ccc:	d102      	bne.n	8000cd4 <__cmpsf2+0x4c>
 8000cce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cd2:	d105      	bne.n	8000ce0 <__cmpsf2+0x58>
 8000cd4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd8:	d1e4      	bne.n	8000ca4 <__cmpsf2+0x1c>
 8000cda:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cde:	d0e1      	beq.n	8000ca4 <__cmpsf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cfrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4661      	mov	r1, ip
 8000cee:	e7ff      	b.n	8000cf0 <__aeabi_cfcmpeq>

08000cf0 <__aeabi_cfcmpeq>:
 8000cf0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cf2:	f7ff ffc9 	bl	8000c88 <__cmpsf2>
 8000cf6:	2800      	cmp	r0, #0
 8000cf8:	bf48      	it	mi
 8000cfa:	f110 0f00 	cmnmi.w	r0, #0
 8000cfe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d00 <__aeabi_fcmpeq>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff fff4 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d08:	bf0c      	ite	eq
 8000d0a:	2001      	moveq	r0, #1
 8000d0c:	2000      	movne	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_fcmplt>:
 8000d14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d18:	f7ff ffea 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d1c:	bf34      	ite	cc
 8000d1e:	2001      	movcc	r0, #1
 8000d20:	2000      	movcs	r0, #0
 8000d22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d26:	bf00      	nop

08000d28 <__aeabi_fcmple>:
 8000d28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d2c:	f7ff ffe0 	bl	8000cf0 <__aeabi_cfcmpeq>
 8000d30:	bf94      	ite	ls
 8000d32:	2001      	movls	r0, #1
 8000d34:	2000      	movhi	r0, #0
 8000d36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3a:	bf00      	nop

08000d3c <__aeabi_fcmpge>:
 8000d3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d40:	f7ff ffd2 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d44:	bf94      	ite	ls
 8000d46:	2001      	movls	r0, #1
 8000d48:	2000      	movhi	r0, #0
 8000d4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4e:	bf00      	nop

08000d50 <__aeabi_fcmpgt>:
 8000d50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d54:	f7ff ffc8 	bl	8000ce8 <__aeabi_cfrcmple>
 8000d58:	bf34      	ite	cc
 8000d5a:	2001      	movcc	r0, #1
 8000d5c:	2000      	movcs	r0, #0
 8000d5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d62:	bf00      	nop

08000d64 <__aeabi_f2uiz>:
 8000d64:	0042      	lsls	r2, r0, #1
 8000d66:	d20e      	bcs.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d6c:	d30b      	bcc.n	8000d86 <__aeabi_f2uiz+0x22>
 8000d6e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d72:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d76:	d409      	bmi.n	8000d8c <__aeabi_f2uiz+0x28>
 8000d78:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	4770      	bx	lr
 8000d86:	f04f 0000 	mov.w	r0, #0
 8000d8a:	4770      	bx	lr
 8000d8c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d90:	d101      	bne.n	8000d96 <__aeabi_f2uiz+0x32>
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	d102      	bne.n	8000d9c <__aeabi_f2uiz+0x38>
 8000d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d9a:	4770      	bx	lr
 8000d9c:	f04f 0000 	mov.w	r0, #0
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f023 030f 	bic.w	r3, r3, #15
 8000db4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000dbc:	7bfb      	ldrb	r3, [r7, #15]
 8000dbe:	f043 030c 	orr.w	r3, r3, #12
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000dd0:	7bbb      	ldrb	r3, [r7, #14]
 8000dd2:	f043 030c 	orr.w	r3, r3, #12
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000dda:	7bbb      	ldrb	r3, [r7, #14]
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000de4:	f107 0208 	add.w	r2, r7, #8
 8000de8:	2364      	movs	r3, #100	; 0x64
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2304      	movs	r3, #4
 8000dee:	214e      	movs	r1, #78	; 0x4e
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <lcd_send_cmd+0x5c>)
 8000df2:	f002 f833 	bl	8002e5c <HAL_I2C_Master_Transmit>
}
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000c4 	.word	0x200000c4

08000e04 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af02      	add	r7, sp, #8
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f023 030f 	bic.w	r3, r3, #15
 8000e14:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f043 030d 	orr.w	r3, r3, #13
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f043 0309 	orr.w	r3, r3, #9
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000e30:	7bbb      	ldrb	r3, [r7, #14]
 8000e32:	f043 030d 	orr.w	r3, r3, #13
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000e3a:	7bbb      	ldrb	r3, [r7, #14]
 8000e3c:	f043 0309 	orr.w	r3, r3, #9
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e44:	f107 0208 	add.w	r2, r7, #8
 8000e48:	2364      	movs	r3, #100	; 0x64
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2304      	movs	r3, #4
 8000e4e:	214e      	movs	r1, #78	; 0x4e
 8000e50:	4803      	ldr	r0, [pc, #12]	; (8000e60 <lcd_send_data+0x5c>)
 8000e52:	f002 f803 	bl	8002e5c <HAL_I2C_Master_Transmit>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200000c4 	.word	0x200000c4

08000e64 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000e68:	2032      	movs	r0, #50	; 0x32
 8000e6a:	f000 fe43 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e6e:	2030      	movs	r0, #48	; 0x30
 8000e70:	f7ff ff98 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000e74:	2005      	movs	r0, #5
 8000e76:	f000 fe3d 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e7a:	2030      	movs	r0, #48	; 0x30
 8000e7c:	f7ff ff92 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000e80:	2001      	movs	r0, #1
 8000e82:	f000 fe37 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000e86:	2030      	movs	r0, #48	; 0x30
 8000e88:	f7ff ff8c 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(10);
 8000e8c:	200a      	movs	r0, #10
 8000e8e:	f000 fe31 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000e92:	2020      	movs	r0, #32
 8000e94:	f7ff ff86 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(10);
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 fe2b 	bl	8001af4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000e9e:	2028      	movs	r0, #40	; 0x28
 8000ea0:	f7ff ff80 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	f000 fe25 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000eaa:	2008      	movs	r0, #8
 8000eac:	f7ff ff7a 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(1);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 fe1f 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f7ff ff74 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 fe19 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000ec2:	2006      	movs	r0, #6
 8000ec4:	f7ff ff6e 	bl	8000da4 <lcd_send_cmd>
	HAL_Delay(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 fe13 	bl	8001af4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000ece:	200c      	movs	r0, #12
 8000ed0:	f7ff ff68 	bl	8000da4 <lcd_send_cmd>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000ee0:	e006      	b.n	8000ef0 <lcd_send_string+0x18>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	1c5a      	adds	r2, r3, #1
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff8a 	bl	8000e04 <lcd_send_data>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f4      	bne.n	8000ee2 <lcd_send_string+0xa>
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f08:	f000 fd92 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0c:	f000 f820 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 f9a4 	bl	800125c <MX_GPIO_Init>
  MX_DMA_Init();
 8000f14:	f000 f984 	bl	8001220 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f18:	f000 f876 	bl	8001008 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000f1c:	f000 f8b2 	bl	8001084 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000f20:	f000 f8de 	bl	80010e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000f24:	f7ff ff9e 	bl	8000e64 <lcd_init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4807      	ldr	r0, [pc, #28]	; (8000f48 <main+0x44>)
 8000f2c:	f003 f800 	bl	8003f30 <HAL_TIM_PWM_Start>
  Time = HAL_GetTick();
 8000f30:	f000 fdd6 	bl	8001ae0 <HAL_GetTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fcf6 	bl	8000928 <__aeabi_ui2f>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a03      	ldr	r2, [pc, #12]	; (8000f4c <main+0x48>)
 8000f40:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  controlPID();
 8000f42:	f000 fa61 	bl	8001408 <controlPID>
  {
 8000f46:	e7fc      	b.n	8000f42 <main+0x3e>
 8000f48:	200001a0 	.word	0x200001a0
 8000f4c:	200001e8 	.word	0x200001e8

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f5a:	2228      	movs	r2, #40	; 0x28
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 fd88 	bl	8004a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 8000f9c:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f002 fa5e 	bl	8003468 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fb2:	f000 fb67 	bl	8001684 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2102      	movs	r1, #2
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fcc8 	bl	8003968 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000fde:	f000 fb51 	bl	8001684 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fe40 	bl	8003c74 <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ffa:	f000 fb43 	bl	8001684 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	; 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001018:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_ADC1_Init+0x74>)
 800101a:	4a19      	ldr	r2, [pc, #100]	; (8001080 <MX_ADC1_Init+0x78>)
 800101c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <MX_ADC1_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001024:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_ADC1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <MX_ADC1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_ADC1_Init+0x74>)
 8001032:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001036:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <MX_ADC1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_ADC1_Init+0x74>)
 8001040:	2201      	movs	r2, #1
 8001042:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_ADC1_Init+0x74>)
 8001046:	f000 fd79 	bl	8001b3c <HAL_ADC_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001050:	f000 fb18 	bl	8001684 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001054:	2301      	movs	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001058:	2301      	movs	r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800105c:	2300      	movs	r3, #0
 800105e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_ADC1_Init+0x74>)
 8001066:	f000 ff3b 	bl	8001ee0 <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001070:	f000 fb08 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000124 	.word	0x20000124
 8001080:	40012400 	.word	0x40012400

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f001 fd87 	bl	8002bd4 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 fada 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000c4 	.word	0x200000c4
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	; 0x58
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2220      	movs	r2, #32
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f003 fcab 	bl	8004a74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800111e:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <MX_TIM1_Init+0x138>)
 8001120:	4a3e      	ldr	r2, [pc, #248]	; (800121c <MX_TIM1_Init+0x13c>)
 8001122:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999-1;
 8001124:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <MX_TIM1_Init+0x138>)
 8001126:	f240 32e6 	movw	r2, #998	; 0x3e6
 800112a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b3a      	ldr	r3, [pc, #232]	; (8001218 <MX_TIM1_Init+0x138>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <MX_TIM1_Init+0x138>)
 8001134:	2263      	movs	r2, #99	; 0x63
 8001136:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001138:	4b37      	ldr	r3, [pc, #220]	; (8001218 <MX_TIM1_Init+0x138>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <MX_TIM1_Init+0x138>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001144:	4b34      	ldr	r3, [pc, #208]	; (8001218 <MX_TIM1_Init+0x138>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800114a:	4833      	ldr	r0, [pc, #204]	; (8001218 <MX_TIM1_Init+0x138>)
 800114c:	f002 fe48 	bl	8003de0 <HAL_TIM_Base_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001156:	f000 fa95 	bl	8001684 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001160:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001164:	4619      	mov	r1, r3
 8001166:	482c      	ldr	r0, [pc, #176]	; (8001218 <MX_TIM1_Init+0x138>)
 8001168:	f003 f842 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001172:	f000 fa87 	bl	8001684 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001176:	4828      	ldr	r0, [pc, #160]	; (8001218 <MX_TIM1_Init+0x138>)
 8001178:	f002 fe81 	bl	8003e7e <HAL_TIM_PWM_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001182:	f000 fa7f 	bl	8001684 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800118e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001192:	4619      	mov	r1, r3
 8001194:	4820      	ldr	r0, [pc, #128]	; (8001218 <MX_TIM1_Init+0x138>)
 8001196:	f003 fb93 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80011a0:	f000 fa70 	bl	8001684 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a4:	2360      	movs	r3, #96	; 0x60
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011bc:	2300      	movs	r3, #0
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	4813      	ldr	r0, [pc, #76]	; (8001218 <MX_TIM1_Init+0x138>)
 80011ca:	f002 ff53 	bl	8004074 <HAL_TIM_PWM_ConfigChannel>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80011d4:	f000 fa56 	bl	8001684 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <MX_TIM1_Init+0x138>)
 80011fc:	f003 fbbe 	bl	800497c <HAL_TIMEx_ConfigBreakDeadTime>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001206:	f000 fa3d 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800120a:	4803      	ldr	r0, [pc, #12]	; (8001218 <MX_TIM1_Init+0x138>)
 800120c:	f000 fb48 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001210:	bf00      	nop
 8001212:	3758      	adds	r7, #88	; 0x58
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200001a0 	.word	0x200001a0
 800121c:	40012c00 	.word	0x40012c00

08001220 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_DMA_Init+0x38>)
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <MX_DMA_Init+0x38>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6153      	str	r3, [r2, #20]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_DMA_Init+0x38>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	200b      	movs	r0, #11
 8001244:	f001 f91d 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001248:	200b      	movs	r0, #11
 800124a:	f001 f936 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40021000 	.word	0x40021000

0800125c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a13      	ldr	r2, [pc, #76]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_GPIO_Init+0x58>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001294:	699b      	ldr	r3, [r3, #24]
 8001296:	4a07      	ldr	r2, [pc, #28]	; (80012b4 <MX_GPIO_Init+0x58>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <MX_GPIO_Init+0x58>)
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40021000 	.word	0x40021000

080012b8 <getTemp>:
////	  n_sample_adc++;
//}


float_t getTemp(void)
{
 80012b8:	b5b0      	push	{r4, r5, r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

	uint32_t adc_val_average = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]

	for(uint8_t i = 0 ; i < N_SAMPLES_ADC ; i++)
 80012c2:	2300      	movs	r3, #0
 80012c4:	70fb      	strb	r3, [r7, #3]
 80012c6:	e00c      	b.n	80012e2 <getTemp+0x2a>
	{
		HAL_ADC_Start_DMA(&hadc1, &adc_val, 1);	//star in DMA mode and we are reading only 1 channel or 1 word
 80012c8:	2201      	movs	r2, #1
 80012ca:	494a      	ldr	r1, [pc, #296]	; (80013f4 <getTemp+0x13c>)
 80012cc:	484a      	ldr	r0, [pc, #296]	; (80013f8 <getTemp+0x140>)
 80012ce:	f000 fd0d 	bl	8001cec <HAL_ADC_Start_DMA>
		adc_val_average += adc_val;
 80012d2:	4b48      	ldr	r3, [pc, #288]	; (80013f4 <getTemp+0x13c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	607b      	str	r3, [r7, #4]
	for(uint8_t i = 0 ; i < N_SAMPLES_ADC ; i++)
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	3301      	adds	r3, #1
 80012e0:	70fb      	strb	r3, [r7, #3]
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d9ef      	bls.n	80012c8 <getTemp+0x10>
	}
	adc_val_average = (uint32_t)(adc_val_average/N_SAMPLES_ADC);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	091b      	lsrs	r3, r3, #4
 80012ec:	607b      	str	r3, [r7, #4]
		Temp_C = Temp_K - 273.15;
		return	Temp_C;
*/


		while(tempNTC100K[i].adc < adc_val_average) i++;
 80012ee:	e004      	b.n	80012fa <getTemp+0x42>
 80012f0:	4b42      	ldr	r3, [pc, #264]	; (80013fc <getTemp+0x144>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	3301      	adds	r3, #1
 80012f6:	4a41      	ldr	r2, [pc, #260]	; (80013fc <getTemp+0x144>)
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b40      	ldr	r3, [pc, #256]	; (80013fc <getTemp+0x144>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a40      	ldr	r2, [pc, #256]	; (8001400 <getTemp+0x148>)
 8001300:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fb0f 	bl	8000928 <__aeabi_ui2f>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff fd00 	bl	8000d14 <__aeabi_fcmplt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1ea      	bne.n	80012f0 <getTemp+0x38>

		if(i == NUMTEMPS)	Temp_C = tempNTC100K[i-1].temp;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <getTemp+0x144>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b19      	cmp	r3, #25
 8001320:	d109      	bne.n	8001336 <getTemp+0x7e>
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <getTemp+0x144>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3b01      	subs	r3, #1
 8001328:	4a35      	ldr	r2, [pc, #212]	; (8001400 <getTemp+0x148>)
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	4413      	add	r3, r2
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <getTemp+0x14c>)
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e058      	b.n	80013e8 <getTemp+0x130>
		else if(i == 0) Temp_C = tempNTC100K[i].temp;
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <getTemp+0x144>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <getTemp+0x98>
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <getTemp+0x144>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a2f      	ldr	r2, [pc, #188]	; (8001400 <getTemp+0x148>)
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	4413      	add	r3, r2
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4a2e      	ldr	r2, [pc, #184]	; (8001404 <getTemp+0x14c>)
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e04b      	b.n	80013e8 <getTemp+0x130>
		else
		{
			Temp_C = tempNTC100K[i-1].temp + (adc_val_average - tempNTC100K[i-1].adc) * (float)(tempNTC100K[i].temp - tempNTC100K[i-1].temp) / (float)(tempNTC100K[i].adc - tempNTC100K[i-1].adc);
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <getTemp+0x144>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a2a      	ldr	r2, [pc, #168]	; (8001400 <getTemp+0x148>)
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	4413      	add	r3, r2
 800135c:	685c      	ldr	r4, [r3, #4]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fae2 	bl	8000928 <__aeabi_ui2f>
 8001364:	4602      	mov	r2, r0
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <getTemp+0x144>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3b01      	subs	r3, #1
 800136c:	4924      	ldr	r1, [pc, #144]	; (8001400 <getTemp+0x148>)
 800136e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f7ff fa25 	bl	80007c4 <__aeabi_fsub>
 800137a:	4603      	mov	r3, r0
 800137c:	461d      	mov	r5, r3
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <getTemp+0x144>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <getTemp+0x148>)
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	4413      	add	r3, r2
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <getTemp+0x144>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	491b      	ldr	r1, [pc, #108]	; (8001400 <getTemp+0x148>)
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	4619      	mov	r1, r3
 800139a:	4610      	mov	r0, r2
 800139c:	f7ff fa12 	bl	80007c4 <__aeabi_fsub>
 80013a0:	4603      	mov	r3, r0
 80013a2:	4619      	mov	r1, r3
 80013a4:	4628      	mov	r0, r5
 80013a6:	f7ff fb17 	bl	80009d8 <__aeabi_fmul>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461d      	mov	r5, r3
 80013ae:	4b13      	ldr	r3, [pc, #76]	; (80013fc <getTemp+0x144>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <getTemp+0x148>)
 80013b4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <getTemp+0x144>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	3b01      	subs	r3, #1
 80013be:	4910      	ldr	r1, [pc, #64]	; (8001400 <getTemp+0x148>)
 80013c0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff f9fc 	bl	80007c4 <__aeabi_fsub>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4619      	mov	r1, r3
 80013d0:	4628      	mov	r0, r5
 80013d2:	f7ff fbb5 	bl	8000b40 <__aeabi_fdiv>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4619      	mov	r1, r3
 80013da:	4620      	mov	r0, r4
 80013dc:	f7ff f9f4 	bl	80007c8 <__addsf3>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <getTemp+0x14c>)
 80013e6:	601a      	str	r2, [r3, #0]
			//aux = (tempNTC100K[i].temp - tempNTC100K[i-1].temp) / ( tempNTC100K[i].adc - tempNTC100K[i-1].adc);
			//tempC = aux * (adc_val - tempNTC100K[i].adc) + tempNTC100K[i].temp;
		}

		//tempCint = (uint32_t)Temp_C;
		return	Temp_C;
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <getTemp+0x14c>)
 80013ea:	681b      	ldr	r3, [r3, #0]


}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bdb0      	pop	{r4, r5, r7, pc}
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000124 	.word	0x20000124
 80013fc:	20000094 	.word	0x20000094
 8001400:	08005348 	.word	0x08005348
 8001404:	200001f8 	.word	0x200001f8

08001408 <controlPID>:

void controlPID(void)
{
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	af00      	add	r7, sp, #0
	temperature_read = getTemp();  // First we read the real value of temperature
 800140c:	f7ff ff54 	bl	80012b8 <getTemp>
 8001410:	4603      	mov	r3, r0
 8001412:	4a6b      	ldr	r2, [pc, #428]	; (80015c0 <controlPID+0x1b8>)
 8001414:	6013      	str	r3, [r2, #0]
	tempConv = (uint32_t)temperature_read;
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <controlPID+0x1b8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fca2 	bl	8000d64 <__aeabi_f2uiz>
 8001420:	4603      	mov	r3, r0
 8001422:	4a68      	ldr	r2, [pc, #416]	; (80015c4 <controlPID+0x1bc>)
 8001424:	6013      	str	r3, [r2, #0]
//	updateLCD();

	PID_error = set_temperature - temperature_read; //Next we calculate the error between the setpoint and the real value
 8001426:	4b68      	ldr	r3, [pc, #416]	; (80015c8 <controlPID+0x1c0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fa7c 	bl	8000928 <__aeabi_ui2f>
 8001430:	4602      	mov	r2, r0
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <controlPID+0x1b8>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4619      	mov	r1, r3
 8001438:	4610      	mov	r0, r2
 800143a:	f7ff f9c3 	bl	80007c4 <__aeabi_fsub>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b62      	ldr	r3, [pc, #392]	; (80015cc <controlPID+0x1c4>)
 8001444:	601a      	str	r2, [r3, #0]
	PID_p = kp * PID_error;   //Calculate the P value
 8001446:	4b61      	ldr	r3, [pc, #388]	; (80015cc <controlPID+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f90e 	bl	800066c <__aeabi_f2d>
 8001450:	a355      	add	r3, pc, #340	; (adr r3, 80015a8 <controlPID+0x1a0>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe fe7b 	bl	8000150 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff f95b 	bl	800071c <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	4a59      	ldr	r2, [pc, #356]	; (80015d0 <controlPID+0x1c8>)
 800146a:	6013      	str	r3, [r2, #0]
	if((-3 < PID_error ) && ( PID_error < 3 ))	PID_i = PID_i + (ki * PID_error); //Calculate the I value in a range on +-3
 800146c:	4b57      	ldr	r3, [pc, #348]	; (80015cc <controlPID+0x1c4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4958      	ldr	r1, [pc, #352]	; (80015d4 <controlPID+0x1cc>)
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fc6c 	bl	8000d50 <__aeabi_fcmpgt>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d028      	beq.n	80014d0 <controlPID+0xc8>
 800147e:	4b53      	ldr	r3, [pc, #332]	; (80015cc <controlPID+0x1c4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4955      	ldr	r1, [pc, #340]	; (80015d8 <controlPID+0x1d0>)
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fc45 	bl	8000d14 <__aeabi_fcmplt>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d01f      	beq.n	80014d0 <controlPID+0xc8>
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <controlPID+0x1d4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f8e9 	bl	800066c <__aeabi_f2d>
 800149a:	4604      	mov	r4, r0
 800149c:	460d      	mov	r5, r1
 800149e:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <controlPID+0x1c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f8e2 	bl	800066c <__aeabi_f2d>
 80014a8:	a341      	add	r3, pc, #260	; (adr r3, 80015b0 <controlPID+0x1a8>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7fe fe4f 	bl	8000150 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4620      	mov	r0, r4
 80014b8:	4629      	mov	r1, r5
 80014ba:	f7fe ff79 	bl	80003b0 <__adddf3>
 80014be:	4602      	mov	r2, r0
 80014c0:	460b      	mov	r3, r1
 80014c2:	4610      	mov	r0, r2
 80014c4:	4619      	mov	r1, r3
 80014c6:	f7ff f929 	bl	800071c <__aeabi_d2f>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a43      	ldr	r2, [pc, #268]	; (80015dc <controlPID+0x1d4>)
 80014ce:	6013      	str	r3, [r2, #0]

	//For derivative we need real time to calculate speed change rate
	timePrev = Time; // the previous time is stored before the actual time read
 80014d0:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <controlPID+0x1d8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a43      	ldr	r2, [pc, #268]	; (80015e4 <controlPID+0x1dc>)
 80014d6:	6013      	str	r3, [r2, #0]
	Time = HAL_GetTick();	// actual time read
 80014d8:	f000 fb02 	bl	8001ae0 <HAL_GetTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fa22 	bl	8000928 <__aeabi_ui2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a3e      	ldr	r2, [pc, #248]	; (80015e0 <controlPID+0x1d8>)
 80014e8:	6013      	str	r3, [r2, #0]
	elapsedTime = (Time - timePrev) / 1000;
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <controlPID+0x1d8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3d      	ldr	r2, [pc, #244]	; (80015e4 <controlPID+0x1dc>)
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f965 	bl	80007c4 <__aeabi_fsub>
 80014fa:	4603      	mov	r3, r0
 80014fc:	493a      	ldr	r1, [pc, #232]	; (80015e8 <controlPID+0x1e0>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fb1e 	bl	8000b40 <__aeabi_fdiv>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b38      	ldr	r3, [pc, #224]	; (80015ec <controlPID+0x1e4>)
 800150a:	601a      	str	r2, [r3, #0]
	PID_d = kd * ((PID_error - previous_error)/elapsedTime); //Now we can calculate the D value
 800150c:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <controlPID+0x1c4>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <controlPID+0x1e8>)
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff f954 	bl	80007c4 <__aeabi_fsub>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <controlPID+0x1e4>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4610      	mov	r0, r2
 8001528:	f7ff fb0a 	bl	8000b40 <__aeabi_fdiv>
 800152c:	4603      	mov	r3, r0
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f89c 	bl	800066c <__aeabi_f2d>
 8001534:	a320      	add	r3, pc, #128	; (adr r3, 80015b8 <controlPID+0x1b0>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7fe fe09 	bl	8000150 <__aeabi_dmul>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff f8e9 	bl	800071c <__aeabi_d2f>
 800154a:	4603      	mov	r3, r0
 800154c:	4a29      	ldr	r2, [pc, #164]	; (80015f4 <controlPID+0x1ec>)
 800154e:	6013      	str	r3, [r2, #0]
	PID_value =(uint32_t)(PID_p + PID_i + PID_d); //Final total PID value is the sum of P + I + D
 8001550:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <controlPID+0x1c8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a21      	ldr	r2, [pc, #132]	; (80015dc <controlPID+0x1d4>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f934 	bl	80007c8 <__addsf3>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <controlPID+0x1ec>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f7ff f92c 	bl	80007c8 <__addsf3>
 8001570:	4603      	mov	r3, r0
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbf6 	bl	8000d64 <__aeabi_f2uiz>
 8001578:	4603      	mov	r3, r0
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <controlPID+0x1f0>)
 800157c:	6013      	str	r3, [r2, #0]

	//We define PWM range between 0 and 255
	if(PID_value < 0) PID_value = 0;
	else if(PID_value > 255)  PID_value = 255;
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <controlPID+0x1f0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2bff      	cmp	r3, #255	; 0xff
 8001584:	d902      	bls.n	800158c <controlPID+0x184>
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <controlPID+0x1f0>)
 8001588:	22ff      	movs	r2, #255	; 0xff
 800158a:	601a      	str	r2, [r3, #0]
	updateLCD();
 800158c:	f000 f838 	bl	8001600 <updateLCD>
	//Now we can write the PWM signal to the mosfet on digital pin D3
	htim1.Instance->CCR1 = PID_value;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <controlPID+0x1f4>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a18      	ldr	r2, [pc, #96]	; (80015f8 <controlPID+0x1f0>)
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	635a      	str	r2, [r3, #52]	; 0x34
	//ESCRIBE EL VALOR DEL PWM

	previous_error = PID_error;     //Remember to store the previous error for next loop.
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <controlPID+0x1c4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <controlPID+0x1e8>)
 80015a0:	6013      	str	r3, [r2, #0]

}
 80015a2:	bf00      	nop
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	33333333 	.word	0x33333333
 80015ac:	40223333 	.word	0x40223333
 80015b0:	33333333 	.word	0x33333333
 80015b4:	3fd33333 	.word	0x3fd33333
 80015b8:	cccccccd 	.word	0xcccccccd
 80015bc:	3ffccccc 	.word	0x3ffccccc
 80015c0:	200001f4 	.word	0x200001f4
 80015c4:	20000120 	.word	0x20000120
 80015c8:	20000004 	.word	0x20000004
 80015cc:	20000098 	.word	0x20000098
 80015d0:	200000a4 	.word	0x200000a4
 80015d4:	c0400000 	.word	0xc0400000
 80015d8:	40400000 	.word	0x40400000
 80015dc:	200000a8 	.word	0x200000a8
 80015e0:	200001e8 	.word	0x200001e8
 80015e4:	2000011c 	.word	0x2000011c
 80015e8:	447a0000 	.word	0x447a0000
 80015ec:	200000bc 	.word	0x200000bc
 80015f0:	2000009c 	.word	0x2000009c
 80015f4:	200000ac 	.word	0x200000ac
 80015f8:	200000a0 	.word	0x200000a0
 80015fc:	200001a0 	.word	0x200001a0

08001600 <updateLCD>:

void updateLCD(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0
	char val1[20];
	char val2[20];
	sprintf(val1,"%lu C / %lu C",tempConv,set_temperature);
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <updateLCD+0x6c>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <updateLCD+0x70>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f107 0014 	add.w	r0, r7, #20
 8001612:	4918      	ldr	r1, [pc, #96]	; (8001674 <updateLCD+0x74>)
 8001614:	f003 fa36 	bl	8004a84 <siprintf>
	sprintf(val2,"%lu",PID_value);
 8001618:	4b17      	ldr	r3, [pc, #92]	; (8001678 <updateLCD+0x78>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	463b      	mov	r3, r7
 800161e:	4917      	ldr	r1, [pc, #92]	; (800167c <updateLCD+0x7c>)
 8001620:	4618      	mov	r0, r3
 8001622:	f003 fa2f 	bl	8004a84 <siprintf>
	lcd_send_cmd(0x80|0x00);	//primer linea
 8001626:	2080      	movs	r0, #128	; 0x80
 8001628:	f7ff fbbc 	bl	8000da4 <lcd_send_cmd>
	lcd_send_string("T actual / T target");
 800162c:	4814      	ldr	r0, [pc, #80]	; (8001680 <updateLCD+0x80>)
 800162e:	f7ff fc53 	bl	8000ed8 <lcd_send_string>
  	lcd_send_cmd(0x80|0x40);	//segunda linea
 8001632:	20c0      	movs	r0, #192	; 0xc0
 8001634:	f7ff fbb6 	bl	8000da4 <lcd_send_cmd>
  	lcd_send_string(val1);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fc4b 	bl	8000ed8 <lcd_send_string>
	lcd_send_cmd(0x80|0x14);	//tercera linea
 8001642:	2094      	movs	r0, #148	; 0x94
 8001644:	f7ff fbae 	bl	8000da4 <lcd_send_cmd>
	lcd_send_string(val2);
 8001648:	463b      	mov	r3, r7
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fc44 	bl	8000ed8 <lcd_send_string>
	  	  lcd_send_cmd(0x80|0x14);	//tercera linea
	  	  lcd_send_string("TF CESE");
	  	  lcd_send_cmd(0x80|0x54);	//cuarta linea
	  	  lcd_send_string("2022");
	  */
  	HAL_Delay(1000);
 8001650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001654:	f000 fa4e 	bl	8001af4 <HAL_Delay>
  	lcd_send_cmd (CLEAR_LCD);  // clear display
 8001658:	2001      	movs	r0, #1
 800165a:	f7ff fba3 	bl	8000da4 <lcd_send_cmd>
  	HAL_Delay(1);
 800165e:	2001      	movs	r0, #1
 8001660:	f000 fa48 	bl	8001af4 <HAL_Delay>
}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000120 	.word	0x20000120
 8001670:	20000004 	.word	0x20000004
 8001674:	08005310 	.word	0x08005310
 8001678:	200000a0 	.word	0x200000a0
 800167c:	08005320 	.word	0x08005320
 8001680:	08005324 	.word	0x08005324

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <HAL_MspInit+0x5c>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <HAL_MspInit+0x5c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	6193      	str	r3, [r2, #24]
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_MspInit+0x5c>)
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x5c>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a0e      	ldr	r2, [pc, #56]	; (80016ec <HAL_MspInit+0x5c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <HAL_MspInit+0x5c>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_MspInit+0x60>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <HAL_MspInit+0x60>)
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40010000 	.word	0x40010000

080016f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a28      	ldr	r2, [pc, #160]	; (80017b0 <HAL_ADC_MspInit+0xbc>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d149      	bne.n	80017a8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001714:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <HAL_ADC_MspInit+0xc0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a26      	ldr	r2, [pc, #152]	; (80017b4 <HAL_ADC_MspInit+0xc0>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <HAL_ADC_MspInit+0xc0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b21      	ldr	r3, [pc, #132]	; (80017b4 <HAL_ADC_MspInit+0xc0>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <HAL_ADC_MspInit+0xc0>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_ADC_MspInit+0xc0>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC1_in1_Pin;
 8001744:	2302      	movs	r3, #2
 8001746:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001748:	2303      	movs	r3, #3
 800174a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(ADC1_in1_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 0310 	add.w	r3, r7, #16
 8001750:	4619      	mov	r1, r3
 8001752:	4819      	ldr	r0, [pc, #100]	; (80017b8 <HAL_ADC_MspInit+0xc4>)
 8001754:	f001 f8ba 	bl	80028cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_ADC_MspInit+0xcc>)
 800175c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 8001772:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001776:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 800177a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 8001782:	2220      	movs	r2, #32
 8001784:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001786:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800178c:	480b      	ldr	r0, [pc, #44]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 800178e:	f000 feaf 	bl	80024f0 <HAL_DMA_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001798:	f7ff ff74 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <HAL_ADC_MspInit+0xc8>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017a8:	bf00      	nop
 80017aa:	3720      	adds	r7, #32
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40012400 	.word	0x40012400
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010800 	.word	0x40010800
 80017bc:	20000158 	.word	0x20000158
 80017c0:	40020008 	.word	0x40020008

080017c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	; 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <HAL_I2C_MspInit+0x90>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d132      	bne.n	800184a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b1c      	ldr	r3, [pc, #112]	; (8001858 <HAL_I2C_MspInit+0x94>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a1b      	ldr	r2, [pc, #108]	; (8001858 <HAL_I2C_MspInit+0x94>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b19      	ldr	r3, [pc, #100]	; (8001858 <HAL_I2C_MspInit+0x94>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <HAL_I2C_MspInit+0x98>)
 8001812:	f001 f85b 	bl	80028cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_I2C_MspInit+0x9c>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_I2C_MspInit+0x9c>)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <HAL_I2C_MspInit+0x94>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_I2C_MspInit+0x94>)
 8001838:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <HAL_I2C_MspInit+0x94>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800184a:	bf00      	nop
 800184c:	3728      	adds	r7, #40	; 0x28
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40005400 	.word	0x40005400
 8001858:	40021000 	.word	0x40021000
 800185c:	40010c00 	.word	0x40010c00
 8001860:	40010000 	.word	0x40010000

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <HAL_TIM_Base_MspInit+0x34>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d10b      	bne.n	800188e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <HAL_TIM_Base_MspInit+0x38>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a08      	ldr	r2, [pc, #32]	; (800189c <HAL_TIM_Base_MspInit+0x38>)
 800187c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_TIM_Base_MspInit+0x38>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	40012c00 	.word	0x40012c00
 800189c:	40021000 	.word	0x40021000

080018a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a10      	ldr	r2, [pc, #64]	; (80018fc <HAL_TIM_MspPostInit+0x5c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d118      	bne.n	80018f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_TIM_MspPostInit+0x60>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_TIM_MspPostInit+0x60>)
 80018c6:	f043 0304 	orr.w	r3, r3, #4
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <HAL_TIM_MspPostInit+0x60>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = pwm_PID_Pin;
 80018d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2302      	movs	r3, #2
 80018e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(pwm_PID_GPIO_Port, &GPIO_InitStruct);
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_TIM_MspPostInit+0x64>)
 80018ee:	f000 ffed 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40012c00 	.word	0x40012c00
 8001900:	40021000 	.word	0x40021000
 8001904:	40010800 	.word	0x40010800

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 f8b5 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <DMA1_Channel1_IRQHandler+0x10>)
 800195e:	f000 fe81 	bl	8002664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000158 	.word	0x20000158

0800196c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001974:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <_sbrk+0x5c>)
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <_sbrk+0x60>)
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d102      	bne.n	800198e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <_sbrk+0x64>)
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <_sbrk+0x68>)
 800198c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <_sbrk+0x64>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	429a      	cmp	r2, r3
 800199a:	d207      	bcs.n	80019ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800199c:	f003 f840 	bl	8004a20 <__errno>
 80019a0:	4603      	mov	r3, r0
 80019a2:	220c      	movs	r2, #12
 80019a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019aa:	e009      	b.n	80019c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <_sbrk+0x64>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <_sbrk+0x64>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4413      	add	r3, r2
 80019ba:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <_sbrk+0x64>)
 80019bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20005000 	.word	0x20005000
 80019cc:	00000400 	.word	0x00000400
 80019d0:	200000b0 	.word	0x200000b0
 80019d4:	20000210 	.word	0x20000210

080019d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e4:	480c      	ldr	r0, [pc, #48]	; (8001a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019e6:	490d      	ldr	r1, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019fc:	4c0a      	ldr	r4, [pc, #40]	; (8001a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a0a:	f7ff ffe5 	bl	80019d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f003 f80d 	bl	8004a2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a12:	f7ff fa77 	bl	8000f04 <main>
  bx lr
 8001a16:	4770      	bx	lr
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001a20:	08005464 	.word	0x08005464
  ldr r2, =_sbss
 8001a24:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001a28:	20000210 	.word	0x20000210

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x28>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x28>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 fd13 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fe20 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 fd2b 	bl	80024d6 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a98:	f000 fcf3 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000010 	.word	0x20000010
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x20>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_IncTick+0x20>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000010 	.word	0x20000010
 8001adc:	200001fc 	.word	0x200001fc

08001ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_GetTick+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	200001fc 	.word	0x200001fc

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_Delay+0x44>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffe0 	bl	8001ae0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000010 	.word	0x20000010

08001b3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b44:	2300      	movs	r3, #0
 8001b46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0be      	b.n	8001cdc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff fdba 	bl	80016f4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 faff 	bl	8002184 <ADC_ConversionStop_Disable>
 8001b86:	4603      	mov	r3, r0
 8001b88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	f003 0310 	and.w	r3, r3, #16
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f040 8099 	bne.w	8001cca <HAL_ADC_Init+0x18e>
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 8095 	bne.w	8001cca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ba8:	f023 0302 	bic.w	r3, r3, #2
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001bc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_Init+0xa2>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d102      	bne.n	8001be4 <HAL_ADC_Init+0xa8>
 8001bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_Init+0xaa>
 8001be4:	2300      	movs	r3, #0
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	7d1b      	ldrb	r3, [r3, #20]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d119      	bne.n	8001c28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	7b1b      	ldrb	r3, [r3, #12]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d109      	bne.n	8001c10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	035a      	lsls	r2, r3, #13
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e00b      	b.n	8001c28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	f043 0220 	orr.w	r2, r3, #32
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <HAL_ADC_Init+0x1a8>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	68b9      	ldr	r1, [r7, #8]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c58:	d003      	beq.n	8001c62 <HAL_ADC_Init+0x126>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d104      	bne.n	8001c6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	051b      	lsls	r3, r3, #20
 8001c6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	4b18      	ldr	r3, [pc, #96]	; (8001ce8 <HAL_ADC_Init+0x1ac>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ca6:	e018      	b.n	8001cda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	f023 0312 	bic.w	r3, r3, #18
 8001cb0:	f043 0210 	orr.w	r2, r3, #16
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cc8:	e007      	b.n	8001cda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	f043 0210 	orr.w	r2, r3, #16
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ce8:	ff1f0efe 	.word	0xff1f0efe

08001cec <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a64      	ldr	r2, [pc, #400]	; (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_ADC_Start_DMA+0x24>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_ADC_Start_DMA+0x1ac>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d106      	bne.n	8001d1e <HAL_ADC_Start_DMA+0x32>
 8001d10:	4b60      	ldr	r3, [pc, #384]	; (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f040 80b3 	bne.w	8001e84 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d101      	bne.n	8001d2c <HAL_ADC_Start_DMA+0x40>
 8001d28:	2302      	movs	r3, #2
 8001d2a:	e0ae      	b.n	8001e8a <HAL_ADC_Start_DMA+0x19e>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f000 f9cb 	bl	80020d0 <ADC_Enable>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d3e:	7dfb      	ldrb	r3, [r7, #23]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f040 809a 	bne.w	8001e7a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d4e:	f023 0301 	bic.w	r3, r3, #1
 8001d52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a4e      	ldr	r2, [pc, #312]	; (8001e98 <HAL_ADC_Start_DMA+0x1ac>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d105      	bne.n	8001d70 <HAL_ADC_Start_DMA+0x84>
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d115      	bne.n	8001d9c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d026      	beq.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d9a:	e01d      	b.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a39      	ldr	r2, [pc, #228]	; (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_Start_DMA+0xd0>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <HAL_ADC_Start_DMA+0x1ac>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d10d      	bne.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_ADC_Start_DMA+0x1a8>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dcc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de8:	f023 0206 	bic.w	r2, r3, #6
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
 8001df0:	e002      	b.n	8001df8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a25      	ldr	r2, [pc, #148]	; (8001e9c <HAL_ADC_Start_DMA+0x1b0>)
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_ADC_Start_DMA+0x1b4>)
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <HAL_ADC_Start_DMA+0x1b8>)
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0202 	mvn.w	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e30:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a18      	ldr	r0, [r3, #32]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	334c      	adds	r3, #76	; 0x4c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f000 fbaf 	bl	80025a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001e50:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001e54:	d108      	bne.n	8001e68 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001e64:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e66:	e00f      	b.n	8001e88 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e76:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e78:	e006      	b.n	8001e88 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001e82:	e001      	b.n	8001e88 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40012400 	.word	0x40012400
 8001e98:	40012800 	.word	0x40012800
 8001e9c:	08002207 	.word	0x08002207
 8001ea0:	08002283 	.word	0x08002283
 8001ea4:	0800229f 	.word	0x0800229f

08001ea8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x20>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0dc      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1da>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b06      	cmp	r3, #6
 8001f0e:	d81c      	bhi.n	8001f4a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b05      	subs	r3, #5
 8001f22:	221f      	movs	r2, #31
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	4019      	ands	r1, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	3b05      	subs	r3, #5
 8001f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	635a      	str	r2, [r3, #52]	; 0x34
 8001f48:	e03c      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d81c      	bhi.n	8001f8c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b23      	subs	r3, #35	; 0x23
 8001f64:	221f      	movs	r2, #31
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	4019      	ands	r1, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b23      	subs	r3, #35	; 0x23
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8a:	e01b      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b41      	subs	r3, #65	; 0x41
 8001f9e:	221f      	movs	r2, #31
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	4019      	ands	r1, r3
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6818      	ldr	r0, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3b41      	subs	r3, #65	; 0x41
 8001fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d91c      	bls.n	8002006 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68d9      	ldr	r1, [r3, #12]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	3b1e      	subs	r3, #30
 8001fde:	2207      	movs	r2, #7
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6898      	ldr	r0, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	3b1e      	subs	r3, #30
 8001ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
 8002004:	e019      	b.n	800203a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6919      	ldr	r1, [r3, #16]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	4019      	ands	r1, r3
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6898      	ldr	r0, [r3, #8]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	fa00 f203 	lsl.w	r2, r0, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	430a      	orrs	r2, r1
 8002038:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d003      	beq.n	800204a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002046:	2b11      	cmp	r3, #17
 8002048:	d132      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d125      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d126      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002070:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b10      	cmp	r3, #16
 8002078:	d11a      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_ADC_ConfigChannel+0x1e8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a13      	ldr	r2, [pc, #76]	; (80020cc <HAL_ADC_ConfigChannel+0x1ec>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	0c9a      	lsrs	r2, r3, #18
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002090:	e002      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3b01      	subs	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f9      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x1b2>
 800209e:	e007      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr
 80020c4:	40012400 	.word	0x40012400
 80020c8:	20000008 	.word	0x20000008
 80020cc:	431bde83 	.word	0x431bde83

080020d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d040      	beq.n	8002170 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020fe:	4b1f      	ldr	r3, [pc, #124]	; (800217c <ADC_Enable+0xac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1f      	ldr	r2, [pc, #124]	; (8002180 <ADC_Enable+0xb0>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9b      	lsrs	r3, r3, #18
 800210a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800210c:	e002      	b.n	8002114 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3b01      	subs	r3, #1
 8002112:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f9      	bne.n	800210e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800211a:	f7ff fce1 	bl	8001ae0 <HAL_GetTick>
 800211e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002120:	e01f      	b.n	8002162 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002122:	f7ff fcdd 	bl	8001ae0 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d918      	bls.n	8002162 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d011      	beq.n	8002162 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	f043 0210 	orr.w	r2, r3, #16
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e007      	b.n	8002172 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d1d8      	bne.n	8002122 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008
 8002180:	431bde83 	.word	0x431bde83

08002184 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b01      	cmp	r3, #1
 800219c:	d12e      	bne.n	80021fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021ae:	f7ff fc97 	bl	8001ae0 <HAL_GetTick>
 80021b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021b4:	e01b      	b.n	80021ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021b6:	f7ff fc93 	bl	8001ae0 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d914      	bls.n	80021ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d10d      	bne.n	80021ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e007      	b.n	80021fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d0dc      	beq.n	80021b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002212:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800221c:	2b00      	cmp	r3, #0
 800221e:	d127      	bne.n	8002270 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002236:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800223a:	d115      	bne.n	8002268 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002240:	2b00      	cmp	r3, #0
 8002242:	d111      	bne.n	8002268 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d105      	bne.n	8002268 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	f043 0201 	orr.w	r2, r3, #1
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff fe1d 	bl	8001ea8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800226e:	e004      	b.n	800227a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fe12 	bl	8001eba <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f043 0204 	orr.w	r2, r3, #4
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff fe01 	bl	8001ecc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4906      	ldr	r1, [pc, #24]	; (800236c <__NVIC_EnableIRQ+0x34>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	; (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	; (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	; 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800244c:	f7ff ff90 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff2d 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff42 	bl	800231c <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff90 	bl	80023c4 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5f 	bl	8002370 <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff35 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e043      	b.n	800258e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	461a      	mov	r2, r3
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_DMA_Init+0xa8>)
 800250e:	4413      	add	r3, r2
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_DMA_Init+0xac>)
 8002512:	fba2 2303 	umull	r2, r3, r2, r3
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_DMA_Init+0xb0>)
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2202      	movs	r2, #2
 8002528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800253a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800253e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	bffdfff8 	.word	0xbffdfff8
 800259c:	cccccccd 	.word	0xcccccccd
 80025a0:	40020000 	.word	0x40020000

080025a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d101      	bne.n	80025c4 <HAL_DMA_Start_IT+0x20>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e04a      	b.n	800265a <HAL_DMA_Start_IT+0xb6>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d13a      	bne.n	800264c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0201 	bic.w	r2, r2, #1
 80025f2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f938 	bl	8002870 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 020e 	orr.w	r2, r2, #14
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e00f      	b.n	800263a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0204 	bic.w	r2, r2, #4
 8002628:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 020a 	orr.w	r2, r2, #10
 8002638:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	e005      	b.n	8002658 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002654:	2302      	movs	r3, #2
 8002656:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	2204      	movs	r2, #4
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d04f      	beq.n	800272c <HAL_DMA_IRQHandler+0xc8>
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d04a      	beq.n	800272c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_DMA_IRQHandler+0x1f0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d029      	beq.n	8002712 <HAL_DMA_IRQHandler+0xae>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a65      	ldr	r2, [pc, #404]	; (8002858 <HAL_DMA_IRQHandler+0x1f4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d022      	beq.n	800270e <HAL_DMA_IRQHandler+0xaa>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a63      	ldr	r2, [pc, #396]	; (800285c <HAL_DMA_IRQHandler+0x1f8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d01a      	beq.n	8002708 <HAL_DMA_IRQHandler+0xa4>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a62      	ldr	r2, [pc, #392]	; (8002860 <HAL_DMA_IRQHandler+0x1fc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d012      	beq.n	8002702 <HAL_DMA_IRQHandler+0x9e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_DMA_IRQHandler+0x200>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d00a      	beq.n	80026fc <HAL_DMA_IRQHandler+0x98>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a5f      	ldr	r2, [pc, #380]	; (8002868 <HAL_DMA_IRQHandler+0x204>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d102      	bne.n	80026f6 <HAL_DMA_IRQHandler+0x92>
 80026f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026f4:	e00e      	b.n	8002714 <HAL_DMA_IRQHandler+0xb0>
 80026f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026fa:	e00b      	b.n	8002714 <HAL_DMA_IRQHandler+0xb0>
 80026fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002700:	e008      	b.n	8002714 <HAL_DMA_IRQHandler+0xb0>
 8002702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002706:	e005      	b.n	8002714 <HAL_DMA_IRQHandler+0xb0>
 8002708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800270c:	e002      	b.n	8002714 <HAL_DMA_IRQHandler+0xb0>
 800270e:	2340      	movs	r3, #64	; 0x40
 8002710:	e000      	b.n	8002714 <HAL_DMA_IRQHandler+0xb0>
 8002712:	2304      	movs	r3, #4
 8002714:	4a55      	ldr	r2, [pc, #340]	; (800286c <HAL_DMA_IRQHandler+0x208>)
 8002716:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8094 	beq.w	800284a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800272a:	e08e      	b.n	800284a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	2202      	movs	r2, #2
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d056      	beq.n	80027ea <HAL_DMA_IRQHandler+0x186>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d051      	beq.n	80027ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0320 	and.w	r3, r3, #32
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10b      	bne.n	800276c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 020a 	bic.w	r2, r2, #10
 8002762:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a38      	ldr	r2, [pc, #224]	; (8002854 <HAL_DMA_IRQHandler+0x1f0>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d029      	beq.n	80027ca <HAL_DMA_IRQHandler+0x166>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a37      	ldr	r2, [pc, #220]	; (8002858 <HAL_DMA_IRQHandler+0x1f4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d022      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x162>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a35      	ldr	r2, [pc, #212]	; (800285c <HAL_DMA_IRQHandler+0x1f8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01a      	beq.n	80027c0 <HAL_DMA_IRQHandler+0x15c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a34      	ldr	r2, [pc, #208]	; (8002860 <HAL_DMA_IRQHandler+0x1fc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d012      	beq.n	80027ba <HAL_DMA_IRQHandler+0x156>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a32      	ldr	r2, [pc, #200]	; (8002864 <HAL_DMA_IRQHandler+0x200>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00a      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x150>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_DMA_IRQHandler+0x204>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d102      	bne.n	80027ae <HAL_DMA_IRQHandler+0x14a>
 80027a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027ac:	e00e      	b.n	80027cc <HAL_DMA_IRQHandler+0x168>
 80027ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027b2:	e00b      	b.n	80027cc <HAL_DMA_IRQHandler+0x168>
 80027b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027b8:	e008      	b.n	80027cc <HAL_DMA_IRQHandler+0x168>
 80027ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027be:	e005      	b.n	80027cc <HAL_DMA_IRQHandler+0x168>
 80027c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027c4:	e002      	b.n	80027cc <HAL_DMA_IRQHandler+0x168>
 80027c6:	2320      	movs	r3, #32
 80027c8:	e000      	b.n	80027cc <HAL_DMA_IRQHandler+0x168>
 80027ca:	2302      	movs	r3, #2
 80027cc:	4a27      	ldr	r2, [pc, #156]	; (800286c <HAL_DMA_IRQHandler+0x208>)
 80027ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d034      	beq.n	800284a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80027e8:	e02f      	b.n	800284a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	2208      	movs	r2, #8
 80027f0:	409a      	lsls	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d028      	beq.n	800284c <HAL_DMA_IRQHandler+0x1e8>
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d023      	beq.n	800284c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 020e 	bic.w	r2, r2, #14
 8002812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	2101      	movs	r1, #1
 800281e:	fa01 f202 	lsl.w	r2, r1, r2
 8002822:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	2b00      	cmp	r3, #0
 8002840:	d004      	beq.n	800284c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
    }
  }
  return;
 800284a:	bf00      	nop
 800284c:	bf00      	nop
}
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40020008 	.word	0x40020008
 8002858:	4002001c 	.word	0x4002001c
 800285c:	40020030 	.word	0x40020030
 8002860:	40020044 	.word	0x40020044
 8002864:	40020058 	.word	0x40020058
 8002868:	4002006c 	.word	0x4002006c
 800286c:	40020000 	.word	0x40020000

08002870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	2101      	movs	r1, #1
 8002888:	fa01 f202 	lsl.w	r2, r1, r2
 800288c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b10      	cmp	r3, #16
 800289c:	d108      	bne.n	80028b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028ae:	e007      	b.n	80028c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b08b      	sub	sp, #44	; 0x2c
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028de:	e169      	b.n	8002bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028e0:	2201      	movs	r2, #1
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	f040 8158 	bne.w	8002bae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	4a9a      	ldr	r2, [pc, #616]	; (8002b6c <HAL_GPIO_Init+0x2a0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d05e      	beq.n	80029c6 <HAL_GPIO_Init+0xfa>
 8002908:	4a98      	ldr	r2, [pc, #608]	; (8002b6c <HAL_GPIO_Init+0x2a0>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d875      	bhi.n	80029fa <HAL_GPIO_Init+0x12e>
 800290e:	4a98      	ldr	r2, [pc, #608]	; (8002b70 <HAL_GPIO_Init+0x2a4>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d058      	beq.n	80029c6 <HAL_GPIO_Init+0xfa>
 8002914:	4a96      	ldr	r2, [pc, #600]	; (8002b70 <HAL_GPIO_Init+0x2a4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d86f      	bhi.n	80029fa <HAL_GPIO_Init+0x12e>
 800291a:	4a96      	ldr	r2, [pc, #600]	; (8002b74 <HAL_GPIO_Init+0x2a8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d052      	beq.n	80029c6 <HAL_GPIO_Init+0xfa>
 8002920:	4a94      	ldr	r2, [pc, #592]	; (8002b74 <HAL_GPIO_Init+0x2a8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d869      	bhi.n	80029fa <HAL_GPIO_Init+0x12e>
 8002926:	4a94      	ldr	r2, [pc, #592]	; (8002b78 <HAL_GPIO_Init+0x2ac>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d04c      	beq.n	80029c6 <HAL_GPIO_Init+0xfa>
 800292c:	4a92      	ldr	r2, [pc, #584]	; (8002b78 <HAL_GPIO_Init+0x2ac>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d863      	bhi.n	80029fa <HAL_GPIO_Init+0x12e>
 8002932:	4a92      	ldr	r2, [pc, #584]	; (8002b7c <HAL_GPIO_Init+0x2b0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d046      	beq.n	80029c6 <HAL_GPIO_Init+0xfa>
 8002938:	4a90      	ldr	r2, [pc, #576]	; (8002b7c <HAL_GPIO_Init+0x2b0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d85d      	bhi.n	80029fa <HAL_GPIO_Init+0x12e>
 800293e:	2b12      	cmp	r3, #18
 8002940:	d82a      	bhi.n	8002998 <HAL_GPIO_Init+0xcc>
 8002942:	2b12      	cmp	r3, #18
 8002944:	d859      	bhi.n	80029fa <HAL_GPIO_Init+0x12e>
 8002946:	a201      	add	r2, pc, #4	; (adr r2, 800294c <HAL_GPIO_Init+0x80>)
 8002948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294c:	080029c7 	.word	0x080029c7
 8002950:	080029a1 	.word	0x080029a1
 8002954:	080029b3 	.word	0x080029b3
 8002958:	080029f5 	.word	0x080029f5
 800295c:	080029fb 	.word	0x080029fb
 8002960:	080029fb 	.word	0x080029fb
 8002964:	080029fb 	.word	0x080029fb
 8002968:	080029fb 	.word	0x080029fb
 800296c:	080029fb 	.word	0x080029fb
 8002970:	080029fb 	.word	0x080029fb
 8002974:	080029fb 	.word	0x080029fb
 8002978:	080029fb 	.word	0x080029fb
 800297c:	080029fb 	.word	0x080029fb
 8002980:	080029fb 	.word	0x080029fb
 8002984:	080029fb 	.word	0x080029fb
 8002988:	080029fb 	.word	0x080029fb
 800298c:	080029fb 	.word	0x080029fb
 8002990:	080029a9 	.word	0x080029a9
 8002994:	080029bd 	.word	0x080029bd
 8002998:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_GPIO_Init+0x2b4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800299e:	e02c      	b.n	80029fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	623b      	str	r3, [r7, #32]
          break;
 80029a6:	e029      	b.n	80029fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	3304      	adds	r3, #4
 80029ae:	623b      	str	r3, [r7, #32]
          break;
 80029b0:	e024      	b.n	80029fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	3308      	adds	r3, #8
 80029b8:	623b      	str	r3, [r7, #32]
          break;
 80029ba:	e01f      	b.n	80029fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	330c      	adds	r3, #12
 80029c2:	623b      	str	r3, [r7, #32]
          break;
 80029c4:	e01a      	b.n	80029fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d102      	bne.n	80029d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ce:	2304      	movs	r3, #4
 80029d0:	623b      	str	r3, [r7, #32]
          break;
 80029d2:	e013      	b.n	80029fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029dc:	2308      	movs	r3, #8
 80029de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69fa      	ldr	r2, [r7, #28]
 80029e4:	611a      	str	r2, [r3, #16]
          break;
 80029e6:	e009      	b.n	80029fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029e8:	2308      	movs	r3, #8
 80029ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	615a      	str	r2, [r3, #20]
          break;
 80029f2:	e003      	b.n	80029fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
          break;
 80029f8:	e000      	b.n	80029fc <HAL_GPIO_Init+0x130>
          break;
 80029fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	2bff      	cmp	r3, #255	; 0xff
 8002a00:	d801      	bhi.n	8002a06 <HAL_GPIO_Init+0x13a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	e001      	b.n	8002a0a <HAL_GPIO_Init+0x13e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	2bff      	cmp	r3, #255	; 0xff
 8002a10:	d802      	bhi.n	8002a18 <HAL_GPIO_Init+0x14c>
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	e002      	b.n	8002a1e <HAL_GPIO_Init+0x152>
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	3b08      	subs	r3, #8
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	210f      	movs	r1, #15
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	401a      	ands	r2, r3
 8002a30:	6a39      	ldr	r1, [r7, #32]
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	fa01 f303 	lsl.w	r3, r1, r3
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80b1 	beq.w	8002bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a4c:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <HAL_GPIO_Init+0x2b8>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	4a4c      	ldr	r2, [pc, #304]	; (8002b84 <HAL_GPIO_Init+0x2b8>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6193      	str	r3, [r2, #24]
 8002a58:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_GPIO_Init+0x2b8>)
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a64:	4a48      	ldr	r2, [pc, #288]	; (8002b88 <HAL_GPIO_Init+0x2bc>)
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	220f      	movs	r2, #15
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	68fa      	ldr	r2, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a40      	ldr	r2, [pc, #256]	; (8002b8c <HAL_GPIO_Init+0x2c0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_GPIO_Init+0x1ec>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a3f      	ldr	r2, [pc, #252]	; (8002b90 <HAL_GPIO_Init+0x2c4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00d      	beq.n	8002ab4 <HAL_GPIO_Init+0x1e8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a3e      	ldr	r2, [pc, #248]	; (8002b94 <HAL_GPIO_Init+0x2c8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <HAL_GPIO_Init+0x1e4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a3d      	ldr	r2, [pc, #244]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_GPIO_Init+0x1e0>
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e006      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002aac:	2304      	movs	r3, #4
 8002aae:	e004      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e002      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_GPIO_Init+0x1ee>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	f002 0203 	and.w	r2, r2, #3
 8002ac0:	0092      	lsls	r2, r2, #2
 8002ac2:	4093      	lsls	r3, r2
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002aca:	492f      	ldr	r1, [pc, #188]	; (8002b88 <HAL_GPIO_Init+0x2bc>)
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	089b      	lsrs	r3, r3, #2
 8002ad0:	3302      	adds	r3, #2
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d006      	beq.n	8002af2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	492c      	ldr	r1, [pc, #176]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	600b      	str	r3, [r1, #0]
 8002af0:	e006      	b.n	8002b00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	4928      	ldr	r1, [pc, #160]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4922      	ldr	r1, [pc, #136]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b1a:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	491e      	ldr	r1, [pc, #120]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b34:	4b19      	ldr	r3, [pc, #100]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4918      	ldr	r1, [pc, #96]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4914      	ldr	r1, [pc, #80]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d021      	beq.n	8002ba0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60cb      	str	r3, [r1, #12]
 8002b68:	e021      	b.n	8002bae <HAL_GPIO_Init+0x2e2>
 8002b6a:	bf00      	nop
 8002b6c:	10320000 	.word	0x10320000
 8002b70:	10310000 	.word	0x10310000
 8002b74:	10220000 	.word	0x10220000
 8002b78:	10210000 	.word	0x10210000
 8002b7c:	10120000 	.word	0x10120000
 8002b80:	10110000 	.word	0x10110000
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010000 	.word	0x40010000
 8002b8c:	40010800 	.word	0x40010800
 8002b90:	40010c00 	.word	0x40010c00
 8002b94:	40011000 	.word	0x40011000
 8002b98:	40011400 	.word	0x40011400
 8002b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	4909      	ldr	r1, [pc, #36]	; (8002bd0 <HAL_GPIO_Init+0x304>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f47f ae8e 	bne.w	80028e0 <HAL_GPIO_Init+0x14>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	372c      	adds	r7, #44	; 0x2c
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e12b      	b.n	8002e3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fe fde2 	bl	80017c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2224      	movs	r2, #36	; 0x24
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0201 	bic.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c38:	f000 ffea 	bl	8003c10 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4a81      	ldr	r2, [pc, #516]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d807      	bhi.n	8002c58 <HAL_I2C_Init+0x84>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a80      	ldr	r2, [pc, #512]	; (8002e4c <HAL_I2C_Init+0x278>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	bf94      	ite	ls
 8002c50:	2301      	movls	r3, #1
 8002c52:	2300      	movhi	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	e006      	b.n	8002c66 <HAL_I2C_Init+0x92>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4a7d      	ldr	r2, [pc, #500]	; (8002e50 <HAL_I2C_Init+0x27c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	bf94      	ite	ls
 8002c60:	2301      	movls	r3, #1
 8002c62:	2300      	movhi	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e0e7      	b.n	8002e3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a78      	ldr	r2, [pc, #480]	; (8002e54 <HAL_I2C_Init+0x280>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9b      	lsrs	r3, r3, #18
 8002c78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d802      	bhi.n	8002ca8 <HAL_I2C_Init+0xd4>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	e009      	b.n	8002cbc <HAL_I2C_Init+0xe8>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a69      	ldr	r2, [pc, #420]	; (8002e58 <HAL_I2C_Init+0x284>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	099b      	lsrs	r3, r3, #6
 8002cba:	3301      	adds	r3, #1
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	495c      	ldr	r1, [pc, #368]	; (8002e48 <HAL_I2C_Init+0x274>)
 8002cd8:	428b      	cmp	r3, r1
 8002cda:	d819      	bhi.n	8002d10 <HAL_I2C_Init+0x13c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	1e59      	subs	r1, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cea:	1c59      	adds	r1, r3, #1
 8002cec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_I2C_Init+0x138>
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	1e59      	subs	r1, r3, #1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0a:	e051      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	e04f      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <HAL_I2C_Init+0x168>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	1e58      	subs	r0, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	440b      	add	r3, r1
 8002d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	e012      	b.n	8002d62 <HAL_I2C_Init+0x18e>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1e58      	subs	r0, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	0099      	lsls	r1, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	bf0c      	ite	eq
 8002d5c:	2301      	moveq	r3, #1
 8002d5e:	2300      	movne	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_Init+0x196>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e022      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d10e      	bne.n	8002d90 <HAL_I2C_Init+0x1bc>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e58      	subs	r0, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6859      	ldr	r1, [r3, #4]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	440b      	add	r3, r1
 8002d80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d84:	3301      	adds	r3, #1
 8002d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d8e:	e00f      	b.n	8002db0 <HAL_I2C_Init+0x1dc>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	1e58      	subs	r0, r3, #1
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6859      	ldr	r1, [r3, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	0099      	lsls	r1, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da6:	3301      	adds	r3, #1
 8002da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	6809      	ldr	r1, [r1, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69da      	ldr	r2, [r3, #28]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6911      	ldr	r1, [r2, #16]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	4311      	orrs	r1, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2220      	movs	r2, #32
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	000186a0 	.word	0x000186a0
 8002e4c:	001e847f 	.word	0x001e847f
 8002e50:	003d08ff 	.word	0x003d08ff
 8002e54:	431bde83 	.word	0x431bde83
 8002e58:	10624dd3 	.word	0x10624dd3

08002e5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af02      	add	r7, sp, #8
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	607a      	str	r2, [r7, #4]
 8002e66:	461a      	mov	r2, r3
 8002e68:	460b      	mov	r3, r1
 8002e6a:	817b      	strh	r3, [r7, #10]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7fe fe36 	bl	8001ae0 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	f040 80e0 	bne.w	8003044 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2319      	movs	r3, #25
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4970      	ldr	r1, [pc, #448]	; (8003050 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f000 f964 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e0d3      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d101      	bne.n	8002eac <HAL_I2C_Master_Transmit+0x50>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	e0cc      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1ea>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d007      	beq.n	8002ed2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2221      	movs	r2, #33	; 0x21
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2210      	movs	r2, #16
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	893a      	ldrh	r2, [r7, #8]
 8002f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a50      	ldr	r2, [pc, #320]	; (8003054 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f14:	8979      	ldrh	r1, [r7, #10]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 f89c 	bl	8003058 <I2C_MasterRequestWrite>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e08d      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f40:	e066      	b.n	8003010 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	6a39      	ldr	r1, [r7, #32]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f9de 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b04      	cmp	r3, #4
 8002f58:	d107      	bne.n	8002f6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e06b      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d11b      	bne.n	8002fe4 <HAL_I2C_Master_Transmit+0x188>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d017      	beq.n	8002fe4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	6a39      	ldr	r1, [r7, #32]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f9ce 	bl	800338a <I2C_WaitOnBTFFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00d      	beq.n	8003010 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d107      	bne.n	800300c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e01a      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	2b00      	cmp	r3, #0
 8003016:	d194      	bne.n	8002f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	00100002 	.word	0x00100002
 8003054:	ffff0000 	.word	0xffff0000

08003058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b088      	sub	sp, #32
 800305c:	af02      	add	r7, sp, #8
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	607a      	str	r2, [r7, #4]
 8003062:	603b      	str	r3, [r7, #0]
 8003064:	460b      	mov	r3, r1
 8003066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b08      	cmp	r3, #8
 8003072:	d006      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d003      	beq.n	8003082 <I2C_MasterRequestWrite+0x2a>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003080:	d108      	bne.n	8003094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	e00b      	b.n	80030ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2b12      	cmp	r3, #18
 800309a:	d107      	bne.n	80030ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f84f 	bl	800315c <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00d      	beq.n	80030e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030d2:	d103      	bne.n	80030dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e035      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030e8:	d108      	bne.n	80030fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030f8:	611a      	str	r2, [r3, #16]
 80030fa:	e01b      	b.n	8003134 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030fc:	897b      	ldrh	r3, [r7, #10]
 80030fe:	11db      	asrs	r3, r3, #7
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 0306 	and.w	r3, r3, #6
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f063 030f 	orn	r3, r3, #15
 800310c:	b2da      	uxtb	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	490e      	ldr	r1, [pc, #56]	; (8003154 <I2C_MasterRequestWrite+0xfc>)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f875 	bl	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e010      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	b2da      	uxtb	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <I2C_MasterRequestWrite+0x100>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f865 	bl	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00010008 	.word	0x00010008
 8003158:	00010002 	.word	0x00010002

0800315c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4613      	mov	r3, r2
 800316a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800316c:	e025      	b.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003174:	d021      	beq.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fe fcb3 	bl	8001ae0 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0220 	orr.w	r2, r3, #32
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e023      	b.n	8003202 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10d      	bne.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	e00c      	b.n	80031fa <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	43da      	mvns	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	4013      	ands	r3, r2
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf0c      	ite	eq
 80031f2:	2301      	moveq	r3, #1
 80031f4:	2300      	movne	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d0b6      	beq.n	800316e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003218:	e051      	b.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003228:	d123      	bne.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003242:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f043 0204 	orr.w	r2, r3, #4
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e046      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003278:	d021      	beq.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327a:	f7fe fc31 	bl	8001ae0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	429a      	cmp	r2, r3
 8003288:	d302      	bcc.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f043 0220 	orr.w	r2, r3, #32
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e020      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	0c1b      	lsrs	r3, r3, #16
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10c      	bne.n	80032e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	43da      	mvns	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4013      	ands	r3, r2
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	e00b      	b.n	80032fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d18d      	bne.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003314:	e02d      	b.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f878 	bl	800340c <I2C_IsAcknowledgeFailed>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e02d      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800332c:	d021      	beq.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fbd7 	bl	8001ae0 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	f043 0220 	orr.w	r2, r3, #32
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e007      	b.n	8003382 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337c:	2b80      	cmp	r3, #128	; 0x80
 800337e:	d1ca      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003396:	e02d      	b.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f837 	bl	800340c <I2C_IsAcknowledgeFailed>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e02d      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ae:	d021      	beq.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7fe fb96 	bl	8001ae0 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d116      	bne.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f043 0220 	orr.w	r2, r3, #32
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e007      	b.n	8003404 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d1ca      	bne.n	8003398 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003422:	d11b      	bne.n	800345c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800342c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f043 0204 	orr.w	r2, r3, #4
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e000      	b.n	800345e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e26c      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8087 	beq.w	8003596 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003488:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b04      	cmp	r3, #4
 8003492:	d00c      	beq.n	80034ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003494:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d112      	bne.n	80034c6 <HAL_RCC_OscConfig+0x5e>
 80034a0:	4b8c      	ldr	r3, [pc, #560]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d10b      	bne.n	80034c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ae:	4b89      	ldr	r3, [pc, #548]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d06c      	beq.n	8003594 <HAL_RCC_OscConfig+0x12c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d168      	bne.n	8003594 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e246      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x76>
 80034d0:	4b80      	ldr	r3, [pc, #512]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a7f      	ldr	r2, [pc, #508]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	e02e      	b.n	800353c <HAL_RCC_OscConfig+0xd4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x98>
 80034e6:	4b7b      	ldr	r3, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a7a      	ldr	r2, [pc, #488]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	4b78      	ldr	r3, [pc, #480]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a77      	ldr	r2, [pc, #476]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80034f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	e01d      	b.n	800353c <HAL_RCC_OscConfig+0xd4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0xbc>
 800350a:	4b72      	ldr	r3, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0xd4>
 8003524:	4b6b      	ldr	r3, [pc, #428]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a6a      	ldr	r2, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 800352a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	4b68      	ldr	r3, [pc, #416]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a67      	ldr	r2, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003536:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d013      	beq.n	800356c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003544:	f7fe facc 	bl	8001ae0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800354c:	f7fe fac8 	bl	8001ae0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b64      	cmp	r3, #100	; 0x64
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e1fa      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b5d      	ldr	r3, [pc, #372]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d0f0      	beq.n	800354c <HAL_RCC_OscConfig+0xe4>
 800356a:	e014      	b.n	8003596 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fe fab8 	bl	8001ae0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003574:	f7fe fab4 	bl	8001ae0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b64      	cmp	r3, #100	; 0x64
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1e6      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003586:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x10c>
 8003592:	e000      	b.n	8003596 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d063      	beq.n	800366a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035a2:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ae:	4b49      	ldr	r3, [pc, #292]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d11c      	bne.n	80035f4 <HAL_RCC_OscConfig+0x18c>
 80035ba:	4b46      	ldr	r3, [pc, #280]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d116      	bne.n	80035f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c6:	4b43      	ldr	r3, [pc, #268]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d005      	beq.n	80035de <HAL_RCC_OscConfig+0x176>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d001      	beq.n	80035de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e1ba      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035de:	4b3d      	ldr	r3, [pc, #244]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4939      	ldr	r1, [pc, #228]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	e03a      	b.n	800366a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d020      	beq.n	800363e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035fc:	4b36      	ldr	r3, [pc, #216]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 80035fe:	2201      	movs	r2, #1
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fe fa6d 	bl	8001ae0 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360a:	f7fe fa69 	bl	8001ae0 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e19b      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0f0      	beq.n	800360a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	4927      	ldr	r1, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
 800363c:	e015      	b.n	800366a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <HAL_RCC_OscConfig+0x270>)
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003644:	f7fe fa4c 	bl	8001ae0 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800364c:	f7fe fa48 	bl	8001ae0 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e17a      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d03a      	beq.n	80036ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d019      	beq.n	80036b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367e:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_RCC_OscConfig+0x274>)
 8003680:	2201      	movs	r2, #1
 8003682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003684:	f7fe fa2c 	bl	8001ae0 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368c:	f7fe fa28 	bl	8001ae0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e15a      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800369e:	4b0d      	ldr	r3, [pc, #52]	; (80036d4 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036aa:	2001      	movs	r0, #1
 80036ac:	f000 fac4 	bl	8003c38 <RCC_Delay>
 80036b0:	e01c      	b.n	80036ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b2:	4b0a      	ldr	r3, [pc, #40]	; (80036dc <HAL_RCC_OscConfig+0x274>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b8:	f7fe fa12 	bl	8001ae0 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036be:	e00f      	b.n	80036e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe fa0e 	bl	8001ae0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d908      	bls.n	80036e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e140      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
 80036d2:	bf00      	nop
 80036d4:	40021000 	.word	0x40021000
 80036d8:	42420000 	.word	0x42420000
 80036dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	4b9e      	ldr	r3, [pc, #632]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e9      	bne.n	80036c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80a6 	beq.w	8003846 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fe:	4b97      	ldr	r3, [pc, #604]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	4b94      	ldr	r3, [pc, #592]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4a93      	ldr	r2, [pc, #588]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003714:	61d3      	str	r3, [r2, #28]
 8003716:	4b91      	ldr	r3, [pc, #580]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003722:	2301      	movs	r3, #1
 8003724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b8e      	ldr	r3, [pc, #568]	; (8003960 <HAL_RCC_OscConfig+0x4f8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d118      	bne.n	8003764 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003732:	4b8b      	ldr	r3, [pc, #556]	; (8003960 <HAL_RCC_OscConfig+0x4f8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a8a      	ldr	r2, [pc, #552]	; (8003960 <HAL_RCC_OscConfig+0x4f8>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800373e:	f7fe f9cf 	bl	8001ae0 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003746:	f7fe f9cb 	bl	8001ae0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b64      	cmp	r3, #100	; 0x64
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e0fd      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003758:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x4f8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d106      	bne.n	800377a <HAL_RCC_OscConfig+0x312>
 800376c:	4b7b      	ldr	r3, [pc, #492]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a7a      	ldr	r2, [pc, #488]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003772:	f043 0301 	orr.w	r3, r3, #1
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	e02d      	b.n	80037d6 <HAL_RCC_OscConfig+0x36e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x334>
 8003782:	4b76      	ldr	r3, [pc, #472]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	4a75      	ldr	r2, [pc, #468]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003788:	f023 0301 	bic.w	r3, r3, #1
 800378c:	6213      	str	r3, [r2, #32]
 800378e:	4b73      	ldr	r3, [pc, #460]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a72      	ldr	r2, [pc, #456]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003794:	f023 0304 	bic.w	r3, r3, #4
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	e01c      	b.n	80037d6 <HAL_RCC_OscConfig+0x36e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b05      	cmp	r3, #5
 80037a2:	d10c      	bne.n	80037be <HAL_RCC_OscConfig+0x356>
 80037a4:	4b6d      	ldr	r3, [pc, #436]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4a6c      	ldr	r2, [pc, #432]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037aa:	f043 0304 	orr.w	r3, r3, #4
 80037ae:	6213      	str	r3, [r2, #32]
 80037b0:	4b6a      	ldr	r3, [pc, #424]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a69      	ldr	r2, [pc, #420]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6213      	str	r3, [r2, #32]
 80037bc:	e00b      	b.n	80037d6 <HAL_RCC_OscConfig+0x36e>
 80037be:	4b67      	ldr	r3, [pc, #412]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4a66      	ldr	r2, [pc, #408]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6213      	str	r3, [r2, #32]
 80037ca:	4b64      	ldr	r3, [pc, #400]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a63      	ldr	r2, [pc, #396]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	f023 0304 	bic.w	r3, r3, #4
 80037d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d015      	beq.n	800380a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037de:	f7fe f97f 	bl	8001ae0 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fe f97b 	bl	8001ae0 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e0ab      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	4b57      	ldr	r3, [pc, #348]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ee      	beq.n	80037e6 <HAL_RCC_OscConfig+0x37e>
 8003808:	e014      	b.n	8003834 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7fe f969 	bl	8001ae0 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fe f965 	bl	8001ae0 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e095      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	4b4c      	ldr	r3, [pc, #304]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ee      	bne.n	8003812 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d105      	bne.n	8003846 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383a:	4b48      	ldr	r3, [pc, #288]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	4a47      	ldr	r2, [pc, #284]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003840:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003844:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8081 	beq.w	8003952 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003850:	4b42      	ldr	r3, [pc, #264]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 030c 	and.w	r3, r3, #12
 8003858:	2b08      	cmp	r3, #8
 800385a:	d061      	beq.n	8003920 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b02      	cmp	r3, #2
 8003862:	d146      	bne.n	80038f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_OscConfig+0x4fc>)
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386a:	f7fe f939 	bl	8001ae0 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003872:	f7fe f935 	bl	8001ae0 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e067      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003884:	4b35      	ldr	r3, [pc, #212]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d1f0      	bne.n	8003872 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d108      	bne.n	80038ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800389a:	4b30      	ldr	r3, [pc, #192]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	492d      	ldr	r1, [pc, #180]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ac:	4b2b      	ldr	r3, [pc, #172]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a19      	ldr	r1, [r3, #32]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	430b      	orrs	r3, r1
 80038be:	4927      	ldr	r1, [pc, #156]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x4fc>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ca:	f7fe f909 	bl	8001ae0 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d2:	f7fe f905 	bl	8001ae0 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e037      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x46a>
 80038f0:	e02f      	b.n	8003952 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <HAL_RCC_OscConfig+0x4fc>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fe f8f2 	bl	8001ae0 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe f8ee 	bl	8001ae0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e020      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x498>
 800391e:	e018      	b.n	8003952 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e013      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800392c:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_RCC_OscConfig+0x4f4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	d106      	bne.n	800394e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40021000 	.word	0x40021000
 8003960:	40007000 	.word	0x40007000
 8003964:	42420060 	.word	0x42420060

08003968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0d0      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800397c:	4b6a      	ldr	r3, [pc, #424]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d910      	bls.n	80039ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800398a:	4b67      	ldr	r3, [pc, #412]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f023 0207 	bic.w	r2, r3, #7
 8003992:	4965      	ldr	r1, [pc, #404]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b63      	ldr	r3, [pc, #396]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0b8      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0304 	and.w	r3, r3, #4
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	4a52      	ldr	r2, [pc, #328]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80039e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039e8:	4b50      	ldr	r3, [pc, #320]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	494d      	ldr	r1, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d040      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d107      	bne.n	8003a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d115      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07f      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d107      	bne.n	8003a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e073      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e06b      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a46:	4b39      	ldr	r3, [pc, #228]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 0203 	bic.w	r2, r3, #3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4936      	ldr	r1, [pc, #216]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a58:	f7fe f842 	bl	8001ae0 <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5e:	e00a      	b.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a60:	f7fe f83e 	bl	8001ae0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e053      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a76:	4b2d      	ldr	r3, [pc, #180]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f003 020c 	and.w	r2, r3, #12
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d1eb      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d210      	bcs.n	8003ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0207 	bic.w	r2, r3, #7
 8003a9e:	4922      	ldr	r1, [pc, #136]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e032      	b.n	8003b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4916      	ldr	r1, [pc, #88]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	490e      	ldr	r1, [pc, #56]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003af6:	f000 f821 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003afa:	4602      	mov	r2, r0
 8003afc:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_ClockConfig+0x1c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	091b      	lsrs	r3, r3, #4
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	490a      	ldr	r1, [pc, #40]	; (8003b30 <HAL_RCC_ClockConfig+0x1c8>)
 8003b08:	5ccb      	ldrb	r3, [r1, r3]
 8003b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0e:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1cc>)
 8003b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1d0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd ffa0 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	40022000 	.word	0x40022000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	08005410 	.word	0x08005410
 8003b34:	20000008 	.word	0x20000008
 8003b38:	2000000c 	.word	0x2000000c

08003b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b490      	push	{r4, r7}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b42:	4b2a      	ldr	r3, [pc, #168]	; (8003bec <HAL_RCC_GetSysClockFreq+0xb0>)
 8003b44:	1d3c      	adds	r4, r7, #4
 8003b46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b4c:	f240 2301 	movw	r3, #513	; 0x201
 8003b50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b66:	4b22      	ldr	r3, [pc, #136]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	d002      	beq.n	8003b7c <HAL_RCC_GetSysClockFreq+0x40>
 8003b76:	2b08      	cmp	r3, #8
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_GetSysClockFreq+0x46>
 8003b7a:	e02d      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b7e:	623b      	str	r3, [r7, #32]
      break;
 8003b80:	e02d      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	0c9b      	lsrs	r3, r3, #18
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003b8e:	4413      	add	r3, r2
 8003b90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003b94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ba0:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	0c5b      	lsrs	r3, r3, #17
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003bae:	4413      	add	r3, r2
 8003bb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003bb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bba:	fb02 f203 	mul.w	r2, r2, r3
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc6:	e004      	b.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	4a0b      	ldr	r2, [pc, #44]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	623b      	str	r3, [r7, #32]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003bda:	623b      	str	r3, [r7, #32]
      break;
 8003bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bde:	6a3b      	ldr	r3, [r7, #32]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bc90      	pop	{r4, r7}
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	08005338 	.word	0x08005338
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	007a1200 	.word	0x007a1200
 8003bf8:	003d0900 	.word	0x003d0900

08003bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b02      	ldr	r3, [pc, #8]	; (8003c0c <HAL_RCC_GetHCLKFreq+0x10>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	20000008 	.word	0x20000008

08003c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c14:	f7ff fff2 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	0a1b      	lsrs	r3, r3, #8
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4903      	ldr	r1, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c26:	5ccb      	ldrb	r3, [r1, r3]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08005420 	.word	0x08005420

08003c38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <RCC_Delay+0x34>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0a      	ldr	r2, [pc, #40]	; (8003c70 <RCC_Delay+0x38>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	0a5b      	lsrs	r3, r3, #9
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	fb02 f303 	mul.w	r3, r2, r3
 8003c52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c54:	bf00      	nop
  }
  while (Delay --);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1e5a      	subs	r2, r3, #1
 8003c5a:	60fa      	str	r2, [r7, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f9      	bne.n	8003c54 <RCC_Delay+0x1c>
}
 8003c60:	bf00      	nop
 8003c62:	bf00      	nop
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	20000008 	.word	0x20000008
 8003c70:	10624dd3 	.word	0x10624dd3

08003c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d07d      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003c90:	2300      	movs	r3, #0
 8003c92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c94:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c96:	69db      	ldr	r3, [r3, #28]
 8003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10d      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ca0:	4b4c      	ldr	r3, [pc, #304]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca2:	69db      	ldr	r3, [r3, #28]
 8003ca4:	4a4b      	ldr	r2, [pc, #300]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003caa:	61d3      	str	r3, [r2, #28]
 8003cac:	4b49      	ldr	r3, [pc, #292]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbc:	4b46      	ldr	r3, [pc, #280]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d118      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cc8:	4b43      	ldr	r3, [pc, #268]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a42      	ldr	r2, [pc, #264]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cd4:	f7fd ff04 	bl	8001ae0 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cda:	e008      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd ff00 	bl	8001ae0 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b64      	cmp	r3, #100	; 0x64
 8003ce8:	d901      	bls.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e06d      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b3a      	ldr	r3, [pc, #232]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02e      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d027      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d18:	4b2e      	ldr	r3, [pc, #184]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d22:	4b2e      	ldr	r3, [pc, #184]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d28:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d2e:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d014      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3e:	f7fd fecf 	bl	8001ae0 <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d44:	e00a      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d46:	f7fd fecb 	bl	8001ae0 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e036      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0ee      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d68:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4917      	ldr	r1, [pc, #92]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d7a:	7dfb      	ldrb	r3, [r7, #23]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	4a13      	ldr	r2, [pc, #76]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d008      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d98:	4b0e      	ldr	r3, [pc, #56]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	490b      	ldr	r1, [pc, #44]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	4904      	ldr	r1, [pc, #16]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40007000 	.word	0x40007000
 8003ddc:	42420440 	.word	0x42420440

08003de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e041      	b.n	8003e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fd fd2c 	bl	8001864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 faaa 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e041      	b.n	8003f14 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d106      	bne.n	8003eaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f839 	bl	8003f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4610      	mov	r0, r2
 8003ebe:	f000 fa5b 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d109      	bne.n	8003f54 <HAL_TIM_PWM_Start+0x24>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	bf14      	ite	ne
 8003f4c:	2301      	movne	r3, #1
 8003f4e:	2300      	moveq	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e022      	b.n	8003f9a <HAL_TIM_PWM_Start+0x6a>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d109      	bne.n	8003f6e <HAL_TIM_PWM_Start+0x3e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	bf14      	ite	ne
 8003f66:	2301      	movne	r3, #1
 8003f68:	2300      	moveq	r3, #0
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	e015      	b.n	8003f9a <HAL_TIM_PWM_Start+0x6a>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d109      	bne.n	8003f88 <HAL_TIM_PWM_Start+0x58>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	bf14      	ite	ne
 8003f80:	2301      	movne	r3, #1
 8003f82:	2300      	moveq	r3, #0
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	e008      	b.n	8003f9a <HAL_TIM_PWM_Start+0x6a>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e05e      	b.n	8004060 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d104      	bne.n	8003fb2 <HAL_TIM_PWM_Start+0x82>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb0:	e013      	b.n	8003fda <HAL_TIM_PWM_Start+0xaa>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b04      	cmp	r3, #4
 8003fb6:	d104      	bne.n	8003fc2 <HAL_TIM_PWM_Start+0x92>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	e00b      	b.n	8003fda <HAL_TIM_PWM_Start+0xaa>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0xa2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd0:	e003      	b.n	8003fda <HAL_TIM_PWM_Start+0xaa>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2202      	movs	r2, #2
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 fc48 	bl	8004878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1e      	ldr	r2, [pc, #120]	; (8004068 <HAL_TIM_PWM_Start+0x138>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d107      	bne.n	8004002 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a18      	ldr	r2, [pc, #96]	; (8004068 <HAL_TIM_PWM_Start+0x138>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00e      	beq.n	800402a <HAL_TIM_PWM_Start+0xfa>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d009      	beq.n	800402a <HAL_TIM_PWM_Start+0xfa>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a14      	ldr	r2, [pc, #80]	; (800406c <HAL_TIM_PWM_Start+0x13c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d004      	beq.n	800402a <HAL_TIM_PWM_Start+0xfa>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_TIM_PWM_Start+0x140>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d111      	bne.n	800404e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b06      	cmp	r3, #6
 800403a:	d010      	beq.n	800405e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f042 0201 	orr.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404c:	e007      	b.n	800405e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800

08004074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e0ac      	b.n	80041e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b0c      	cmp	r3, #12
 800409a:	f200 809f 	bhi.w	80041dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040d9 	.word	0x080040d9
 80040a8:	080041dd 	.word	0x080041dd
 80040ac:	080041dd 	.word	0x080041dd
 80040b0:	080041dd 	.word	0x080041dd
 80040b4:	08004119 	.word	0x08004119
 80040b8:	080041dd 	.word	0x080041dd
 80040bc:	080041dd 	.word	0x080041dd
 80040c0:	080041dd 	.word	0x080041dd
 80040c4:	0800415b 	.word	0x0800415b
 80040c8:	080041dd 	.word	0x080041dd
 80040cc:	080041dd 	.word	0x080041dd
 80040d0:	080041dd 	.word	0x080041dd
 80040d4:	0800419b 	.word	0x0800419b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68b9      	ldr	r1, [r7, #8]
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f9ac 	bl	800443c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0204 	bic.w	r2, r2, #4
 8004102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6999      	ldr	r1, [r3, #24]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	619a      	str	r2, [r3, #24]
      break;
 8004116:	e062      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f9f2 	bl	8004508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699a      	ldr	r2, [r3, #24]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004132:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	021a      	lsls	r2, r3, #8
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	430a      	orrs	r2, r1
 8004156:	619a      	str	r2, [r3, #24]
      break;
 8004158:	e041      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fa3b 	bl	80045dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0208 	orr.w	r2, r2, #8
 8004174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0204 	bic.w	r2, r2, #4
 8004184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69d9      	ldr	r1, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	691a      	ldr	r2, [r3, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	430a      	orrs	r2, r1
 8004196:	61da      	str	r2, [r3, #28]
      break;
 8004198:	e021      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fa85 	bl	80046b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	69da      	ldr	r2, [r3, #28]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	69da      	ldr	r2, [r3, #28]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69d9      	ldr	r1, [r3, #28]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	021a      	lsls	r2, r3, #8
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	61da      	str	r2, [r3, #28]
      break;
 80041da:	e000      	b.n	80041de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_TIM_ConfigClockSource+0x18>
 8004204:	2302      	movs	r3, #2
 8004206:	e0b3      	b.n	8004370 <HAL_TIM_ConfigClockSource+0x180>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800422e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004240:	d03e      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0xd0>
 8004242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004246:	f200 8087 	bhi.w	8004358 <HAL_TIM_ConfigClockSource+0x168>
 800424a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424e:	f000 8085 	beq.w	800435c <HAL_TIM_ConfigClockSource+0x16c>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	d87f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004258:	2b70      	cmp	r3, #112	; 0x70
 800425a:	d01a      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xa2>
 800425c:	2b70      	cmp	r3, #112	; 0x70
 800425e:	d87b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004260:	2b60      	cmp	r3, #96	; 0x60
 8004262:	d050      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x116>
 8004264:	2b60      	cmp	r3, #96	; 0x60
 8004266:	d877      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004268:	2b50      	cmp	r3, #80	; 0x50
 800426a:	d03c      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0xf6>
 800426c:	2b50      	cmp	r3, #80	; 0x50
 800426e:	d873      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d058      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x136>
 8004274:	2b40      	cmp	r3, #64	; 0x40
 8004276:	d86f      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004278:	2b30      	cmp	r3, #48	; 0x30
 800427a:	d064      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 800427c:	2b30      	cmp	r3, #48	; 0x30
 800427e:	d86b      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004280:	2b20      	cmp	r3, #32
 8004282:	d060      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 8004284:	2b20      	cmp	r3, #32
 8004286:	d867      	bhi.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
 8004288:	2b00      	cmp	r3, #0
 800428a:	d05c      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
 800428c:	2b10      	cmp	r3, #16
 800428e:	d05a      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004290:	e062      	b.n	8004358 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f000 faca 	bl	800483a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	609a      	str	r2, [r3, #8]
      break;
 80042be:	e04e      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6899      	ldr	r1, [r3, #8]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f000 fab3 	bl	800483a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689a      	ldr	r2, [r3, #8]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e2:	609a      	str	r2, [r3, #8]
      break;
 80042e4:	e03b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 fa2a 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2150      	movs	r1, #80	; 0x50
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fa81 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004304:	e02b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	461a      	mov	r2, r3
 8004314:	f000 fa48 	bl	80047a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2160      	movs	r1, #96	; 0x60
 800431e:	4618      	mov	r0, r3
 8004320:	f000 fa71 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004324:	e01b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6859      	ldr	r1, [r3, #4]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	461a      	mov	r2, r3
 8004334:	f000 fa0a 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2140      	movs	r1, #64	; 0x40
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fa61 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 8004344:	e00b      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	4610      	mov	r0, r2
 8004352:	f000 fa58 	bl	8004806 <TIM_ITRx_SetConfig>
        break;
 8004356:	e002      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800435c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a29      	ldr	r2, [pc, #164]	; (8004430 <TIM_Base_SetConfig+0xb8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x30>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x30>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a26      	ldr	r2, [pc, #152]	; (8004434 <TIM_Base_SetConfig+0xbc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x30>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a25      	ldr	r2, [pc, #148]	; (8004438 <TIM_Base_SetConfig+0xc0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <TIM_Base_SetConfig+0xb8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a19      	ldr	r2, [pc, #100]	; (8004434 <TIM_Base_SetConfig+0xbc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <TIM_Base_SetConfig+0xc0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <TIM_Base_SetConfig+0xb8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800

0800443c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0302 	bic.w	r3, r3, #2
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10c      	bne.n	80044b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00

08004508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0210 	bic.w	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0320 	bic.w	r3, r3, #32
 8004552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <TIM_OC2_SetConfig+0xd0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10d      	bne.n	8004584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <TIM_OC2_SetConfig+0xd0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d113      	bne.n	80045b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00

080045dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <TIM_OC3_SetConfig+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10d      	bne.n	8004656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <TIM_OC3_SetConfig+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d113      	bne.n	8004686 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800466c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00

080046b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <TIM_OC4_SetConfig+0x98>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00

0800474c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0201 	bic.w	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 030a 	bic.w	r3, r3, #10
 8004788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 0210 	bic.w	r2, r3, #16
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	031b      	lsls	r3, r3, #12
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	f043 0307 	orr.w	r3, r3, #7
 8004828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	609a      	str	r2, [r3, #8]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2201      	movs	r2, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1a      	ldr	r2, [r3, #32]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e046      	b.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a16      	ldr	r2, [pc, #88]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d009      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a12      	ldr	r2, [pc, #72]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10c      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4313      	orrs	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800

0800497c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004994:	2302      	movs	r3, #2
 8004996:	e03d      	b.n	8004a14 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	4770      	bx	lr
	...

08004a20 <__errno>:
 8004a20:	4b01      	ldr	r3, [pc, #4]	; (8004a28 <__errno+0x8>)
 8004a22:	6818      	ldr	r0, [r3, #0]
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000014 	.word	0x20000014

08004a2c <__libc_init_array>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	2600      	movs	r6, #0
 8004a30:	4d0c      	ldr	r5, [pc, #48]	; (8004a64 <__libc_init_array+0x38>)
 8004a32:	4c0d      	ldr	r4, [pc, #52]	; (8004a68 <__libc_init_array+0x3c>)
 8004a34:	1b64      	subs	r4, r4, r5
 8004a36:	10a4      	asrs	r4, r4, #2
 8004a38:	42a6      	cmp	r6, r4
 8004a3a:	d109      	bne.n	8004a50 <__libc_init_array+0x24>
 8004a3c:	f000 fc5c 	bl	80052f8 <_init>
 8004a40:	2600      	movs	r6, #0
 8004a42:	4d0a      	ldr	r5, [pc, #40]	; (8004a6c <__libc_init_array+0x40>)
 8004a44:	4c0a      	ldr	r4, [pc, #40]	; (8004a70 <__libc_init_array+0x44>)
 8004a46:	1b64      	subs	r4, r4, r5
 8004a48:	10a4      	asrs	r4, r4, #2
 8004a4a:	42a6      	cmp	r6, r4
 8004a4c:	d105      	bne.n	8004a5a <__libc_init_array+0x2e>
 8004a4e:	bd70      	pop	{r4, r5, r6, pc}
 8004a50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a54:	4798      	blx	r3
 8004a56:	3601      	adds	r6, #1
 8004a58:	e7ee      	b.n	8004a38 <__libc_init_array+0xc>
 8004a5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a5e:	4798      	blx	r3
 8004a60:	3601      	adds	r6, #1
 8004a62:	e7f2      	b.n	8004a4a <__libc_init_array+0x1e>
 8004a64:	0800545c 	.word	0x0800545c
 8004a68:	0800545c 	.word	0x0800545c
 8004a6c:	0800545c 	.word	0x0800545c
 8004a70:	08005460 	.word	0x08005460

08004a74 <memset>:
 8004a74:	4603      	mov	r3, r0
 8004a76:	4402      	add	r2, r0
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d100      	bne.n	8004a7e <memset+0xa>
 8004a7c:	4770      	bx	lr
 8004a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a82:	e7f9      	b.n	8004a78 <memset+0x4>

08004a84 <siprintf>:
 8004a84:	b40e      	push	{r1, r2, r3}
 8004a86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a8a:	b500      	push	{lr}
 8004a8c:	b09c      	sub	sp, #112	; 0x70
 8004a8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a90:	9002      	str	r0, [sp, #8]
 8004a92:	9006      	str	r0, [sp, #24]
 8004a94:	9107      	str	r1, [sp, #28]
 8004a96:	9104      	str	r1, [sp, #16]
 8004a98:	4808      	ldr	r0, [pc, #32]	; (8004abc <siprintf+0x38>)
 8004a9a:	4909      	ldr	r1, [pc, #36]	; (8004ac0 <siprintf+0x3c>)
 8004a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004aa0:	9105      	str	r1, [sp, #20]
 8004aa2:	6800      	ldr	r0, [r0, #0]
 8004aa4:	a902      	add	r1, sp, #8
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	f000 f868 	bl	8004b7c <_svfiprintf_r>
 8004aac:	2200      	movs	r2, #0
 8004aae:	9b02      	ldr	r3, [sp, #8]
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	b01c      	add	sp, #112	; 0x70
 8004ab4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ab8:	b003      	add	sp, #12
 8004aba:	4770      	bx	lr
 8004abc:	20000014 	.word	0x20000014
 8004ac0:	ffff0208 	.word	0xffff0208

08004ac4 <__ssputs_r>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	688e      	ldr	r6, [r1, #8]
 8004aca:	4682      	mov	sl, r0
 8004acc:	429e      	cmp	r6, r3
 8004ace:	460c      	mov	r4, r1
 8004ad0:	4690      	mov	r8, r2
 8004ad2:	461f      	mov	r7, r3
 8004ad4:	d838      	bhi.n	8004b48 <__ssputs_r+0x84>
 8004ad6:	898a      	ldrh	r2, [r1, #12]
 8004ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004adc:	d032      	beq.n	8004b44 <__ssputs_r+0x80>
 8004ade:	6825      	ldr	r5, [r4, #0]
 8004ae0:	6909      	ldr	r1, [r1, #16]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	eba5 0901 	sub.w	r9, r5, r1
 8004ae8:	6965      	ldr	r5, [r4, #20]
 8004aea:	444b      	add	r3, r9
 8004aec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004af0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004af4:	106d      	asrs	r5, r5, #1
 8004af6:	429d      	cmp	r5, r3
 8004af8:	bf38      	it	cc
 8004afa:	461d      	movcc	r5, r3
 8004afc:	0553      	lsls	r3, r2, #21
 8004afe:	d531      	bpl.n	8004b64 <__ssputs_r+0xa0>
 8004b00:	4629      	mov	r1, r5
 8004b02:	f000 fb53 	bl	80051ac <_malloc_r>
 8004b06:	4606      	mov	r6, r0
 8004b08:	b950      	cbnz	r0, 8004b20 <__ssputs_r+0x5c>
 8004b0a:	230c      	movs	r3, #12
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b10:	f8ca 3000 	str.w	r3, [sl]
 8004b14:	89a3      	ldrh	r3, [r4, #12]
 8004b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b1a:	81a3      	strh	r3, [r4, #12]
 8004b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b20:	464a      	mov	r2, r9
 8004b22:	6921      	ldr	r1, [r4, #16]
 8004b24:	f000 face 	bl	80050c4 <memcpy>
 8004b28:	89a3      	ldrh	r3, [r4, #12]
 8004b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b32:	81a3      	strh	r3, [r4, #12]
 8004b34:	6126      	str	r6, [r4, #16]
 8004b36:	444e      	add	r6, r9
 8004b38:	6026      	str	r6, [r4, #0]
 8004b3a:	463e      	mov	r6, r7
 8004b3c:	6165      	str	r5, [r4, #20]
 8004b3e:	eba5 0509 	sub.w	r5, r5, r9
 8004b42:	60a5      	str	r5, [r4, #8]
 8004b44:	42be      	cmp	r6, r7
 8004b46:	d900      	bls.n	8004b4a <__ssputs_r+0x86>
 8004b48:	463e      	mov	r6, r7
 8004b4a:	4632      	mov	r2, r6
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	6820      	ldr	r0, [r4, #0]
 8004b50:	f000 fac6 	bl	80050e0 <memmove>
 8004b54:	68a3      	ldr	r3, [r4, #8]
 8004b56:	6822      	ldr	r2, [r4, #0]
 8004b58:	1b9b      	subs	r3, r3, r6
 8004b5a:	4432      	add	r2, r6
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	60a3      	str	r3, [r4, #8]
 8004b60:	6022      	str	r2, [r4, #0]
 8004b62:	e7db      	b.n	8004b1c <__ssputs_r+0x58>
 8004b64:	462a      	mov	r2, r5
 8004b66:	f000 fb7b 	bl	8005260 <_realloc_r>
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d1e1      	bne.n	8004b34 <__ssputs_r+0x70>
 8004b70:	4650      	mov	r0, sl
 8004b72:	6921      	ldr	r1, [r4, #16]
 8004b74:	f000 face 	bl	8005114 <_free_r>
 8004b78:	e7c7      	b.n	8004b0a <__ssputs_r+0x46>
	...

08004b7c <_svfiprintf_r>:
 8004b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b80:	4698      	mov	r8, r3
 8004b82:	898b      	ldrh	r3, [r1, #12]
 8004b84:	4607      	mov	r7, r0
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	460d      	mov	r5, r1
 8004b8a:	4614      	mov	r4, r2
 8004b8c:	b09d      	sub	sp, #116	; 0x74
 8004b8e:	d50e      	bpl.n	8004bae <_svfiprintf_r+0x32>
 8004b90:	690b      	ldr	r3, [r1, #16]
 8004b92:	b963      	cbnz	r3, 8004bae <_svfiprintf_r+0x32>
 8004b94:	2140      	movs	r1, #64	; 0x40
 8004b96:	f000 fb09 	bl	80051ac <_malloc_r>
 8004b9a:	6028      	str	r0, [r5, #0]
 8004b9c:	6128      	str	r0, [r5, #16]
 8004b9e:	b920      	cbnz	r0, 8004baa <_svfiprintf_r+0x2e>
 8004ba0:	230c      	movs	r3, #12
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ba8:	e0d1      	b.n	8004d4e <_svfiprintf_r+0x1d2>
 8004baa:	2340      	movs	r3, #64	; 0x40
 8004bac:	616b      	str	r3, [r5, #20]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004bb8:	2330      	movs	r3, #48	; 0x30
 8004bba:	f04f 0901 	mov.w	r9, #1
 8004bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bc2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d68 <_svfiprintf_r+0x1ec>
 8004bc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bca:	4623      	mov	r3, r4
 8004bcc:	469a      	mov	sl, r3
 8004bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd2:	b10a      	cbz	r2, 8004bd8 <_svfiprintf_r+0x5c>
 8004bd4:	2a25      	cmp	r2, #37	; 0x25
 8004bd6:	d1f9      	bne.n	8004bcc <_svfiprintf_r+0x50>
 8004bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bdc:	d00b      	beq.n	8004bf6 <_svfiprintf_r+0x7a>
 8004bde:	465b      	mov	r3, fp
 8004be0:	4622      	mov	r2, r4
 8004be2:	4629      	mov	r1, r5
 8004be4:	4638      	mov	r0, r7
 8004be6:	f7ff ff6d 	bl	8004ac4 <__ssputs_r>
 8004bea:	3001      	adds	r0, #1
 8004bec:	f000 80aa 	beq.w	8004d44 <_svfiprintf_r+0x1c8>
 8004bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bf2:	445a      	add	r2, fp
 8004bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8004bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 80a2 	beq.w	8004d44 <_svfiprintf_r+0x1c8>
 8004c00:	2300      	movs	r3, #0
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c0a:	f10a 0a01 	add.w	sl, sl, #1
 8004c0e:	9304      	str	r3, [sp, #16]
 8004c10:	9307      	str	r3, [sp, #28]
 8004c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c16:	931a      	str	r3, [sp, #104]	; 0x68
 8004c18:	4654      	mov	r4, sl
 8004c1a:	2205      	movs	r2, #5
 8004c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c20:	4851      	ldr	r0, [pc, #324]	; (8004d68 <_svfiprintf_r+0x1ec>)
 8004c22:	f000 fa41 	bl	80050a8 <memchr>
 8004c26:	9a04      	ldr	r2, [sp, #16]
 8004c28:	b9d8      	cbnz	r0, 8004c62 <_svfiprintf_r+0xe6>
 8004c2a:	06d0      	lsls	r0, r2, #27
 8004c2c:	bf44      	itt	mi
 8004c2e:	2320      	movmi	r3, #32
 8004c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c34:	0711      	lsls	r1, r2, #28
 8004c36:	bf44      	itt	mi
 8004c38:	232b      	movmi	r3, #43	; 0x2b
 8004c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c42:	2b2a      	cmp	r3, #42	; 0x2a
 8004c44:	d015      	beq.n	8004c72 <_svfiprintf_r+0xf6>
 8004c46:	4654      	mov	r4, sl
 8004c48:	2000      	movs	r0, #0
 8004c4a:	f04f 0c0a 	mov.w	ip, #10
 8004c4e:	9a07      	ldr	r2, [sp, #28]
 8004c50:	4621      	mov	r1, r4
 8004c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c56:	3b30      	subs	r3, #48	; 0x30
 8004c58:	2b09      	cmp	r3, #9
 8004c5a:	d94e      	bls.n	8004cfa <_svfiprintf_r+0x17e>
 8004c5c:	b1b0      	cbz	r0, 8004c8c <_svfiprintf_r+0x110>
 8004c5e:	9207      	str	r2, [sp, #28]
 8004c60:	e014      	b.n	8004c8c <_svfiprintf_r+0x110>
 8004c62:	eba0 0308 	sub.w	r3, r0, r8
 8004c66:	fa09 f303 	lsl.w	r3, r9, r3
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	46a2      	mov	sl, r4
 8004c6e:	9304      	str	r3, [sp, #16]
 8004c70:	e7d2      	b.n	8004c18 <_svfiprintf_r+0x9c>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	1d19      	adds	r1, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	9103      	str	r1, [sp, #12]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfbb      	ittet	lt
 8004c7e:	425b      	neglt	r3, r3
 8004c80:	f042 0202 	orrlt.w	r2, r2, #2
 8004c84:	9307      	strge	r3, [sp, #28]
 8004c86:	9307      	strlt	r3, [sp, #28]
 8004c88:	bfb8      	it	lt
 8004c8a:	9204      	strlt	r2, [sp, #16]
 8004c8c:	7823      	ldrb	r3, [r4, #0]
 8004c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c90:	d10c      	bne.n	8004cac <_svfiprintf_r+0x130>
 8004c92:	7863      	ldrb	r3, [r4, #1]
 8004c94:	2b2a      	cmp	r3, #42	; 0x2a
 8004c96:	d135      	bne.n	8004d04 <_svfiprintf_r+0x188>
 8004c98:	9b03      	ldr	r3, [sp, #12]
 8004c9a:	3402      	adds	r4, #2
 8004c9c:	1d1a      	adds	r2, r3, #4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	9203      	str	r2, [sp, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bfb8      	it	lt
 8004ca6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004caa:	9305      	str	r3, [sp, #20]
 8004cac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d78 <_svfiprintf_r+0x1fc>
 8004cb0:	2203      	movs	r2, #3
 8004cb2:	4650      	mov	r0, sl
 8004cb4:	7821      	ldrb	r1, [r4, #0]
 8004cb6:	f000 f9f7 	bl	80050a8 <memchr>
 8004cba:	b140      	cbz	r0, 8004cce <_svfiprintf_r+0x152>
 8004cbc:	2340      	movs	r3, #64	; 0x40
 8004cbe:	eba0 000a 	sub.w	r0, r0, sl
 8004cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8004cc6:	9b04      	ldr	r3, [sp, #16]
 8004cc8:	3401      	adds	r4, #1
 8004cca:	4303      	orrs	r3, r0
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd2:	2206      	movs	r2, #6
 8004cd4:	4825      	ldr	r0, [pc, #148]	; (8004d6c <_svfiprintf_r+0x1f0>)
 8004cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cda:	f000 f9e5 	bl	80050a8 <memchr>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d038      	beq.n	8004d54 <_svfiprintf_r+0x1d8>
 8004ce2:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <_svfiprintf_r+0x1f4>)
 8004ce4:	bb1b      	cbnz	r3, 8004d2e <_svfiprintf_r+0x1b2>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	3307      	adds	r3, #7
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	3308      	adds	r3, #8
 8004cf0:	9303      	str	r3, [sp, #12]
 8004cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf4:	4433      	add	r3, r6
 8004cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cf8:	e767      	b.n	8004bca <_svfiprintf_r+0x4e>
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	2001      	movs	r0, #1
 8004cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d02:	e7a5      	b.n	8004c50 <_svfiprintf_r+0xd4>
 8004d04:	2300      	movs	r3, #0
 8004d06:	f04f 0c0a 	mov.w	ip, #10
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	3401      	adds	r4, #1
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	4620      	mov	r0, r4
 8004d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d16:	3a30      	subs	r2, #48	; 0x30
 8004d18:	2a09      	cmp	r2, #9
 8004d1a:	d903      	bls.n	8004d24 <_svfiprintf_r+0x1a8>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0c5      	beq.n	8004cac <_svfiprintf_r+0x130>
 8004d20:	9105      	str	r1, [sp, #20]
 8004d22:	e7c3      	b.n	8004cac <_svfiprintf_r+0x130>
 8004d24:	4604      	mov	r4, r0
 8004d26:	2301      	movs	r3, #1
 8004d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d2c:	e7f0      	b.n	8004d10 <_svfiprintf_r+0x194>
 8004d2e:	ab03      	add	r3, sp, #12
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	462a      	mov	r2, r5
 8004d34:	4638      	mov	r0, r7
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <_svfiprintf_r+0x1f8>)
 8004d38:	a904      	add	r1, sp, #16
 8004d3a:	f3af 8000 	nop.w
 8004d3e:	1c42      	adds	r2, r0, #1
 8004d40:	4606      	mov	r6, r0
 8004d42:	d1d6      	bne.n	8004cf2 <_svfiprintf_r+0x176>
 8004d44:	89ab      	ldrh	r3, [r5, #12]
 8004d46:	065b      	lsls	r3, r3, #25
 8004d48:	f53f af2c 	bmi.w	8004ba4 <_svfiprintf_r+0x28>
 8004d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d4e:	b01d      	add	sp, #116	; 0x74
 8004d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d54:	ab03      	add	r3, sp, #12
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	462a      	mov	r2, r5
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <_svfiprintf_r+0x1f8>)
 8004d5e:	a904      	add	r1, sp, #16
 8004d60:	f000 f87c 	bl	8004e5c <_printf_i>
 8004d64:	e7eb      	b.n	8004d3e <_svfiprintf_r+0x1c2>
 8004d66:	bf00      	nop
 8004d68:	08005428 	.word	0x08005428
 8004d6c:	08005432 	.word	0x08005432
 8004d70:	00000000 	.word	0x00000000
 8004d74:	08004ac5 	.word	0x08004ac5
 8004d78:	0800542e 	.word	0x0800542e

08004d7c <_printf_common>:
 8004d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d80:	4616      	mov	r6, r2
 8004d82:	4699      	mov	r9, r3
 8004d84:	688a      	ldr	r2, [r1, #8]
 8004d86:	690b      	ldr	r3, [r1, #16]
 8004d88:	4607      	mov	r7, r0
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	bfb8      	it	lt
 8004d8e:	4613      	movlt	r3, r2
 8004d90:	6033      	str	r3, [r6, #0]
 8004d92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d96:	460c      	mov	r4, r1
 8004d98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d9c:	b10a      	cbz	r2, 8004da2 <_printf_common+0x26>
 8004d9e:	3301      	adds	r3, #1
 8004da0:	6033      	str	r3, [r6, #0]
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	0699      	lsls	r1, r3, #26
 8004da6:	bf42      	ittt	mi
 8004da8:	6833      	ldrmi	r3, [r6, #0]
 8004daa:	3302      	addmi	r3, #2
 8004dac:	6033      	strmi	r3, [r6, #0]
 8004dae:	6825      	ldr	r5, [r4, #0]
 8004db0:	f015 0506 	ands.w	r5, r5, #6
 8004db4:	d106      	bne.n	8004dc4 <_printf_common+0x48>
 8004db6:	f104 0a19 	add.w	sl, r4, #25
 8004dba:	68e3      	ldr	r3, [r4, #12]
 8004dbc:	6832      	ldr	r2, [r6, #0]
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	42ab      	cmp	r3, r5
 8004dc2:	dc28      	bgt.n	8004e16 <_printf_common+0x9a>
 8004dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dc8:	1e13      	subs	r3, r2, #0
 8004dca:	6822      	ldr	r2, [r4, #0]
 8004dcc:	bf18      	it	ne
 8004dce:	2301      	movne	r3, #1
 8004dd0:	0692      	lsls	r2, r2, #26
 8004dd2:	d42d      	bmi.n	8004e30 <_printf_common+0xb4>
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	4638      	mov	r0, r7
 8004dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ddc:	47c0      	blx	r8
 8004dde:	3001      	adds	r0, #1
 8004de0:	d020      	beq.n	8004e24 <_printf_common+0xa8>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	68e5      	ldr	r5, [r4, #12]
 8004de6:	f003 0306 	and.w	r3, r3, #6
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	bf18      	it	ne
 8004dee:	2500      	movne	r5, #0
 8004df0:	6832      	ldr	r2, [r6, #0]
 8004df2:	f04f 0600 	mov.w	r6, #0
 8004df6:	68a3      	ldr	r3, [r4, #8]
 8004df8:	bf08      	it	eq
 8004dfa:	1aad      	subeq	r5, r5, r2
 8004dfc:	6922      	ldr	r2, [r4, #16]
 8004dfe:	bf08      	it	eq
 8004e00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bfc4      	itt	gt
 8004e08:	1a9b      	subgt	r3, r3, r2
 8004e0a:	18ed      	addgt	r5, r5, r3
 8004e0c:	341a      	adds	r4, #26
 8004e0e:	42b5      	cmp	r5, r6
 8004e10:	d11a      	bne.n	8004e48 <_printf_common+0xcc>
 8004e12:	2000      	movs	r0, #0
 8004e14:	e008      	b.n	8004e28 <_printf_common+0xac>
 8004e16:	2301      	movs	r3, #1
 8004e18:	4652      	mov	r2, sl
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	47c0      	blx	r8
 8004e20:	3001      	adds	r0, #1
 8004e22:	d103      	bne.n	8004e2c <_printf_common+0xb0>
 8004e24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e2c:	3501      	adds	r5, #1
 8004e2e:	e7c4      	b.n	8004dba <_printf_common+0x3e>
 8004e30:	2030      	movs	r0, #48	; 0x30
 8004e32:	18e1      	adds	r1, r4, r3
 8004e34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e38:	1c5a      	adds	r2, r3, #1
 8004e3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e3e:	4422      	add	r2, r4
 8004e40:	3302      	adds	r3, #2
 8004e42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e46:	e7c5      	b.n	8004dd4 <_printf_common+0x58>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	4649      	mov	r1, r9
 8004e4e:	4638      	mov	r0, r7
 8004e50:	47c0      	blx	r8
 8004e52:	3001      	adds	r0, #1
 8004e54:	d0e6      	beq.n	8004e24 <_printf_common+0xa8>
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7d9      	b.n	8004e0e <_printf_common+0x92>
	...

08004e5c <_printf_i>:
 8004e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	460c      	mov	r4, r1
 8004e62:	7e27      	ldrb	r7, [r4, #24]
 8004e64:	4691      	mov	r9, r2
 8004e66:	2f78      	cmp	r7, #120	; 0x78
 8004e68:	4680      	mov	r8, r0
 8004e6a:	469a      	mov	sl, r3
 8004e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e72:	d807      	bhi.n	8004e84 <_printf_i+0x28>
 8004e74:	2f62      	cmp	r7, #98	; 0x62
 8004e76:	d80a      	bhi.n	8004e8e <_printf_i+0x32>
 8004e78:	2f00      	cmp	r7, #0
 8004e7a:	f000 80d9 	beq.w	8005030 <_printf_i+0x1d4>
 8004e7e:	2f58      	cmp	r7, #88	; 0x58
 8004e80:	f000 80a4 	beq.w	8004fcc <_printf_i+0x170>
 8004e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e8c:	e03a      	b.n	8004f04 <_printf_i+0xa8>
 8004e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e92:	2b15      	cmp	r3, #21
 8004e94:	d8f6      	bhi.n	8004e84 <_printf_i+0x28>
 8004e96:	a001      	add	r0, pc, #4	; (adr r0, 8004e9c <_printf_i+0x40>)
 8004e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e9c:	08004ef5 	.word	0x08004ef5
 8004ea0:	08004f09 	.word	0x08004f09
 8004ea4:	08004e85 	.word	0x08004e85
 8004ea8:	08004e85 	.word	0x08004e85
 8004eac:	08004e85 	.word	0x08004e85
 8004eb0:	08004e85 	.word	0x08004e85
 8004eb4:	08004f09 	.word	0x08004f09
 8004eb8:	08004e85 	.word	0x08004e85
 8004ebc:	08004e85 	.word	0x08004e85
 8004ec0:	08004e85 	.word	0x08004e85
 8004ec4:	08004e85 	.word	0x08004e85
 8004ec8:	08005017 	.word	0x08005017
 8004ecc:	08004f39 	.word	0x08004f39
 8004ed0:	08004ff9 	.word	0x08004ff9
 8004ed4:	08004e85 	.word	0x08004e85
 8004ed8:	08004e85 	.word	0x08004e85
 8004edc:	08005039 	.word	0x08005039
 8004ee0:	08004e85 	.word	0x08004e85
 8004ee4:	08004f39 	.word	0x08004f39
 8004ee8:	08004e85 	.word	0x08004e85
 8004eec:	08004e85 	.word	0x08004e85
 8004ef0:	08005001 	.word	0x08005001
 8004ef4:	680b      	ldr	r3, [r1, #0]
 8004ef6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004efa:	1d1a      	adds	r2, r3, #4
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	600a      	str	r2, [r1, #0]
 8004f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0a4      	b.n	8005052 <_printf_i+0x1f6>
 8004f08:	6825      	ldr	r5, [r4, #0]
 8004f0a:	6808      	ldr	r0, [r1, #0]
 8004f0c:	062e      	lsls	r6, r5, #24
 8004f0e:	f100 0304 	add.w	r3, r0, #4
 8004f12:	d50a      	bpl.n	8004f2a <_printf_i+0xce>
 8004f14:	6805      	ldr	r5, [r0, #0]
 8004f16:	600b      	str	r3, [r1, #0]
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	da03      	bge.n	8004f24 <_printf_i+0xc8>
 8004f1c:	232d      	movs	r3, #45	; 0x2d
 8004f1e:	426d      	negs	r5, r5
 8004f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f24:	230a      	movs	r3, #10
 8004f26:	485e      	ldr	r0, [pc, #376]	; (80050a0 <_printf_i+0x244>)
 8004f28:	e019      	b.n	8004f5e <_printf_i+0x102>
 8004f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f2e:	6805      	ldr	r5, [r0, #0]
 8004f30:	600b      	str	r3, [r1, #0]
 8004f32:	bf18      	it	ne
 8004f34:	b22d      	sxthne	r5, r5
 8004f36:	e7ef      	b.n	8004f18 <_printf_i+0xbc>
 8004f38:	680b      	ldr	r3, [r1, #0]
 8004f3a:	6825      	ldr	r5, [r4, #0]
 8004f3c:	1d18      	adds	r0, r3, #4
 8004f3e:	6008      	str	r0, [r1, #0]
 8004f40:	0628      	lsls	r0, r5, #24
 8004f42:	d501      	bpl.n	8004f48 <_printf_i+0xec>
 8004f44:	681d      	ldr	r5, [r3, #0]
 8004f46:	e002      	b.n	8004f4e <_printf_i+0xf2>
 8004f48:	0669      	lsls	r1, r5, #25
 8004f4a:	d5fb      	bpl.n	8004f44 <_printf_i+0xe8>
 8004f4c:	881d      	ldrh	r5, [r3, #0]
 8004f4e:	2f6f      	cmp	r7, #111	; 0x6f
 8004f50:	bf0c      	ite	eq
 8004f52:	2308      	moveq	r3, #8
 8004f54:	230a      	movne	r3, #10
 8004f56:	4852      	ldr	r0, [pc, #328]	; (80050a0 <_printf_i+0x244>)
 8004f58:	2100      	movs	r1, #0
 8004f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f5e:	6866      	ldr	r6, [r4, #4]
 8004f60:	2e00      	cmp	r6, #0
 8004f62:	bfa8      	it	ge
 8004f64:	6821      	ldrge	r1, [r4, #0]
 8004f66:	60a6      	str	r6, [r4, #8]
 8004f68:	bfa4      	itt	ge
 8004f6a:	f021 0104 	bicge.w	r1, r1, #4
 8004f6e:	6021      	strge	r1, [r4, #0]
 8004f70:	b90d      	cbnz	r5, 8004f76 <_printf_i+0x11a>
 8004f72:	2e00      	cmp	r6, #0
 8004f74:	d04d      	beq.n	8005012 <_printf_i+0x1b6>
 8004f76:	4616      	mov	r6, r2
 8004f78:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f7c:	fb03 5711 	mls	r7, r3, r1, r5
 8004f80:	5dc7      	ldrb	r7, [r0, r7]
 8004f82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f86:	462f      	mov	r7, r5
 8004f88:	42bb      	cmp	r3, r7
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	d9f4      	bls.n	8004f78 <_printf_i+0x11c>
 8004f8e:	2b08      	cmp	r3, #8
 8004f90:	d10b      	bne.n	8004faa <_printf_i+0x14e>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	07df      	lsls	r7, r3, #31
 8004f96:	d508      	bpl.n	8004faa <_printf_i+0x14e>
 8004f98:	6923      	ldr	r3, [r4, #16]
 8004f9a:	6861      	ldr	r1, [r4, #4]
 8004f9c:	4299      	cmp	r1, r3
 8004f9e:	bfde      	ittt	le
 8004fa0:	2330      	movle	r3, #48	; 0x30
 8004fa2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004fa6:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004faa:	1b92      	subs	r2, r2, r6
 8004fac:	6122      	str	r2, [r4, #16]
 8004fae:	464b      	mov	r3, r9
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	f8cd a000 	str.w	sl, [sp]
 8004fb8:	aa03      	add	r2, sp, #12
 8004fba:	f7ff fedf 	bl	8004d7c <_printf_common>
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d14c      	bne.n	800505c <_printf_i+0x200>
 8004fc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc6:	b004      	add	sp, #16
 8004fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fcc:	4834      	ldr	r0, [pc, #208]	; (80050a0 <_printf_i+0x244>)
 8004fce:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fd2:	680e      	ldr	r6, [r1, #0]
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fda:	061f      	lsls	r7, r3, #24
 8004fdc:	600e      	str	r6, [r1, #0]
 8004fde:	d514      	bpl.n	800500a <_printf_i+0x1ae>
 8004fe0:	07d9      	lsls	r1, r3, #31
 8004fe2:	bf44      	itt	mi
 8004fe4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fe8:	6023      	strmi	r3, [r4, #0]
 8004fea:	b91d      	cbnz	r5, 8004ff4 <_printf_i+0x198>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	f023 0320 	bic.w	r3, r3, #32
 8004ff2:	6023      	str	r3, [r4, #0]
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	e7af      	b.n	8004f58 <_printf_i+0xfc>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	f043 0320 	orr.w	r3, r3, #32
 8004ffe:	6023      	str	r3, [r4, #0]
 8005000:	2378      	movs	r3, #120	; 0x78
 8005002:	4828      	ldr	r0, [pc, #160]	; (80050a4 <_printf_i+0x248>)
 8005004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005008:	e7e3      	b.n	8004fd2 <_printf_i+0x176>
 800500a:	065e      	lsls	r6, r3, #25
 800500c:	bf48      	it	mi
 800500e:	b2ad      	uxthmi	r5, r5
 8005010:	e7e6      	b.n	8004fe0 <_printf_i+0x184>
 8005012:	4616      	mov	r6, r2
 8005014:	e7bb      	b.n	8004f8e <_printf_i+0x132>
 8005016:	680b      	ldr	r3, [r1, #0]
 8005018:	6826      	ldr	r6, [r4, #0]
 800501a:	1d1d      	adds	r5, r3, #4
 800501c:	6960      	ldr	r0, [r4, #20]
 800501e:	600d      	str	r5, [r1, #0]
 8005020:	0635      	lsls	r5, r6, #24
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	d501      	bpl.n	800502a <_printf_i+0x1ce>
 8005026:	6018      	str	r0, [r3, #0]
 8005028:	e002      	b.n	8005030 <_printf_i+0x1d4>
 800502a:	0671      	lsls	r1, r6, #25
 800502c:	d5fb      	bpl.n	8005026 <_printf_i+0x1ca>
 800502e:	8018      	strh	r0, [r3, #0]
 8005030:	2300      	movs	r3, #0
 8005032:	4616      	mov	r6, r2
 8005034:	6123      	str	r3, [r4, #16]
 8005036:	e7ba      	b.n	8004fae <_printf_i+0x152>
 8005038:	680b      	ldr	r3, [r1, #0]
 800503a:	1d1a      	adds	r2, r3, #4
 800503c:	600a      	str	r2, [r1, #0]
 800503e:	681e      	ldr	r6, [r3, #0]
 8005040:	2100      	movs	r1, #0
 8005042:	4630      	mov	r0, r6
 8005044:	6862      	ldr	r2, [r4, #4]
 8005046:	f000 f82f 	bl	80050a8 <memchr>
 800504a:	b108      	cbz	r0, 8005050 <_printf_i+0x1f4>
 800504c:	1b80      	subs	r0, r0, r6
 800504e:	6060      	str	r0, [r4, #4]
 8005050:	6863      	ldr	r3, [r4, #4]
 8005052:	6123      	str	r3, [r4, #16]
 8005054:	2300      	movs	r3, #0
 8005056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800505a:	e7a8      	b.n	8004fae <_printf_i+0x152>
 800505c:	4632      	mov	r2, r6
 800505e:	4649      	mov	r1, r9
 8005060:	4640      	mov	r0, r8
 8005062:	6923      	ldr	r3, [r4, #16]
 8005064:	47d0      	blx	sl
 8005066:	3001      	adds	r0, #1
 8005068:	d0ab      	beq.n	8004fc2 <_printf_i+0x166>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	079b      	lsls	r3, r3, #30
 800506e:	d413      	bmi.n	8005098 <_printf_i+0x23c>
 8005070:	68e0      	ldr	r0, [r4, #12]
 8005072:	9b03      	ldr	r3, [sp, #12]
 8005074:	4298      	cmp	r0, r3
 8005076:	bfb8      	it	lt
 8005078:	4618      	movlt	r0, r3
 800507a:	e7a4      	b.n	8004fc6 <_printf_i+0x16a>
 800507c:	2301      	movs	r3, #1
 800507e:	4632      	mov	r2, r6
 8005080:	4649      	mov	r1, r9
 8005082:	4640      	mov	r0, r8
 8005084:	47d0      	blx	sl
 8005086:	3001      	adds	r0, #1
 8005088:	d09b      	beq.n	8004fc2 <_printf_i+0x166>
 800508a:	3501      	adds	r5, #1
 800508c:	68e3      	ldr	r3, [r4, #12]
 800508e:	9903      	ldr	r1, [sp, #12]
 8005090:	1a5b      	subs	r3, r3, r1
 8005092:	42ab      	cmp	r3, r5
 8005094:	dcf2      	bgt.n	800507c <_printf_i+0x220>
 8005096:	e7eb      	b.n	8005070 <_printf_i+0x214>
 8005098:	2500      	movs	r5, #0
 800509a:	f104 0619 	add.w	r6, r4, #25
 800509e:	e7f5      	b.n	800508c <_printf_i+0x230>
 80050a0:	08005439 	.word	0x08005439
 80050a4:	0800544a 	.word	0x0800544a

080050a8 <memchr>:
 80050a8:	4603      	mov	r3, r0
 80050aa:	b510      	push	{r4, lr}
 80050ac:	b2c9      	uxtb	r1, r1
 80050ae:	4402      	add	r2, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	d101      	bne.n	80050ba <memchr+0x12>
 80050b6:	2000      	movs	r0, #0
 80050b8:	e003      	b.n	80050c2 <memchr+0x1a>
 80050ba:	7804      	ldrb	r4, [r0, #0]
 80050bc:	3301      	adds	r3, #1
 80050be:	428c      	cmp	r4, r1
 80050c0:	d1f6      	bne.n	80050b0 <memchr+0x8>
 80050c2:	bd10      	pop	{r4, pc}

080050c4 <memcpy>:
 80050c4:	440a      	add	r2, r1
 80050c6:	4291      	cmp	r1, r2
 80050c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80050cc:	d100      	bne.n	80050d0 <memcpy+0xc>
 80050ce:	4770      	bx	lr
 80050d0:	b510      	push	{r4, lr}
 80050d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050d6:	4291      	cmp	r1, r2
 80050d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050dc:	d1f9      	bne.n	80050d2 <memcpy+0xe>
 80050de:	bd10      	pop	{r4, pc}

080050e0 <memmove>:
 80050e0:	4288      	cmp	r0, r1
 80050e2:	b510      	push	{r4, lr}
 80050e4:	eb01 0402 	add.w	r4, r1, r2
 80050e8:	d902      	bls.n	80050f0 <memmove+0x10>
 80050ea:	4284      	cmp	r4, r0
 80050ec:	4623      	mov	r3, r4
 80050ee:	d807      	bhi.n	8005100 <memmove+0x20>
 80050f0:	1e43      	subs	r3, r0, #1
 80050f2:	42a1      	cmp	r1, r4
 80050f4:	d008      	beq.n	8005108 <memmove+0x28>
 80050f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050fe:	e7f8      	b.n	80050f2 <memmove+0x12>
 8005100:	4601      	mov	r1, r0
 8005102:	4402      	add	r2, r0
 8005104:	428a      	cmp	r2, r1
 8005106:	d100      	bne.n	800510a <memmove+0x2a>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800510e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005112:	e7f7      	b.n	8005104 <memmove+0x24>

08005114 <_free_r>:
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4605      	mov	r5, r0
 8005118:	2900      	cmp	r1, #0
 800511a:	d043      	beq.n	80051a4 <_free_r+0x90>
 800511c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005120:	1f0c      	subs	r4, r1, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	bfb8      	it	lt
 8005126:	18e4      	addlt	r4, r4, r3
 8005128:	f000 f8d0 	bl	80052cc <__malloc_lock>
 800512c:	4a1e      	ldr	r2, [pc, #120]	; (80051a8 <_free_r+0x94>)
 800512e:	6813      	ldr	r3, [r2, #0]
 8005130:	4610      	mov	r0, r2
 8005132:	b933      	cbnz	r3, 8005142 <_free_r+0x2e>
 8005134:	6063      	str	r3, [r4, #4]
 8005136:	6014      	str	r4, [r2, #0]
 8005138:	4628      	mov	r0, r5
 800513a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800513e:	f000 b8cb 	b.w	80052d8 <__malloc_unlock>
 8005142:	42a3      	cmp	r3, r4
 8005144:	d90a      	bls.n	800515c <_free_r+0x48>
 8005146:	6821      	ldr	r1, [r4, #0]
 8005148:	1862      	adds	r2, r4, r1
 800514a:	4293      	cmp	r3, r2
 800514c:	bf01      	itttt	eq
 800514e:	681a      	ldreq	r2, [r3, #0]
 8005150:	685b      	ldreq	r3, [r3, #4]
 8005152:	1852      	addeq	r2, r2, r1
 8005154:	6022      	streq	r2, [r4, #0]
 8005156:	6063      	str	r3, [r4, #4]
 8005158:	6004      	str	r4, [r0, #0]
 800515a:	e7ed      	b.n	8005138 <_free_r+0x24>
 800515c:	461a      	mov	r2, r3
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	b10b      	cbz	r3, 8005166 <_free_r+0x52>
 8005162:	42a3      	cmp	r3, r4
 8005164:	d9fa      	bls.n	800515c <_free_r+0x48>
 8005166:	6811      	ldr	r1, [r2, #0]
 8005168:	1850      	adds	r0, r2, r1
 800516a:	42a0      	cmp	r0, r4
 800516c:	d10b      	bne.n	8005186 <_free_r+0x72>
 800516e:	6820      	ldr	r0, [r4, #0]
 8005170:	4401      	add	r1, r0
 8005172:	1850      	adds	r0, r2, r1
 8005174:	4283      	cmp	r3, r0
 8005176:	6011      	str	r1, [r2, #0]
 8005178:	d1de      	bne.n	8005138 <_free_r+0x24>
 800517a:	6818      	ldr	r0, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4401      	add	r1, r0
 8005180:	6011      	str	r1, [r2, #0]
 8005182:	6053      	str	r3, [r2, #4]
 8005184:	e7d8      	b.n	8005138 <_free_r+0x24>
 8005186:	d902      	bls.n	800518e <_free_r+0x7a>
 8005188:	230c      	movs	r3, #12
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	e7d4      	b.n	8005138 <_free_r+0x24>
 800518e:	6820      	ldr	r0, [r4, #0]
 8005190:	1821      	adds	r1, r4, r0
 8005192:	428b      	cmp	r3, r1
 8005194:	bf01      	itttt	eq
 8005196:	6819      	ldreq	r1, [r3, #0]
 8005198:	685b      	ldreq	r3, [r3, #4]
 800519a:	1809      	addeq	r1, r1, r0
 800519c:	6021      	streq	r1, [r4, #0]
 800519e:	6063      	str	r3, [r4, #4]
 80051a0:	6054      	str	r4, [r2, #4]
 80051a2:	e7c9      	b.n	8005138 <_free_r+0x24>
 80051a4:	bd38      	pop	{r3, r4, r5, pc}
 80051a6:	bf00      	nop
 80051a8:	200000b4 	.word	0x200000b4

080051ac <_malloc_r>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	1ccd      	adds	r5, r1, #3
 80051b0:	f025 0503 	bic.w	r5, r5, #3
 80051b4:	3508      	adds	r5, #8
 80051b6:	2d0c      	cmp	r5, #12
 80051b8:	bf38      	it	cc
 80051ba:	250c      	movcc	r5, #12
 80051bc:	2d00      	cmp	r5, #0
 80051be:	4606      	mov	r6, r0
 80051c0:	db01      	blt.n	80051c6 <_malloc_r+0x1a>
 80051c2:	42a9      	cmp	r1, r5
 80051c4:	d903      	bls.n	80051ce <_malloc_r+0x22>
 80051c6:	230c      	movs	r3, #12
 80051c8:	6033      	str	r3, [r6, #0]
 80051ca:	2000      	movs	r0, #0
 80051cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ce:	f000 f87d 	bl	80052cc <__malloc_lock>
 80051d2:	4921      	ldr	r1, [pc, #132]	; (8005258 <_malloc_r+0xac>)
 80051d4:	680a      	ldr	r2, [r1, #0]
 80051d6:	4614      	mov	r4, r2
 80051d8:	b99c      	cbnz	r4, 8005202 <_malloc_r+0x56>
 80051da:	4f20      	ldr	r7, [pc, #128]	; (800525c <_malloc_r+0xb0>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	b923      	cbnz	r3, 80051ea <_malloc_r+0x3e>
 80051e0:	4621      	mov	r1, r4
 80051e2:	4630      	mov	r0, r6
 80051e4:	f000 f862 	bl	80052ac <_sbrk_r>
 80051e8:	6038      	str	r0, [r7, #0]
 80051ea:	4629      	mov	r1, r5
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 f85d 	bl	80052ac <_sbrk_r>
 80051f2:	1c43      	adds	r3, r0, #1
 80051f4:	d123      	bne.n	800523e <_malloc_r+0x92>
 80051f6:	230c      	movs	r3, #12
 80051f8:	4630      	mov	r0, r6
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f000 f86c 	bl	80052d8 <__malloc_unlock>
 8005200:	e7e3      	b.n	80051ca <_malloc_r+0x1e>
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	1b5b      	subs	r3, r3, r5
 8005206:	d417      	bmi.n	8005238 <_malloc_r+0x8c>
 8005208:	2b0b      	cmp	r3, #11
 800520a:	d903      	bls.n	8005214 <_malloc_r+0x68>
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	441c      	add	r4, r3
 8005210:	6025      	str	r5, [r4, #0]
 8005212:	e004      	b.n	800521e <_malloc_r+0x72>
 8005214:	6863      	ldr	r3, [r4, #4]
 8005216:	42a2      	cmp	r2, r4
 8005218:	bf0c      	ite	eq
 800521a:	600b      	streq	r3, [r1, #0]
 800521c:	6053      	strne	r3, [r2, #4]
 800521e:	4630      	mov	r0, r6
 8005220:	f000 f85a 	bl	80052d8 <__malloc_unlock>
 8005224:	f104 000b 	add.w	r0, r4, #11
 8005228:	1d23      	adds	r3, r4, #4
 800522a:	f020 0007 	bic.w	r0, r0, #7
 800522e:	1ac2      	subs	r2, r0, r3
 8005230:	d0cc      	beq.n	80051cc <_malloc_r+0x20>
 8005232:	1a1b      	subs	r3, r3, r0
 8005234:	50a3      	str	r3, [r4, r2]
 8005236:	e7c9      	b.n	80051cc <_malloc_r+0x20>
 8005238:	4622      	mov	r2, r4
 800523a:	6864      	ldr	r4, [r4, #4]
 800523c:	e7cc      	b.n	80051d8 <_malloc_r+0x2c>
 800523e:	1cc4      	adds	r4, r0, #3
 8005240:	f024 0403 	bic.w	r4, r4, #3
 8005244:	42a0      	cmp	r0, r4
 8005246:	d0e3      	beq.n	8005210 <_malloc_r+0x64>
 8005248:	1a21      	subs	r1, r4, r0
 800524a:	4630      	mov	r0, r6
 800524c:	f000 f82e 	bl	80052ac <_sbrk_r>
 8005250:	3001      	adds	r0, #1
 8005252:	d1dd      	bne.n	8005210 <_malloc_r+0x64>
 8005254:	e7cf      	b.n	80051f6 <_malloc_r+0x4a>
 8005256:	bf00      	nop
 8005258:	200000b4 	.word	0x200000b4
 800525c:	200000b8 	.word	0x200000b8

08005260 <_realloc_r>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	4607      	mov	r7, r0
 8005264:	4614      	mov	r4, r2
 8005266:	460e      	mov	r6, r1
 8005268:	b921      	cbnz	r1, 8005274 <_realloc_r+0x14>
 800526a:	4611      	mov	r1, r2
 800526c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005270:	f7ff bf9c 	b.w	80051ac <_malloc_r>
 8005274:	b922      	cbnz	r2, 8005280 <_realloc_r+0x20>
 8005276:	f7ff ff4d 	bl	8005114 <_free_r>
 800527a:	4625      	mov	r5, r4
 800527c:	4628      	mov	r0, r5
 800527e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005280:	f000 f830 	bl	80052e4 <_malloc_usable_size_r>
 8005284:	42a0      	cmp	r0, r4
 8005286:	d20f      	bcs.n	80052a8 <_realloc_r+0x48>
 8005288:	4621      	mov	r1, r4
 800528a:	4638      	mov	r0, r7
 800528c:	f7ff ff8e 	bl	80051ac <_malloc_r>
 8005290:	4605      	mov	r5, r0
 8005292:	2800      	cmp	r0, #0
 8005294:	d0f2      	beq.n	800527c <_realloc_r+0x1c>
 8005296:	4631      	mov	r1, r6
 8005298:	4622      	mov	r2, r4
 800529a:	f7ff ff13 	bl	80050c4 <memcpy>
 800529e:	4631      	mov	r1, r6
 80052a0:	4638      	mov	r0, r7
 80052a2:	f7ff ff37 	bl	8005114 <_free_r>
 80052a6:	e7e9      	b.n	800527c <_realloc_r+0x1c>
 80052a8:	4635      	mov	r5, r6
 80052aa:	e7e7      	b.n	800527c <_realloc_r+0x1c>

080052ac <_sbrk_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	2300      	movs	r3, #0
 80052b0:	4d05      	ldr	r5, [pc, #20]	; (80052c8 <_sbrk_r+0x1c>)
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	f7fc fb58 	bl	800196c <_sbrk>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_sbrk_r+0x1a>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_sbrk_r+0x1a>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	20000200 	.word	0x20000200

080052cc <__malloc_lock>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__malloc_lock+0x8>)
 80052ce:	f000 b811 	b.w	80052f4 <__retarget_lock_acquire_recursive>
 80052d2:	bf00      	nop
 80052d4:	20000208 	.word	0x20000208

080052d8 <__malloc_unlock>:
 80052d8:	4801      	ldr	r0, [pc, #4]	; (80052e0 <__malloc_unlock+0x8>)
 80052da:	f000 b80c 	b.w	80052f6 <__retarget_lock_release_recursive>
 80052de:	bf00      	nop
 80052e0:	20000208 	.word	0x20000208

080052e4 <_malloc_usable_size_r>:
 80052e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e8:	1f18      	subs	r0, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bfbc      	itt	lt
 80052ee:	580b      	ldrlt	r3, [r1, r0]
 80052f0:	18c0      	addlt	r0, r0, r3
 80052f2:	4770      	bx	lr

080052f4 <__retarget_lock_acquire_recursive>:
 80052f4:	4770      	bx	lr

080052f6 <__retarget_lock_release_recursive>:
 80052f6:	4770      	bx	lr

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
